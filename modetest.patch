diff --git a/examples/minimal/packages/contracts/mud.config.mts b/examples/minimal/packages/contracts/mud.config.mts
index 14f82b70..bcf5647c 100644
--- a/examples/minimal/packages/contracts/mud.config.mts
+++ b/examples/minimal/packages/contracts/mud.config.mts
@@ -14,6 +14,28 @@ export default mudConfig({
         value: "uint32",
       },
       storeArgument: true,
+    },
+	PositionTable: {
+      name: "position",
+      schema: {
+        x: "uint32",
+		y: "uint32",
+      },
+      storeArgument: true,
+    },
+	IsTestTable: {
+      name: "isTest",
+      schema: {
+        value: "bool",
+      },
+      storeArgument: true,
+    },
+	SomeStringTable: {
+      name: "someString",
+      schema: {
+        value: "string",
+      },
+      storeArgument: true,
     },
   },
   modules: [
diff --git a/examples/minimal/packages/contracts/script/PostDeploy.s.sol b/examples/minimal/packages/contracts/script/PostDeploy.s.sol
index 6218122e..dda75fe3 100644
--- a/examples/minimal/packages/contracts/script/PostDeploy.s.sol
+++ b/examples/minimal/packages/contracts/script/PostDeploy.s.sol
@@ -18,7 +18,7 @@ contract PostDeploy is Script {
     // Call increment on the world via the registered function selector
     uint32 newValue = IWorld(worldAddress).increment();
     console.log("Increment via IWorld:", newValue);
-
+    IWorld(worldAddress).init();
     vm.stopBroadcast();
   }
 }
diff --git a/examples/minimal/packages/contracts/src/libraries/LibUtils.sol b/examples/minimal/packages/contracts/src/libraries/LibUtils.sol
new file mode 100644
index 00000000..0b37996e
--- /dev/null
+++ b/examples/minimal/packages/contracts/src/libraries/LibUtils.sol
@@ -0,0 +1,49 @@
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.8.0;
+
+library LibUtils {
+  /**
+   * @notice simple rng calculation
+   * @dev     complexity needs to be increased in prod
+   * @param   r1  first source of randomness
+   * @param   r2  second source of randomness
+   * @return  r  random value
+   */
+  function random(uint256 r1, uint256 r2) internal view returns (uint256 r) {
+    return uint256(keccak256(abi.encodePacked(r1, r2, block.difficulty, blockhash(block.number - 1))));
+  }
+
+  /**
+   * @dev Returns the largest of two numbers.
+   */
+  function max(int32 a, int32 b) internal pure returns (int32) {
+    return a > b ? a : b;
+  }
+
+  /**
+   * @dev Returns the smallest of two numbers.
+   */
+  function min(int32 a, int32 b) internal pure returns (int32) {
+    return a < b ? a : b;
+  }
+
+  /**
+   * @dev Returns the absolute value
+   */
+  function abs(int32 x) internal pure returns (int32) {
+    return x >= 0 ? x : -x;
+  }
+
+  /**
+   * @dev Conversion from address to bytes32
+   */
+  function addressToEntityKey(address _address) internal pure returns (bytes32 key) {
+    // ?? => bytes32(uint256(uint160(_address)) << 96)
+    return bytes32(uint256(uint160(_address)));
+  }
+
+  function getRandomKey() internal view returns (bytes32 key) {
+    // return keccak256(abi.encode(block.difficulty));
+    return keccak256(abi.encode(block.number, msg.sender, gasleft()));
+  }
+}
diff --git a/examples/minimal/packages/contracts/src/systems/InitSystem.sol b/examples/minimal/packages/contracts/src/systems/InitSystem.sol
new file mode 100644
index 00000000..d3dfed3e
--- /dev/null
+++ b/examples/minimal/packages/contracts/src/systems/InitSystem.sol
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.8.0;
+import { System } from "@latticexyz/world/src/System.sol";
+import { PositionTable, PositionTableData, IsTestTable, SomeStringTable } from "../codegen/Tables.sol";
+
+import { LibUtils } from "../libraries/LibUtils.sol";
+
+contract InitSystem is System {
+  function init() public {
+    bytes32 randomEntity = LibUtils.getRandomKey();
+    PositionTable.set(randomEntity, PositionTableData(4, 0));
+    IsTestTable.set(randomEntity, true);
+    SomeStringTable.set(randomEntity, "some test string");
+
+    bytes32 randomEntity2 = LibUtils.getRandomKey();
+    PositionTable.set(randomEntity2, PositionTableData(10, 10));
+    SomeStringTable.set(randomEntity2, "some other string data for second");
+
+    bytes32 randomEntity3 = LibUtils.getRandomKey();
+    PositionTable.set(randomEntity3, PositionTableData(8, 9));
+
+    PositionTable.set(randomEntity, PositionTableData(44, 55));
+  }
+}
