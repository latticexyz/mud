// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MoveSystemType is bytes32;

MoveSystemType constant moveSystem = MoveSystemType.wrap(
  0x737900000000000000000000000000004d6f766553797374656d000000000000
);

/**
 * @title MoveSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MoveSystemLib {
  function move(MoveSystemType __systemId, int32 x, int32 y) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(x, y));
    result;
  }

  function toResourceId(MoveSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(MoveSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MoveSystemType) {
    return MoveSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using MoveSystemLib for MoveSystemType global;
