// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { MoveSystem } from "../../systems/MoveSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MoveSystemType is bytes32;

MoveSystemType constant moveSystem = MoveSystemType.wrap(
  0x737900000000000000000000000000004d6f766553797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title MoveSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MoveSystemLib {
  function move(MoveSystemType self, int32 x, int32 y) internal {
    return CallWrapper(self.toResourceId(), address(0)).move(x, y);
  }

  function move(CallWrapper memory self, int32 x, int32 y) internal {
    bytes memory systemCall = abi.encodeCall(MoveSystem.move, (x, y));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function callFrom(MoveSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function toResourceId(MoveSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(MoveSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MoveSystemType) {
    return MoveSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using MoveSystemLib for MoveSystemType global;
using MoveSystemLib for CallWrapper global;
