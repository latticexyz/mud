// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RootSystem } from "../../RootSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RootSystemType is bytes32;

RootSystemType constant rootSystem = RootSystemType.wrap(
  0x73790000000000000000000000000000526f6f7453797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RootSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RootSystemLib {
  error RootSystemLib_CallingFromRootSystem();

  function setValueInA(RootSystemType self, uint256 value) internal {
    return CallWrapper(self.toResourceId(), address(0)).setValueInA(value);
  }

  function setValueInA(CallWrapper memory self, uint256 value) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RootSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(RootSystem.setValueInA, (value));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function setValueInA(RootCallWrapper memory self, uint256 value) internal {
    bytes memory systemCall = abi.encodeCall(RootSystem.setValueInA, (value));
    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    result;
  }

  function callFrom(RootSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RootSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(RootSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RootSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RootSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RootSystemType) {
    return RootSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RootSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using RootSystemLib for RootSystemType global;
using RootSystemLib for CallWrapper global;
using RootSystemLib for RootCallWrapper global;
