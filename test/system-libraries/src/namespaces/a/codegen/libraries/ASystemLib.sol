// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ASystem } from "../../ASystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ASystemType is bytes32;

ASystemType constant aSystem = ASystemType.wrap(0x737961000000000000000000000000004153797374656d000000000000000000);

/**
 * @title ASystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ASystemLib {
  struct CallFromWrapper {
    ASystemType systemId;
    address from;
  }

  function setValue(ASystemType __systemId, uint256 value) internal {
    bytes memory systemCall = abi.encodeCall(ASystem.setValue, (value));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function getValue(ASystemType __systemId) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(ASystem.getValue, ());
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (__systemId.toResourceId(), systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    bytes memory result = abi.decode(returnData, (bytes));

    return abi.decode(result, (uint256));
  }

  // TODO: rename to callFrom?
  function from(ASystemType systemId, address _from) internal pure returns (CallFromWrapper memory) {
    return CallFromWrapper({ systemId: systemId, from: _from });
  }

  function toResourceId(ASystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(ASystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ASystemType) {
    return ASystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using ASystemLib for ASystemType global;
