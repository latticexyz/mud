[
  {
    "source": "test/Bytes.t.sol",
    "name": "compare equal bytes",
    "functionCall": "bool equals = Bytes.equals(a, b)",
    "gasUsed": 202
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "compare unequal bytes",
    "functionCall": "bool equals = Bytes.equals(a, b)",
    "gasUsed": 202
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "set bytes1 in bytes32",
    "functionCall": "Bytes.setBytes1(input, 8, 0xff)",
    "gasUsed": 7
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "set bytes2 in bytes32",
    "functionCall": "Bytes.setBytes2(input, 8, 0xffff)",
    "gasUsed": 7
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "set bytes4 in bytes32",
    "functionCall": "Bytes.setBytes4(input, 8, 0xffffffff)",
    "gasUsed": 7
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "set bytes4 in bytes memory",
    "functionCall": "bytes memory result = Bytes.setBytes4(input, 0, overwrite)",
    "gasUsed": 43
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "slice bytes3 with offset 1",
    "functionCall": "bytes3 b = Bytes.slice3(a, 1)",
    "gasUsed": 77
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "slice bytes32 with offset 10",
    "functionCall": "bytes32 output = Bytes.slice32(input, 10)",
    "gasUsed": 74
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "create bytes32 from bytes memory with offset 0",
    "functionCall": "bytes32 output = Bytes.toBytes32(input, 0)",
    "gasUsed": 22
  },
  {
    "source": "test/Bytes.t.sol",
    "name": "create bytes32 from bytes memory with offset 16",
    "functionCall": "bytes32 output = Bytes.toBytes32(input, 16)",
    "gasUsed": 22
  },
  {
    "source": "test/Gas.t.sol",
    "name": "abi encode",
    "functionCall": "bytes memory abiEncoded = abi.encode(mixed)",
    "gasUsed": 969
  },
  {
    "source": "test/Gas.t.sol",
    "name": "abi decode",
    "functionCall": "Mixed memory abiDecoded = abi.decode(abiEncoded, (Mixed))",
    "gasUsed": 1755
  },
  {
    "source": "test/Gas.t.sol",
    "name": "custom encode",
    "functionCall": "bytes memory customEncoded = customEncode(mixed)",
    "gasUsed": 1826
  },
  {
    "source": "test/Gas.t.sol",
    "name": "custom decode",
    "functionCall": "Mixed memory customDecoded = customDecode(customEncoded)",
    "gasUsed": 2446
  },
  {
    "source": "test/Gas.t.sol",
    "name": "pass abi encoded bytes to external contract",
    "functionCall": "someContract.doSomethingWithBytes(abiEncoded)",
    "gasUsed": 6554
  },
  {
    "source": "test/Gas.t.sol",
    "name": "pass custom encoded bytes to external contract",
    "functionCall": "someContract.doSomethingWithBytes(customEncoded)",
    "gasUsed": 1381
  },
  {
    "source": "test/Mixed.t.sol",
    "name": "store Mixed struct in storage (native solidity)",
    "functionCall": "testMixed = mixed",
    "gasUsed": 92050
  },
  {
    "source": "test/Mixed.t.sol",
    "name": "register Mixed schema",
    "functionCall": "Mixed.registerSchema()",
    "gasUsed": 61228
  },
  {
    "source": "test/Mixed.t.sol",
    "name": "set record in Mixed",
    "functionCall": "Mixed.set({ key: key, u32: 1, u128: 2, a32: a32, s: s })",
    "gasUsed": 112165
  },
  {
    "source": "test/Mixed.t.sol",
    "name": "get record from Mixed",
    "functionCall": "MixedData memory mixed = Mixed.get(key)",
    "gasUsed": 13460
  },
  {
    "source": "test/PackedCounter.t.sol",
    "name": "get value at index of PackedCounter",
    "functionCall": "packedCounter.atIndex(3)",
    "gasUsed": 261
  },
  {
    "source": "test/PackedCounter.t.sol",
    "name": "set value at index of PackedCounter",
    "functionCall": "packedCounter = packedCounter.setAtIndex(2, 5)",
    "gasUsed": 799
  },
  {
    "source": "test/PackedCounter.t.sol",
    "name": "pack uint16 array into PackedCounter",
    "functionCall": "PackedCounter packedCounter = PackedCounterLib.pack(counters)",
    "gasUsed": 2152
  },
  {
    "source": "test/PackedCounter.t.sol",
    "name": "get total of PackedCounter",
    "functionCall": "packedCounter.total()",
    "gasUsed": 33
  },
  {
    "source": "test/Schema.t.sol",
    "name": "get schema type at index",
    "functionCall": "SchemaType schemaType1 = schema.atIndex(0)",
    "gasUsed": 191
  },
  {
    "source": "test/Schema.t.sol",
    "name": "get number of dynamic fields from schema",
    "functionCall": "uint256 num = schema.numDynamicFields()",
    "gasUsed": 80
  },
  {
    "source": "test/Schema.t.sol",
    "name": "get number of static fields from schema",
    "functionCall": "uint256 num = schema.numStaticFields()",
    "gasUsed": 91
  },
  {
    "source": "test/Schema.t.sol",
    "name": "get static data length from schema",
    "functionCall": "uint256 length = schema.staticDataLength()",
    "gasUsed": 39
  },
  {
    "source": "test/Schema.t.sol",
    "name": "check if schema is empty (non-empty schema)",
    "functionCall": "bool empty = encodedSchema.isEmpty()",
    "gasUsed": 13
  },
  {
    "source": "test/Schema.t.sol",
    "name": "check if schema is empty (empty schema)",
    "functionCall": "bool empty = encodedSchema.isEmpty()",
    "gasUsed": 13
  },
  {
    "source": "test/Schema.t.sol",
    "name": "validate schema",
    "functionCall": "encodedSchema.validate({ allowEmpty: false })",
    "gasUsed": 18965
  },
  {
    "source": "test/Slice.t.sol",
    "name": "make Slice from bytes",
    "functionCall": "Slice slice = SliceLib.fromBytes(data)",
    "gasUsed": 40
  },
  {
    "source": "test/Slice.t.sol",
    "name": "get Slice length",
    "functionCall": "slice.length()",
    "gasUsed": 7
  },
  {
    "source": "test/Slice.t.sol",
    "name": "get Slice pointer",
    "functionCall": "slice.pointer()",
    "gasUsed": 33
  },
  {
    "source": "test/Slice.t.sol",
    "name": "subslice bytes (no copy) [1:4]",
    "functionCall": "Slice slice1 = SliceLib.getSubslice(data, 1, 1 + 3)",
    "gasUsed": 317
  },
  {
    "source": "test/Slice.t.sol",
    "name": "subslice bytes (no copy) [4:37]",
    "functionCall": "Slice slice2 = SliceLib.getSubslice(data, 4, 4 + 33)",
    "gasUsed": 317
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (0 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData0 = slice.toBytes()",
    "gasUsed": 610
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (2 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData2 = slice.toBytes()",
    "gasUsed": 644
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (32 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData32 = slice.toBytes()",
    "gasUsed": 644
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (34 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData34 = slice.toBytes()",
    "gasUsed": 722
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (1024 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData1024 = slice.toBytes()",
    "gasUsed": 4979
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice (1024x1024 bytes) to bytes memory",
    "functionCall": "bytes memory sliceData1024x1024 = slice.toBytes()",
    "gasUsed": 6606528
  },
  {
    "source": "test/Slice.t.sol",
    "name": "Slice to bytes32",
    "functionCall": "bytes32 output = slice.toBytes32()",
    "gasUsed": 87
  },
  {
    "source": "test/Storage.t.sol",
    "name": "store 1 storage slot",
    "functionCall": "Storage.store({ storagePointer: storagePointer, data: originalDataFirstSlot })",
    "gasUsed": 22509
  },
  {
    "source": "test/Storage.t.sol",
    "name": "store 34 bytes over 3 storage slots (with offset and safeTrail))",
    "functionCall": "Storage.store({ storagePointer: storagePointer, offset: 31, data: data1 })",
    "gasUsed": 23164
  },
  {
    "source": "test/Storage.t.sol",
    "name": "load 34 bytes over 3 storage slots (with offset and safeTrail))",
    "functionCall": "bytes memory data = Storage.load({ storagePointer: storagePointer, length: 34, offset: 31 })",
    "gasUsed": 1108
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field slice (cold, 1 slot)",
    "functionCall": "bytes memory secondFieldSlice = StoreCore.getFieldSlice(_table, _key, 1, schema, 0, 4)",
    "gasUsed": 8161
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field slice (warm, 1 slot)",
    "functionCall": "secondFieldSlice = StoreCore.getFieldSlice(_table, _key, 1, schema, 4, 8)",
    "gasUsed": 2188
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field slice (semi-cold, 1 slot)",
    "functionCall": "bytes memory thirdFieldSlice = StoreCore.getFieldSlice(_table, _key, 2, schema, 4, 32)",
    "gasUsed": 4193
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field slice (warm, 2 slots)",
    "functionCall": "thirdFieldSlice = StoreCore.getFieldSlice(_table, _key, 2, schema, 8, 40)",
    "gasUsed": 4475
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field length (cold, 1 slot)",
    "functionCall": "uint256 length = StoreCore.getFieldLength(_table, _key, 1, schema)",
    "gasUsed": 7968
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field length (warm, 1 slot)",
    "functionCall": "length = StoreCore.getFieldLength(_table, _key, 1, schema)",
    "gasUsed": 1964
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field length (warm due to , 2 slots)",
    "functionCall": "uint256 length = StoreCore.getFieldLength(_table, _key, 2, schema)",
    "gasUsed": 7968
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "get field length (warm, 2 slots)",
    "functionCall": "length = StoreCore.getFieldLength(_table, _key, 2, schema)",
    "gasUsed": 1964
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "pop from field (cold, 1 slot, 1 uint32 item)",
    "functionCall": "StoreCore.popFromField(_table, _key, 1, byteLengthToPop)",
    "gasUsed": 29270
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "pop from field (warm, 1 slot, 1 uint32 item)",
    "functionCall": "StoreCore.popFromField(_table, _key, 1, byteLengthToPop)",
    "gasUsed": 19348
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "pop from field (cold, 2 slots, 10 uint32 items)",
    "functionCall": "StoreCore.popFromField(_table, _key, 2, byteLengthToPop)",
    "gasUsed": 31149
  },
  {
    "source": "test/StoreCoreDynamic.t.sol",
    "name": "pop from field (warm, 2 slots, 10 uint32 items)",
    "functionCall": "StoreCore.popFromField(_table, _key, 2, byteLengthToPop)",
    "gasUsed": 19231
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "access non-existing record",
    "functionCall": "StoreCore.getRecord(table, key)",
    "gasUsed": 7310
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "access static field of non-existing record",
    "functionCall": "StoreCore.getField(table, key, 0)",
    "gasUsed": 2982
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "access dynamic field of non-existing record",
    "functionCall": "StoreCore.getField(table, key, 1)",
    "gasUsed": 3593
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "access length of dynamic field of non-existing record",
    "functionCall": "StoreCore.getFieldLength(table, key, 1, schema)",
    "gasUsed": 1331
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "access slice of dynamic field of non-existing record",
    "functionCall": "StoreCore.getFieldSlice(table, key, 1, schema, 0, 0)",
    "gasUsed": 1331
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "delete record (complex data, 3 slots)",
    "functionCall": "StoreCore.deleteRecord(table, key)",
    "gasUsed": 11001
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "Check for existence of table (existent)",
    "functionCall": "StoreCore.hasTable(table)",
    "gasUsed": 1111
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "check for existence of table (non-existent)",
    "functionCall": "StoreCore.hasTable(table2)",
    "gasUsed": 3138
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "register subscriber",
    "functionCall": "StoreCore.registerStoreHook(table, subscriber)",
    "gasUsed": 65566
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set record on table with subscriber",
    "functionCall": "StoreCore.setRecord(table, key, data)",
    "gasUsed": 73972
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set static field on table with subscriber",
    "functionCall": "StoreCore.setField(table, key, 0, data)",
    "gasUsed": 31960
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "delete record on table with subscriber",
    "functionCall": "StoreCore.deleteRecord(table, key)",
    "gasUsed": 24545
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "register subscriber",
    "functionCall": "StoreCore.registerStoreHook(table, subscriber)",
    "gasUsed": 65566
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set (dynamic) record on table with subscriber",
    "functionCall": "StoreCore.setRecord(table, key, data)",
    "gasUsed": 167409
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set (dynamic) field on table with subscriber",
    "functionCall": "StoreCore.setField(table, key, 1, arrayDataBytes)",
    "gasUsed": 34919
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "delete (dynamic) record on table with subscriber",
    "functionCall": "StoreCore.deleteRecord(table, key)",
    "gasUsed": 26059
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "push to field (1 slot, 1 uint32 item)",
    "functionCall": "StoreCore.pushToField(table, key, 1, secondDataToPush)",
    "gasUsed": 17072
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "push to field (2 slots, 10 uint32 items)",
    "functionCall": "StoreCore.pushToField(table, key, 2, thirdDataToPush)",
    "gasUsed": 39780
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "StoreCore: register schema",
    "functionCall": "StoreCore.registerSchema(table, schema, keySchema)",
    "gasUsed": 54877
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "StoreCore: get schema (warm)",
    "functionCall": "StoreCore.getSchema(table)",
    "gasUsed": 1136
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "StoreCore: get key schema (warm)",
    "functionCall": "StoreCore.getKeySchema(table)",
    "gasUsed": 1204
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set complex record with dynamic data (4 slots)",
    "functionCall": "StoreCore.setRecord(table, key, data)",
    "gasUsed": 107714
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get complex record with dynamic data (4 slots)",
    "functionCall": "StoreCore.getRecord(table, key)",
    "gasUsed": 6443
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "compare: Set complex record with dynamic data using native solidity",
    "functionCall": "testStruct = _testStruct",
    "gasUsed": 116839
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "compare: Set complex record with dynamic data using abi.encode",
    "functionCall": "testMapping[1234] = abi.encode(_testStruct)",
    "gasUsed": 267377
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set dynamic length of dynamic index 0",
    "functionCall": "StoreCoreInternal._setDynamicDataLengthAtIndex(table, key, 0, 10)",
    "gasUsed": 23600
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set dynamic length of dynamic index 1",
    "functionCall": "StoreCoreInternal._setDynamicDataLengthAtIndex(table, key, 1, 99)",
    "gasUsed": 1719
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "reduce dynamic length of dynamic index 0",
    "functionCall": "StoreCoreInternal._setDynamicDataLengthAtIndex(table, key, 0, 5)",
    "gasUsed": 1707
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set static field (1 slot)",
    "functionCall": "StoreCore.setField(table, key, 0, firstDataPacked)",
    "gasUsed": 37980
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get static field (1 slot)",
    "functionCall": "StoreCore.getField(table, key, 0)",
    "gasUsed": 2980
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set static field (overlap 2 slot)",
    "functionCall": "StoreCore.setField(table, key, 1, secondDataPacked)",
    "gasUsed": 35009
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get static field (overlap 2 slot)",
    "functionCall": "StoreCore.getField(table, key, 1)",
    "gasUsed": 3877
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set dynamic field (1 slot, first dynamic field)",
    "functionCall": "StoreCore.setField(table, key, 2, thirdDataBytes)",
    "gasUsed": 57377
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get dynamic field (1 slot, first dynamic field)",
    "functionCall": "StoreCore.getField(table, key, 2)",
    "gasUsed": 3812
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set dynamic field (1 slot, second dynamic field)",
    "functionCall": "StoreCore.setField(table, key, 3, fourthDataBytes)",
    "gasUsed": 35503
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get dynamic field (1 slot, second dynamic field)",
    "functionCall": "StoreCore.getField(table, key, 3)",
    "gasUsed": 3825
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set static record (1 slot)",
    "functionCall": "StoreCore.setRecord(table, key, data)",
    "gasUsed": 37369
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get static record (1 slot)",
    "functionCall": "StoreCore.getRecord(table, key, schema)",
    "gasUsed": 1329
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "set static record (2 slots)",
    "functionCall": "StoreCore.setRecord(table, key, data)",
    "gasUsed": 59940
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "get static record (2 slots)",
    "functionCall": "StoreCore.getRecord(table, key, schema)",
    "gasUsed": 1578
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "StoreCore: set table metadata",
    "functionCall": "StoreCore.setMetadata(table, tableName, fieldNames)",
    "gasUsed": 251850
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "update in field (1 slot, 1 uint32 item)",
    "functionCall": "StoreCore.updateInField(table, key, 1, 4 * 1, secondDataForUpdate)",
    "gasUsed": 16604
  },
  {
    "source": "test/StoreCoreGas.t.sol",
    "name": "push to field (2 slots, 6 uint64 items)",
    "functionCall": "StoreCore.updateInField(table, key, 2, 8 * 1, thirdDataForUpdate)",
    "gasUsed": 17699
  },
  {
    "source": "test/StoreMetadata.t.sol",
    "name": "set record in StoreMetadataTable",
    "functionCall": "StoreMetadata.set({ tableId: tableId, tableName: tableName, abiEncodedFieldNames: abi.encode(fieldNames) })",
    "gasUsed": 250196
  },
  {
    "source": "test/StoreMetadata.t.sol",
    "name": "get record from StoreMetadataTable",
    "functionCall": "StoreMetadataData memory metadata = StoreMetadata.get(tableId)",
    "gasUsed": 12117
  },
  {
    "source": "test/StoreSwitch.t.sol",
    "name": "check if delegatecall",
    "functionCall": "isDelegate = StoreSwitch.isDelegateCall()",
    "gasUsed": 694
  },
  {
    "source": "test/StoreSwitch.t.sol",
    "name": "check if delegatecall",
    "functionCall": "isDelegate = StoreSwitch.isDelegateCall()",
    "gasUsed": 627
  },
  {
    "source": "test/tables/Callbacks.t.sol",
    "name": "set field in Callbacks",
    "functionCall": "Callbacks.set(key, callbacks)",
    "gasUsed": 63195
  },
  {
    "source": "test/tables/Callbacks.t.sol",
    "name": "get field from Callbacks (warm)",
    "functionCall": "bytes24[] memory returnedCallbacks = Callbacks.get(key)",
    "gasUsed": 5791
  },
  {
    "source": "test/tables/Callbacks.t.sol",
    "name": "push field to Callbacks",
    "functionCall": "Callbacks.push(key, callbacks[0])",
    "gasUsed": 40884
  },
  {
    "source": "test/tables/Hooks.t.sol",
    "name": "set field in Hooks",
    "functionCall": "Hooks.set(key, addresses)",
    "gasUsed": 63364
  },
  {
    "source": "test/tables/Hooks.t.sol",
    "name": "get field from Hooks (warm)",
    "functionCall": "address[] memory returnedAddresses = Hooks.get(key)",
    "gasUsed": 5940
  },
  {
    "source": "test/tables/Hooks.t.sol",
    "name": "push field to Hooks",
    "functionCall": "Hooks.push(key, addresses[0])",
    "gasUsed": 40876
  },
  {
    "source": "test/tightcoder/DecodeSlice.t.sol",
    "name": "decode packed uint32[]",
    "functionCall": "uint32[] memory arr = SliceLib.fromBytes(input).decodeArray_uint32()",
    "gasUsed": 794
  },
  {
    "source": "test/tightcoder/DecodeSlice.t.sol",
    "name": "decode packed bytes32[]",
    "functionCall": "bytes32[] memory output = SliceLib.fromBytes(input).decodeArray_bytes32()",
    "gasUsed": 623
  },
  {
    "source": "test/tightcoder/EncodeArray.t.sol",
    "name": "encode packed bytes[]",
    "functionCall": "bytes memory output = EncodeArray.encode(input)",
    "gasUsed": 1365
  },
  {
    "source": "test/tightcoder/EncodeArray.t.sol",
    "name": "encode packed uint16[]",
    "functionCall": "bytes memory output = EncodeArray.encode(input)",
    "gasUsed": 1155
  },
  {
    "source": "test/tightcoder/EncodeArray.t.sol",
    "name": "encode packed uint32[]",
    "functionCall": "bytes memory output = EncodeArray.encode(input)",
    "gasUsed": 1061
  },
  {
    "source": "test/tightcoder/EncodeArray.t.sol",
    "name": "encode packed uint8[]",
    "functionCall": "bytes memory output = EncodeArray.encode(input)",
    "gasUsed": 1050
  },
  {
    "source": "test/tightcoder/TightCoder.t.sol",
    "name": "decode packed uint32[]",
    "functionCall": "uint32[] memory output = SliceLib.fromBytes(packed).decodeArray_uint32()",
    "gasUsed": 797
  },
  {
    "source": "test/tightcoder/TightCoder.t.sol",
    "name": "encode packed bytes24[]",
    "functionCall": "bytes memory packed = EncodeArray.encode(input)",
    "gasUsed": 898
  },
  {
    "source": "test/tightcoder/TightCoder.t.sol",
    "name": "decode packed uint32[]",
    "functionCall": "bytes24[] memory output = SliceLib.fromBytes(packed).decodeArray_bytes24()",
    "gasUsed": 634
  },
  {
    "source": "test/Vector2.t.sol",
    "name": "register Vector2 schema",
    "functionCall": "Vector2.registerSchema()",
    "gasUsed": 58004
  },
  {
    "source": "test/Vector2.t.sol",
    "name": "set Vector2 record",
    "functionCall": "Vector2.set({ key: key, x: 1, y: 2 })",
    "gasUsed": 38643
  },
  {
    "source": "test/Vector2.t.sol",
    "name": "get Vector2 record",
    "functionCall": "Vector2Data memory vector = Vector2.get(key)",
    "gasUsed": 5094
  }
]
