// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { Schema, SchemaLib } from "../Schema.sol";

// -- User defined schema --

struct Route {
  address addr;
  bytes4 selector;
  uint8 executionMode;
}

// -- Autogenerated library --
// TODO: autogenerate

library Route_ {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema schema) {
    schema = SchemaLib.encode(SchemaType.ADDRESS, SchemaType.BYTES4, SchemaType.UINT8);
  }

  /** Register the table's schema */
  function registerSchema(bytes32 tableId) internal {
    StoreSwitch.registerSchema(tableId, getSchema());
  }

  function registerSchema(bytes32 tableId, IStore store) internal {
    store.registerSchema(tableId, getSchema());
  }

  /** Set the table's data */
  function set(
    bytes32 tableId,
    bytes32 key,
    address addr,
    bytes4 selector,
    uint8 executionMode
  ) internal {
    bytes memory data = abi.encodePacked(addr, selector, executionMode);
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setRecord(tableId, keyTuple, data);
  }

  function set(
    bytes32 tableId,
    bytes32 key,
    Route memory data
  ) internal {
    set(tableId, key, data.addr, data.selector, data.executionMode);
  }

  function setAddress(
    bytes32 tableId,
    bytes32 key,
    address addr
  ) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setField(tableId, keyTuple, 0, abi.encodePacked(addr));
  }

  function setSelector(
    bytes32 tableId,
    bytes32 key,
    bytes4 selector
  ) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setField(tableId, keyTuple, 1, abi.encodePacked(selector));
  }

  function setExecutionMode(
    bytes32 tableId,
    bytes32 key,
    uint8 executionMode
  ) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setField(tableId, keyTuple, 2, abi.encodePacked(executionMode));
  }

  /** Get the table's data */
  function get(bytes32 tableId, bytes32 key) internal view returns (Route memory data) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory blob = StoreSwitch.getRecord(tableId, keyTuple);
    return decode(blob);
  }

  function get(
    bytes32 tableId,
    IStore store,
    bytes32 key
  ) internal view returns (Route memory data) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory blob = store.getRecord(tableId, keyTuple);
    return decode(blob);
  }

  function decode(bytes memory blob) internal pure returns (Route memory data) {
    return
      Route({
        addr: address(Bytes.slice20(blob, 0)),
        selector: Bytes.slice4(blob, 20),
        executionMode: uint8(Bytes.slice1(blob, 24))
      });
  }
}
