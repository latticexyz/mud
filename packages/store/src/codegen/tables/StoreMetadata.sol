// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "../../IStore.sol";
import { StoreSwitch } from "../../StoreSwitch.sol";
import { StoreCore } from "../../StoreCore.sol";
import { Bytes } from "../../Bytes.sol";
import { Memory } from "../../Memory.sol";
import { SliceLib } from "../../Slice.sol";
import { EncodeArray } from "../../tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "../../Schema.sol";
import { PackedCounter, PackedCounterLib } from "../../PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("mudstore"), bytes16("StoreMetadata")));
bytes32 constant StoreMetadataTableId = _tableId;

struct StoreMetadataData {
  string tableName;
  bytes abiEncodedValueSchemaNames;
  bytes abiEncodedKeySchemaNames;
}

library StoreMetadata {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.STRING;
    _schema[1] = SchemaType.BYTES;
    _schema[2] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory, string[] memory) {
    string[] memory _valueSchemaNames = new string[](3);
    _valueSchemaNames[0] = "tableName";
    _valueSchemaNames[1] = "abiEncodedValueSchemaNames";
    _valueSchemaNames[2] = "abiEncodedKeySchemaNames";
    string[] memory _keySchemaNames = new string[](1);
    _keySchemaNames[0] = "tableId";
    return ("StoreMetadata", _valueSchemaNames, _keySchemaNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _valueSchemaNames, string[] memory _keySchemaNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _valueSchemaNames, _keySchemaNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _valueSchemaNames, string[] memory _keySchemaNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _valueSchemaNames, _keySchemaNames);
  }

  /** Get tableName */
  function getTableName(bytes32 tableId) internal view returns (string memory tableName) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Get tableName (using the specified store) */
  function getTableName(IStore _store, bytes32 tableId) internal view returns (string memory tableName) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Set tableName */
  function setTableName(bytes32 tableId, string memory tableName) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, bytes((tableName)));
  }

  /** Set tableName (using the specified store) */
  function setTableName(IStore _store, bytes32 tableId, string memory tableName) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 0, bytes((tableName)));
  }

  /** Get the length of tableName */
  function lengthTableName(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of tableName (using the specified store) */
  function lengthTableName(IStore _store, bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of tableName (unchecked, returns invalid data if index overflows) */
  function getItemTableName(bytes32 tableId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of tableName (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTableName(IStore _store, bytes32 tableId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to tableName */
  function pushTableName(bytes32 tableId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Push a slice to tableName (using the specified store) */
  function pushTableName(IStore _store, bytes32 tableId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.pushToField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Pop a slice from tableName */
  function popTableName(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 0, 1);
  }

  /** Pop a slice from tableName (using the specified store) */
  function popTableName(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.popFromField(_tableId, _keyTuple, 0, 1);
  }

  /** Update a slice of tableName at `_index` */
  function updateTableName(bytes32 tableId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 0, _index * 1, bytes((_slice)));
  }

  /** Update a slice of tableName (using the specified store) at `_index` */
  function updateTableName(IStore _store, bytes32 tableId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.updateInField(_tableId, _keyTuple, 0, _index * 1, bytes((_slice)));
  }

  /** Get abiEncodedValueSchemaNames */
  function getAbiEncodedValueSchemaNames(
    bytes32 tableId
  ) internal view returns (bytes memory abiEncodedValueSchemaNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Get abiEncodedValueSchemaNames (using the specified store) */
  function getAbiEncodedValueSchemaNames(
    IStore _store,
    bytes32 tableId
  ) internal view returns (bytes memory abiEncodedValueSchemaNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Set abiEncodedValueSchemaNames */
  function setAbiEncodedValueSchemaNames(bytes32 tableId, bytes memory abiEncodedValueSchemaNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((abiEncodedValueSchemaNames)));
  }

  /** Set abiEncodedValueSchemaNames (using the specified store) */
  function setAbiEncodedValueSchemaNames(
    IStore _store,
    bytes32 tableId,
    bytes memory abiEncodedValueSchemaNames
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 1, bytes((abiEncodedValueSchemaNames)));
  }

  /** Get the length of abiEncodedValueSchemaNames */
  function lengthAbiEncodedValueSchemaNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of abiEncodedValueSchemaNames (using the specified store) */
  function lengthAbiEncodedValueSchemaNames(IStore _store, bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of abiEncodedValueSchemaNames (unchecked, returns invalid data if index overflows) */
  function getItemAbiEncodedValueSchemaNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of abiEncodedValueSchemaNames (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemAbiEncodedValueSchemaNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to abiEncodedValueSchemaNames */
  function pushAbiEncodedValueSchemaNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to abiEncodedValueSchemaNames (using the specified store) */
  function pushAbiEncodedValueSchemaNames(IStore _store, bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from abiEncodedValueSchemaNames */
  function popAbiEncodedValueSchemaNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from abiEncodedValueSchemaNames (using the specified store) */
  function popAbiEncodedValueSchemaNames(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update a slice of abiEncodedValueSchemaNames at `_index` */
  function updateAbiEncodedValueSchemaNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Update a slice of abiEncodedValueSchemaNames (using the specified store) at `_index` */
  function updateAbiEncodedValueSchemaNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Get abiEncodedKeySchemaNames */
  function getAbiEncodedKeySchemaNames(bytes32 tableId) internal view returns (bytes memory abiEncodedKeySchemaNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Get abiEncodedKeySchemaNames (using the specified store) */
  function getAbiEncodedKeySchemaNames(
    IStore _store,
    bytes32 tableId
  ) internal view returns (bytes memory abiEncodedKeySchemaNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Set abiEncodedKeySchemaNames */
  function setAbiEncodedKeySchemaNames(bytes32 tableId, bytes memory abiEncodedKeySchemaNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((abiEncodedKeySchemaNames)));
  }

  /** Set abiEncodedKeySchemaNames (using the specified store) */
  function setAbiEncodedKeySchemaNames(IStore _store, bytes32 tableId, bytes memory abiEncodedKeySchemaNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 2, bytes((abiEncodedKeySchemaNames)));
  }

  /** Get the length of abiEncodedKeySchemaNames */
  function lengthAbiEncodedKeySchemaNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of abiEncodedKeySchemaNames (using the specified store) */
  function lengthAbiEncodedKeySchemaNames(IStore _store, bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of abiEncodedKeySchemaNames (unchecked, returns invalid data if index overflows) */
  function getItemAbiEncodedKeySchemaNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of abiEncodedKeySchemaNames (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemAbiEncodedKeySchemaNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to abiEncodedKeySchemaNames */
  function pushAbiEncodedKeySchemaNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to abiEncodedKeySchemaNames (using the specified store) */
  function pushAbiEncodedKeySchemaNames(IStore _store, bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from abiEncodedKeySchemaNames */
  function popAbiEncodedKeySchemaNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from abiEncodedKeySchemaNames (using the specified store) */
  function popAbiEncodedKeySchemaNames(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of abiEncodedKeySchemaNames at `_index` */
  function updateAbiEncodedKeySchemaNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of abiEncodedKeySchemaNames (using the specified store) at `_index` */
  function updateAbiEncodedKeySchemaNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 tableId) internal view returns (StoreMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 tableId) internal view returns (StoreMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 tableId,
    string memory tableName,
    bytes memory abiEncodedValueSchemaNames,
    bytes memory abiEncodedKeySchemaNames
  ) internal {
    bytes memory _data = encode(tableName, abiEncodedValueSchemaNames, abiEncodedKeySchemaNames);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 tableId,
    string memory tableName,
    bytes memory abiEncodedValueSchemaNames,
    bytes memory abiEncodedKeySchemaNames
  ) internal {
    bytes memory _data = encode(tableName, abiEncodedValueSchemaNames, abiEncodedKeySchemaNames);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 tableId, StoreMetadataData memory _table) internal {
    set(tableId, _table.tableName, _table.abiEncodedValueSchemaNames, _table.abiEncodedKeySchemaNames);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 tableId, StoreMetadataData memory _table) internal {
    set(_store, tableId, _table.tableName, _table.abiEncodedValueSchemaNames, _table.abiEncodedKeySchemaNames);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (StoreMetadataData memory _table) {
    // 0 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 0));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 0) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 32;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.tableName = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.abiEncodedValueSchemaNames = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.abiEncodedKeySchemaNames = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    string memory tableName,
    bytes memory abiEncodedValueSchemaNames,
    bytes memory abiEncodedKeySchemaNames
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(bytes(tableName).length);
    _counters[1] = uint40(bytes(abiEncodedValueSchemaNames).length);
    _counters[2] = uint40(bytes(abiEncodedKeySchemaNames).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        _encodedLengths.unwrap(),
        bytes((tableName)),
        bytes((abiEncodedValueSchemaNames)),
        bytes((abiEncodedKeySchemaNames))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 tableId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
