// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "../../IStore.sol";
import { StoreSwitch } from "../../StoreSwitch.sol";
import { StoreCore } from "../../StoreCore.sol";
import { Bytes } from "../../Bytes.sol";
import { Memory } from "../../Memory.sol";
import { SliceLib } from "../../Slice.sol";
import { EncodeArray } from "../../tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "../../FieldLayout.sol";
import { Schema, SchemaLib } from "../../Schema.sol";
import { PackedCounter, PackedCounterLib } from "../../PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("mudstore"), bytes16("Tables")));
bytes32 constant TablesTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0060030220202000000000000000000000000000000000000000000000000000
);

struct TablesData {
  bytes32 fieldLayout;
  bytes32 keySchema;
  bytes32 valueSchema;
  bytes abiEncodedKeyNames;
  bytes abiEncodedFieldNames;
}

library Tables {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.BYTES32;
    _valueSchema[1] = SchemaType.BYTES32;
    _valueSchema[2] = SchemaType.BYTES32;
    _valueSchema[3] = SchemaType.BYTES;
    _valueSchema[4] = SchemaType.BYTES;

    return SchemaLib.encode(_valueSchema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "tableId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "fieldLayout";
    fieldNames[1] = "keySchema";
    fieldNames[2] = "valueSchema";
    fieldNames[3] = "abiEncodedKeyNames";
    fieldNames[4] = "abiEncodedFieldNames";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get fieldLayout */
  function getFieldLayout(bytes32 tableId) internal view returns (bytes32 fieldLayout) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get fieldLayout */
  function _getFieldLayout(bytes32 tableId) internal view returns (bytes32 fieldLayout) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get fieldLayout (using the specified store) */
  function getFieldLayout(IStore _store, bytes32 tableId) internal view returns (bytes32 fieldLayout) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Set fieldLayout */
  function setFieldLayout(bytes32 tableId, bytes32 fieldLayout) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLayout)), _fieldLayout);
  }

  /** Set fieldLayout */
  function _setFieldLayout(bytes32 tableId, bytes32 fieldLayout) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLayout)), _fieldLayout);
  }

  /** Set fieldLayout (using the specified store) */
  function setFieldLayout(IStore _store, bytes32 tableId, bytes32 fieldLayout) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLayout)), _fieldLayout);
  }

  /** Get keySchema */
  function getKeySchema(bytes32 tableId) internal view returns (bytes32 keySchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get keySchema */
  function _getKeySchema(bytes32 tableId) internal view returns (bytes32 keySchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get keySchema (using the specified store) */
  function getKeySchema(IStore _store, bytes32 tableId) internal view returns (bytes32 keySchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Set keySchema */
  function setKeySchema(bytes32 tableId, bytes32 keySchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((keySchema)), _fieldLayout);
  }

  /** Set keySchema */
  function _setKeySchema(bytes32 tableId, bytes32 keySchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setField(_tableId, _keyTuple, 1, abi.encodePacked((keySchema)), _fieldLayout);
  }

  /** Set keySchema (using the specified store) */
  function setKeySchema(IStore _store, bytes32 tableId, bytes32 keySchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((keySchema)), _fieldLayout);
  }

  /** Get valueSchema */
  function getValueSchema(bytes32 tableId) internal view returns (bytes32 valueSchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get valueSchema */
  function _getValueSchema(bytes32 tableId) internal view returns (bytes32 valueSchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Get valueSchema (using the specified store) */
  function getValueSchema(IStore _store, bytes32 tableId) internal view returns (bytes32 valueSchema) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /** Set valueSchema */
  function setValueSchema(bytes32 tableId, bytes32 valueSchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((valueSchema)), _fieldLayout);
  }

  /** Set valueSchema */
  function _setValueSchema(bytes32 tableId, bytes32 valueSchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setField(_tableId, _keyTuple, 2, abi.encodePacked((valueSchema)), _fieldLayout);
  }

  /** Set valueSchema (using the specified store) */
  function setValueSchema(IStore _store, bytes32 tableId, bytes32 valueSchema) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((valueSchema)), _fieldLayout);
  }

  /** Get abiEncodedKeyNames */
  function getAbiEncodedKeyNames(bytes32 tableId) internal view returns (bytes memory abiEncodedKeyNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /** Get abiEncodedKeyNames */
  function _getAbiEncodedKeyNames(bytes32 tableId) internal view returns (bytes memory abiEncodedKeyNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /** Get abiEncodedKeyNames (using the specified store) */
  function getAbiEncodedKeyNames(
    IStore _store,
    bytes32 tableId
  ) internal view returns (bytes memory abiEncodedKeyNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /** Set abiEncodedKeyNames */
  function setAbiEncodedKeyNames(bytes32 tableId, bytes memory abiEncodedKeyNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((abiEncodedKeyNames)), _fieldLayout);
  }

  /** Set abiEncodedKeyNames */
  function _setAbiEncodedKeyNames(bytes32 tableId, bytes memory abiEncodedKeyNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setField(_tableId, _keyTuple, 3, bytes((abiEncodedKeyNames)), _fieldLayout);
  }

  /** Set abiEncodedKeyNames (using the specified store) */
  function setAbiEncodedKeyNames(IStore _store, bytes32 tableId, bytes memory abiEncodedKeyNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 3, bytes((abiEncodedKeyNames)), _fieldLayout);
  }

  /** Get the length of abiEncodedKeyNames */
  function lengthAbiEncodedKeyNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of abiEncodedKeyNames */
  function _lengthAbiEncodedKeyNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of abiEncodedKeyNames (using the specified store) */
  function lengthAbiEncodedKeyNames(IStore _store, bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of abiEncodedKeyNames
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAbiEncodedKeyNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        _fieldLayout,
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of abiEncodedKeyNames
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemAbiEncodedKeyNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(_tableId, _keyTuple, 3, _fieldLayout, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of abiEncodedKeyNames (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAbiEncodedKeyNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, _fieldLayout, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to abiEncodedKeyNames */
  function pushAbiEncodedKeyNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)), _fieldLayout);
  }

  /** Push a slice to abiEncodedKeyNames */
  function _pushAbiEncodedKeyNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.pushToField(_tableId, _keyTuple, 3, bytes((_slice)), _fieldLayout);
  }

  /** Push a slice to abiEncodedKeyNames (using the specified store) */
  function pushAbiEncodedKeyNames(IStore _store, bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)), _fieldLayout);
  }

  /** Pop a slice from abiEncodedKeyNames */
  function popAbiEncodedKeyNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1, _fieldLayout);
  }

  /** Pop a slice from abiEncodedKeyNames */
  function _popAbiEncodedKeyNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.popFromField(_tableId, _keyTuple, 3, 1, _fieldLayout);
  }

  /** Pop a slice from abiEncodedKeyNames (using the specified store) */
  function popAbiEncodedKeyNames(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.popFromField(_tableId, _keyTuple, 3, 1, _fieldLayout);
  }

  /**
   * Update a slice of abiEncodedKeyNames at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAbiEncodedKeyNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /**
   * Update a slice of abiEncodedKeyNames at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateAbiEncodedKeyNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /**
   * Update a slice of abiEncodedKeyNames (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAbiEncodedKeyNames(IStore _store, bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /** Get abiEncodedFieldNames */
  function getAbiEncodedFieldNames(bytes32 tableId) internal view returns (bytes memory abiEncodedFieldNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Get abiEncodedFieldNames */
  function _getAbiEncodedFieldNames(bytes32 tableId) internal view returns (bytes memory abiEncodedFieldNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Get abiEncodedFieldNames (using the specified store) */
  function getAbiEncodedFieldNames(
    IStore _store,
    bytes32 tableId
  ) internal view returns (bytes memory abiEncodedFieldNames) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Set abiEncodedFieldNames */
  function setAbiEncodedFieldNames(bytes32 tableId, bytes memory abiEncodedFieldNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((abiEncodedFieldNames)), _fieldLayout);
  }

  /** Set abiEncodedFieldNames */
  function _setAbiEncodedFieldNames(bytes32 tableId, bytes memory abiEncodedFieldNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setField(_tableId, _keyTuple, 4, bytes((abiEncodedFieldNames)), _fieldLayout);
  }

  /** Set abiEncodedFieldNames (using the specified store) */
  function setAbiEncodedFieldNames(IStore _store, bytes32 tableId, bytes memory abiEncodedFieldNames) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setField(_tableId, _keyTuple, 4, bytes((abiEncodedFieldNames)), _fieldLayout);
  }

  /** Get the length of abiEncodedFieldNames */
  function lengthAbiEncodedFieldNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of abiEncodedFieldNames */
  function _lengthAbiEncodedFieldNames(bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 4, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of abiEncodedFieldNames (using the specified store) */
  function lengthAbiEncodedFieldNames(IStore _store, bytes32 tableId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, _fieldLayout);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of abiEncodedFieldNames
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAbiEncodedFieldNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        4,
        _fieldLayout,
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of abiEncodedFieldNames
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemAbiEncodedFieldNames(bytes32 tableId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(_tableId, _keyTuple, 4, _fieldLayout, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of abiEncodedFieldNames (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAbiEncodedFieldNames(
    IStore _store,
    bytes32 tableId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, _fieldLayout, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to abiEncodedFieldNames */
  function pushAbiEncodedFieldNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)), _fieldLayout);
  }

  /** Push a slice to abiEncodedFieldNames */
  function _pushAbiEncodedFieldNames(bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.pushToField(_tableId, _keyTuple, 4, bytes((_slice)), _fieldLayout);
  }

  /** Push a slice to abiEncodedFieldNames (using the specified store) */
  function pushAbiEncodedFieldNames(IStore _store, bytes32 tableId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)), _fieldLayout);
  }

  /** Pop a slice from abiEncodedFieldNames */
  function popAbiEncodedFieldNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1, _fieldLayout);
  }

  /** Pop a slice from abiEncodedFieldNames */
  function _popAbiEncodedFieldNames(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.popFromField(_tableId, _keyTuple, 4, 1, _fieldLayout);
  }

  /** Pop a slice from abiEncodedFieldNames (using the specified store) */
  function popAbiEncodedFieldNames(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.popFromField(_tableId, _keyTuple, 4, 1, _fieldLayout);
  }

  /**
   * Update a slice of abiEncodedFieldNames at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAbiEncodedFieldNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /**
   * Update a slice of abiEncodedFieldNames at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateAbiEncodedFieldNames(bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /**
   * Update a slice of abiEncodedFieldNames (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAbiEncodedFieldNames(IStore _store, bytes32 tableId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)), _fieldLayout);
    }
  }

  /** Get the full data */
  function get(bytes32 tableId) internal view returns (TablesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Get the full data */
  function _get(bytes32 tableId) internal view returns (TablesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = StoreCore.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 tableId) internal view returns (TablesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 tableId,
    bytes32 fieldLayout,
    bytes32 keySchema,
    bytes32 valueSchema,
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal {
    bytes memory _staticData = encodeStatic(fieldLayout, keySchema, valueSchema);

    PackedCounter _encodedLengths = encodeLengths(abiEncodedKeyNames, abiEncodedFieldNames);
    bytes memory _dynamicData = encodeDynamic(abiEncodedKeyNames, abiEncodedFieldNames);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using individual values */
  function _set(
    bytes32 tableId,
    bytes32 fieldLayout,
    bytes32 keySchema,
    bytes32 valueSchema,
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal {
    bytes memory _staticData = encodeStatic(fieldLayout, keySchema, valueSchema);

    PackedCounter _encodedLengths = encodeLengths(abiEncodedKeyNames, abiEncodedFieldNames);
    bytes memory _dynamicData = encodeDynamic(abiEncodedKeyNames, abiEncodedFieldNames);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 tableId,
    bytes32 fieldLayout,
    bytes32 keySchema,
    bytes32 valueSchema,
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal {
    bytes memory _staticData = encodeStatic(fieldLayout, keySchema, valueSchema);

    PackedCounter _encodedLengths = encodeLengths(abiEncodedKeyNames, abiEncodedFieldNames);
    bytes memory _dynamicData = encodeDynamic(abiEncodedKeyNames, abiEncodedFieldNames);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using the data struct */
  function set(bytes32 tableId, TablesData memory _table) internal {
    set(
      tableId,
      _table.fieldLayout,
      _table.keySchema,
      _table.valueSchema,
      _table.abiEncodedKeyNames,
      _table.abiEncodedFieldNames
    );
  }

  /** Set the full data using the data struct */
  function _set(bytes32 tableId, TablesData memory _table) internal {
    set(
      tableId,
      _table.fieldLayout,
      _table.keySchema,
      _table.valueSchema,
      _table.abiEncodedKeyNames,
      _table.abiEncodedFieldNames
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 tableId, TablesData memory _table) internal {
    set(
      _store,
      tableId,
      _table.fieldLayout,
      _table.keySchema,
      _table.valueSchema,
      _table.abiEncodedKeyNames,
      _table.abiEncodedFieldNames
    );
  }

  /**
   * Decode the tightly packed blob using this table's field layout.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (TablesData memory _table) {
    // 96 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 96));

    _table.fieldLayout = (Bytes.slice32(_blob, 0));

    _table.keySchema = (Bytes.slice32(_blob, 32));

    _table.valueSchema = (Bytes.slice32(_blob, 64));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 96) {
      // skip static data length + dynamic lengths word
      uint256 _start = 128;
      uint256 _end;
      unchecked {
        _end = 128 + _encodedLengths.atIndex(0);
      }
      _table.abiEncodedKeyNames = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(1);
      }
      _table.abiEncodedFieldNames = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack static data using this table's schema */
  function encodeStatic(
    bytes32 fieldLayout,
    bytes32 keySchema,
    bytes32 valueSchema
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(fieldLayout, keySchema, valueSchema);
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeLengths(
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(abiEncodedKeyNames).length, bytes(abiEncodedFieldNames).length);
    }
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeDynamic(
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((abiEncodedKeyNames)), bytes((abiEncodedFieldNames)));
  }

  /** Tightly pack full data using this table's field layout */
  function encode(
    bytes32 fieldLayout,
    bytes32 keySchema,
    bytes32 valueSchema,
    bytes memory abiEncodedKeyNames,
    bytes memory abiEncodedFieldNames
  ) internal pure returns (bytes memory) {
    bytes memory _staticData = encodeStatic(fieldLayout, keySchema, valueSchema);

    PackedCounter _encodedLengths = encodeLengths(abiEncodedKeyNames, abiEncodedFieldNames);
    bytes memory _dynamicData = encodeDynamic(abiEncodedKeyNames, abiEncodedFieldNames);

    return abi.encodePacked(_staticData, _encodedLengths, _dynamicData);
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(bytes32 tableId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /* Delete all data for given keys */
  function _deleteRecord(bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 tableId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = tableId;

    _store.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }
}
