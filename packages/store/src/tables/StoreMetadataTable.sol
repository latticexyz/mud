// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { Slice, SliceLib } from "../Slice.sol";
import { PackedCounter, PackedCounterLib } from "../PackedCounter.sol";

// -- User defined schema --

uint256 constant StoreMetadataId = uint256(keccak256("mud.store.table.storeMetadata"));

struct StoreMetadata {
  string tableName;
  bytes abiEncodedFieldNames;
}

// -- Autogenerated library --
// TODO: autogenerate

library StoreMetadataTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema schema) {
    schema = SchemaLib.encode(SchemaType.STRING, SchemaType.BYTES);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(StoreMetadataId, getSchema());
  }

  function registerSchema(IStore store) internal {
    store.registerSchema(StoreMetadataId, getSchema());
  }

  /** Set the table's data */
  function set(
    uint256 tableId,
    string memory tableName,
    string[] memory fieldNames
  ) internal {
    bytes memory abiEncodedFieldNames = abi.encode(fieldNames);
    PackedCounter lengths = PackedCounterLib.pack(uint16(bytes(tableName).length), uint16(abiEncodedFieldNames.length));
    bytes memory data = abi.encodePacked(lengths.unwrap(), tableName, abiEncodedFieldNames);
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = bytes32(tableId);
    StoreSwitch.setRecord(StoreMetadataId, keyTuple, data);
  }

  /** Get the table's data */
  function get(uint256 tableId) internal view returns (StoreMetadata memory data) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = bytes32(tableId);
    bytes memory blob = StoreSwitch.getRecord(StoreMetadataId, keyTuple);
    return decode(blob);
  }

  function get(IStore store, uint256 tableId) internal view returns (StoreMetadata memory data) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = bytes32(tableId);
    bytes memory blob = store.getRecord(StoreMetadataId, keyTuple);
    return decode(blob);
  }

  function decode(bytes memory blob) internal view returns (StoreMetadata memory data) {
    PackedCounter lengths = PackedCounter.wrap((bytes32(blob)));
    return
      StoreMetadata({
        tableName: string(SliceLib.getSubslice(blob, 32, 32 + lengths.atIndex(0)).toBytes()),
        abiEncodedFieldNames: SliceLib
          .getSubslice(blob, 32 + lengths.atIndex(0), 32 + lengths.atIndex(0) + lengths.atIndex(1))
          .toBytes()
      });
  }
}
