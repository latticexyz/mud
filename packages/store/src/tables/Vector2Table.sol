// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { Vector2, Vector2_ } from "../schemas/Vector2.sol";

// -- User defined tableId --

bytes32 constant tableId = keccak256("mud.store.table.vector2");

// -- Autogenerated library --
// TODO: autogenerate

library Vector2Table {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema schema) {
    return Vector2_.getSchema();
  }

  /** Register the table's schema */
  function registerSchema() internal {
    Vector2_.registerSchema(tableId);
  }

  function registerSchema(IStore store) internal {
    Vector2_.registerSchema(tableId, store);
  }

  /** Set the table's data */
  function set(
    bytes32 key,
    uint32 x,
    uint32 y
  ) internal {
    Vector2_.set(tableId, key, x, y);
  }

  function set(bytes32 key, Vector2 memory vec2) internal {
    Vector2_.set(tableId, key, vec2);
  }

  function setX(bytes32 key, uint32 x) internal {
    Vector2_.setX(tableId, key, x);
  }

  function setY(bytes32 key, uint32 y) internal {
    Vector2_.setY(tableId, key, y);
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (Vector2 memory vec2) {
    return Vector2_.get(tableId, key);
  }

  function get(IStore store, bytes32 key) internal view returns (Vector2 memory vec2) {
    return Vector2_.get(tableId, store, key);
  }

  function decode(bytes memory blob) internal pure returns (Vector2 memory vec2) {
    return Vector2({ x: uint32(Bytes.slice4(blob, 0)), y: uint32(Bytes.slice4(blob, 4)) });
  }
}
