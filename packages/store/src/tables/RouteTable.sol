// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { Route, Route_ } from "../schemas/Route.sol";

// -- User defined tableId --

bytes32 constant tableId = keccak256("mud.store.table.route");

// -- Autogenerated library --
// TODO: autogenerate

library RouteTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema schema) {
    return Route_.getSchema();
  }

  /** Register the table's schema */
  function registerSchema() internal {
    Route_.registerSchema(tableId);
  }

  function registerSchema(IStore store) internal {
    Route_.registerSchema(tableId, store);
  }

  /** Set the table's data */
  function set(
    bytes32 key,
    address addr,
    bytes4 selector,
    uint8 executionMode
  ) internal {
    Route_.set(tableId, key, addr, selector, executionMode);
  }

  function set(bytes32 key, Route memory data) internal {
    Route_.set(tableId, key, data);
  }

  function setAddress(bytes32 key, address addr) internal {
    Route_.setAddress(tableId, key, addr);
  }

  function setSelector(bytes32 key, bytes4 selector) internal {
    Route_.setSelector(tableId, key, selector);
  }

  function setExecutionMode(bytes32 key, uint8 executionMode) internal {
    Route_.setExecutionMode(tableId, key, executionMode);
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (Route memory data) {
    return Route_.get(tableId, key);
  }

  function get(IStore store, bytes32 key) internal view returns (Route memory data) {
    return Route_.get(tableId, store, key);
  }
}
