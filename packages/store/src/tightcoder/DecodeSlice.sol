// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */
import { TightCoder } from "./TightCoder.sol";
import { Slice } from "../Slice.sol";

/**
 * @title DecodeSlice Library
 * @notice A library for decoding slices of data into specific data types.
 * @dev This library provides functions for decoding slices into arrays of basic uint types.
 */
library DecodeSlice {
  /**
   * @notice Decodes a slice into an array of uint8.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint8.
   */
  function decodeArray_uint8(Slice _input) internal pure returns (uint8[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint16.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint16.
   */
  function decodeArray_uint16(Slice _input) internal pure returns (uint16[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 240);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint24.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint24.
   */
  function decodeArray_uint24(Slice _input) internal pure returns (uint24[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 232);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint32.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint32.
   */
  function decodeArray_uint32(Slice _input) internal pure returns (uint32[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 224);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint40.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint40.
   */
  function decodeArray_uint40(Slice _input) internal pure returns (uint40[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 216);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint48.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint48.
   */
  function decodeArray_uint48(Slice _input) internal pure returns (uint48[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 208);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint56.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint56.
   */
  function decodeArray_uint56(Slice _input) internal pure returns (uint56[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 200);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint64.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint64.
   */
  function decodeArray_uint64(Slice _input) internal pure returns (uint64[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 192);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint72.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint72.
   */
  function decodeArray_uint72(Slice _input) internal pure returns (uint72[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 184);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint80.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint80.
   */
  function decodeArray_uint80(Slice _input) internal pure returns (uint80[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 176);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint88.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint88.
   */
  function decodeArray_uint88(Slice _input) internal pure returns (uint88[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 168);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint96.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint96.
   */
  function decodeArray_uint96(Slice _input) internal pure returns (uint96[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 160);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint104.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint104.
   */
  function decodeArray_uint104(Slice _input) internal pure returns (uint104[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 152);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint112.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint112.
   */
  function decodeArray_uint112(Slice _input) internal pure returns (uint112[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 144);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint120.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint120.
   */
  function decodeArray_uint120(Slice _input) internal pure returns (uint120[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 136);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint128.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint128.
   */
  function decodeArray_uint128(Slice _input) internal pure returns (uint128[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 128);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint136.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint136.
   */
  function decodeArray_uint136(Slice _input) internal pure returns (uint136[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 120);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint144.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint144.
   */
  function decodeArray_uint144(Slice _input) internal pure returns (uint144[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 112);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint152.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint152.
   */
  function decodeArray_uint152(Slice _input) internal pure returns (uint152[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 104);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint160.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint160.
   */
  function decodeArray_uint160(Slice _input) internal pure returns (uint160[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint168.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint168.
   */
  function decodeArray_uint168(Slice _input) internal pure returns (uint168[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 88);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint176.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint176.
   */
  function decodeArray_uint176(Slice _input) internal pure returns (uint176[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 80);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint184.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint184.
   */
  function decodeArray_uint184(Slice _input) internal pure returns (uint184[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 72);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint192.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint192.
   */
  function decodeArray_uint192(Slice _input) internal pure returns (uint192[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 64);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint200.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint200.
   */
  function decodeArray_uint200(Slice _input) internal pure returns (uint200[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 56);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint208.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint208.
   */
  function decodeArray_uint208(Slice _input) internal pure returns (uint208[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 48);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint216.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint216.
   */
  function decodeArray_uint216(Slice _input) internal pure returns (uint216[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 40);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint224.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint224.
   */
  function decodeArray_uint224(Slice _input) internal pure returns (uint224[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 32);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint232.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint232.
   */
  function decodeArray_uint232(Slice _input) internal pure returns (uint232[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 24);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint240.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint240.
   */
  function decodeArray_uint240(Slice _input) internal pure returns (uint240[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 16);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint248.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint248.
   */
  function decodeArray_uint248(Slice _input) internal pure returns (uint248[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 8);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of uint256.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of uint256.
   */
  function decodeArray_uint256(Slice _input) internal pure returns (uint256[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int8.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int8.
   */
  function decodeArray_int8(Slice _input) internal pure returns (int8[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int16.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int16.
   */
  function decodeArray_int16(Slice _input) internal pure returns (int16[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 240);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int24.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int24.
   */
  function decodeArray_int24(Slice _input) internal pure returns (int24[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 232);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int32.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int32.
   */
  function decodeArray_int32(Slice _input) internal pure returns (int32[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 224);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int40.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int40.
   */
  function decodeArray_int40(Slice _input) internal pure returns (int40[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 216);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int48.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int48.
   */
  function decodeArray_int48(Slice _input) internal pure returns (int48[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 208);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int56.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int56.
   */
  function decodeArray_int56(Slice _input) internal pure returns (int56[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 200);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int64.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int64.
   */
  function decodeArray_int64(Slice _input) internal pure returns (int64[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 192);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int72.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int72.
   */
  function decodeArray_int72(Slice _input) internal pure returns (int72[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 184);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int80.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int80.
   */
  function decodeArray_int80(Slice _input) internal pure returns (int80[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 176);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int88.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int88.
   */
  function decodeArray_int88(Slice _input) internal pure returns (int88[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 168);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int96.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int96.
   */
  function decodeArray_int96(Slice _input) internal pure returns (int96[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 160);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int104.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int104.
   */
  function decodeArray_int104(Slice _input) internal pure returns (int104[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 152);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int112.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int112.
   */
  function decodeArray_int112(Slice _input) internal pure returns (int112[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 144);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int120.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int120.
   */
  function decodeArray_int120(Slice _input) internal pure returns (int120[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 136);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int128.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int128.
   */
  function decodeArray_int128(Slice _input) internal pure returns (int128[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 128);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int136.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int136.
   */
  function decodeArray_int136(Slice _input) internal pure returns (int136[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 120);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int144.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int144.
   */
  function decodeArray_int144(Slice _input) internal pure returns (int144[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 112);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int152.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int152.
   */
  function decodeArray_int152(Slice _input) internal pure returns (int152[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 104);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int160.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int160.
   */
  function decodeArray_int160(Slice _input) internal pure returns (int160[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int168.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int168.
   */
  function decodeArray_int168(Slice _input) internal pure returns (int168[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 88);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int176.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int176.
   */
  function decodeArray_int176(Slice _input) internal pure returns (int176[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 80);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int184.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int184.
   */
  function decodeArray_int184(Slice _input) internal pure returns (int184[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 72);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int192.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int192.
   */
  function decodeArray_int192(Slice _input) internal pure returns (int192[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 64);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int200.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int200.
   */
  function decodeArray_int200(Slice _input) internal pure returns (int200[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 56);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int208.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int208.
   */
  function decodeArray_int208(Slice _input) internal pure returns (int208[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 48);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int216.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int216.
   */
  function decodeArray_int216(Slice _input) internal pure returns (int216[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 40);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int224.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int224.
   */
  function decodeArray_int224(Slice _input) internal pure returns (int224[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 32);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int232.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int232.
   */
  function decodeArray_int232(Slice _input) internal pure returns (int232[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 24);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int240.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int240.
   */
  function decodeArray_int240(Slice _input) internal pure returns (int240[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 16);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int248.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int248.
   */
  function decodeArray_int248(Slice _input) internal pure returns (int248[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 8);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of int256.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of int256.
   */
  function decodeArray_int256(Slice _input) internal pure returns (int256[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes1.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes1.
   */
  function decodeArray_bytes1(Slice _input) internal pure returns (bytes1[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes2.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes2.
   */
  function decodeArray_bytes2(Slice _input) internal pure returns (bytes2[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes3.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes3.
   */
  function decodeArray_bytes3(Slice _input) internal pure returns (bytes3[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes4.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes4.
   */
  function decodeArray_bytes4(Slice _input) internal pure returns (bytes4[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes5.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes5.
   */
  function decodeArray_bytes5(Slice _input) internal pure returns (bytes5[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes6.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes6.
   */
  function decodeArray_bytes6(Slice _input) internal pure returns (bytes6[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes7.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes7.
   */
  function decodeArray_bytes7(Slice _input) internal pure returns (bytes7[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes8.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes8.
   */
  function decodeArray_bytes8(Slice _input) internal pure returns (bytes8[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes9.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes9.
   */
  function decodeArray_bytes9(Slice _input) internal pure returns (bytes9[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes10.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes10.
   */
  function decodeArray_bytes10(Slice _input) internal pure returns (bytes10[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes11.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes11.
   */
  function decodeArray_bytes11(Slice _input) internal pure returns (bytes11[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes12.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes12.
   */
  function decodeArray_bytes12(Slice _input) internal pure returns (bytes12[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes13.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes13.
   */
  function decodeArray_bytes13(Slice _input) internal pure returns (bytes13[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes14.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes14.
   */
  function decodeArray_bytes14(Slice _input) internal pure returns (bytes14[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes15.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes15.
   */
  function decodeArray_bytes15(Slice _input) internal pure returns (bytes15[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes16.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes16.
   */
  function decodeArray_bytes16(Slice _input) internal pure returns (bytes16[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes17.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes17.
   */
  function decodeArray_bytes17(Slice _input) internal pure returns (bytes17[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes18.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes18.
   */
  function decodeArray_bytes18(Slice _input) internal pure returns (bytes18[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes19.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes19.
   */
  function decodeArray_bytes19(Slice _input) internal pure returns (bytes19[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes20.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes20.
   */
  function decodeArray_bytes20(Slice _input) internal pure returns (bytes20[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes21.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes21.
   */
  function decodeArray_bytes21(Slice _input) internal pure returns (bytes21[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes22.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes22.
   */
  function decodeArray_bytes22(Slice _input) internal pure returns (bytes22[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes23.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes23.
   */
  function decodeArray_bytes23(Slice _input) internal pure returns (bytes23[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes24.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes24.
   */
  function decodeArray_bytes24(Slice _input) internal pure returns (bytes24[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes25.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes25.
   */
  function decodeArray_bytes25(Slice _input) internal pure returns (bytes25[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes26.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes26.
   */
  function decodeArray_bytes26(Slice _input) internal pure returns (bytes26[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes27.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes27.
   */
  function decodeArray_bytes27(Slice _input) internal pure returns (bytes27[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes28.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes28.
   */
  function decodeArray_bytes28(Slice _input) internal pure returns (bytes28[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes29.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes29.
   */
  function decodeArray_bytes29(Slice _input) internal pure returns (bytes29[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes30.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes30.
   */
  function decodeArray_bytes30(Slice _input) internal pure returns (bytes30[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes31.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes31.
   */
  function decodeArray_bytes31(Slice _input) internal pure returns (bytes31[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bytes32.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bytes32.
   */
  function decodeArray_bytes32(Slice _input) internal pure returns (bytes32[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of bool.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of bool.
   */
  function decodeArray_bool(Slice _input) internal pure returns (bool[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);
    assembly {
      _output := _genericArray
    }
  }

  /**
   * @notice Decodes a slice into an array of address.
   * @dev Uses TightCoder for initial decoding, and then assembly for memory conversion.
   * @param _input The slice to decode.
   * @return _output The decoded array of address.
   */
  function decodeArray_address(Slice _input) internal pure returns (address[] memory _output) {
    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);
    assembly {
      _output := _genericArray
    }
  }
}
