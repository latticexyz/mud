// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated via `pnpm codegen`. Do not edit the `.sol` file manually. */

import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";
import { TightCoder } from "./TightCoder.sol";

library EncodeArray {
  /************************************************************************
   *
   *    uint8 - uint256
   *
   ************************************************************************/
<% for (let i = 8; i <= 256; i += 8) { -%>

  function encode(uint<%= i %>[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, <%= i / 8 %>, false);
  }
<% } -%>

  /************************************************************************
   *
   *    int8 - int256
   *
   ************************************************************************/
<% for (let i = 8; i <= 256; i += 8) { -%>

  function encode(int<%= i %>[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, <%= i / 8 %>, false);
  }
<% } -%>

  /************************************************************************
   *
   *    bytes1 - bytes32
   *
   ************************************************************************/
<% for (let i = 1; i <= 32; i += 1) { -%>

  function encode(bytes<%= i %>[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, <%= i %>, true);
  }
<% } -%>

  /************************************************************************
   *
   *    Other types
   *
   ************************************************************************/

  function encode(address[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, 20, false);
  }

  function encode(bool[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, 1, false);
  }

  function encode(SchemaType[] memory input) internal pure returns (bytes memory output) {
    bytes32[] memory _genericArray;
    assembly {
      _genericArray := input
    }
    return TightCoder.encode(_genericArray, 1, false);
  }

  /**
   * Converts a `bytes` memory array to a single `bytes` memory value.
   * TODO: optimize gas cost
   */
  function encode(bytes[] memory input) internal pure returns (bytes memory output) {
    output = new bytes(0);
    for (uint256 i; i < input.length; i++) {
      output = bytes.concat(output, input[i]);
    }
  }
}
