{
    "ts/config/v2/table.test.ts": [
        {
            "location": {
                "start": {
                    "line": 15,
                    "char": 5
                },
                "end": {
                    "line": 15,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"bytes32\"; readonly value: \"address\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 27,
                    "char": 5
                },
                "end": {
                    "line": 27,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"CustomType\"; }, { CustomType: \"uint256\"; }, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"bytes32\"; readonly value: \"CustomType\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 32,
                    "char": 5
                },
                "end": {
                    "line": 32,
                    "char": 56
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ [key: string]: AbiType; }, UserTypes, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [...]> | ... 5 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotAnAbiType\"' is not assignable to parameter of type 'TableShorthandConfigInput<UserTypes>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 39,
                    "char": 5
                },
                "end": {
                    "line": 39,
                    "char": 85
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"string\"; }, { CustomType: \"uint256\"; }, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"bytes\"; }, { CustomType: \"uint256\"; }, [...]> | ... 6 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotACustomType\"' is not assignable to parameter of type 'TableShorthandConfigInput<{ CustomType: \"uint256\"; }>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 54,
                    "char": 5
                },
                "end": {
                    "line": 54,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"address\"; name: \"string\"; age: \"uint256\"; }, UserTypes, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"address\"; readonly name: \"string\"; readonly age: \"uint256\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 59,
                    "char": 5
                },
                "end": {
                    "line": 59,
                    "char": 76
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 66,
                    "char": 5
                },
                "end": {
                    "line": 66,
                    "char": 91
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 73,
                    "char": 5
                },
                "end": {
                    "line": 73,
                    "char": 84
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ [key: string]: AbiType; }, UserTypes, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [...]> | ... 5 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"NotACustomType\"' is not assignable to type 'AbiType'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 87,
                    "char": 5
                },
                "end": {
                    "line": 87,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }, { CustomType: \"uint256\"; }, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"CustomType\"; readonly name: \"string\"; readonly age: \"uint256\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 91,
                    "char": 5
                },
                "end": {
                    "line": 94,
                    "char": 6
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {
                "bytes": [
                    "bytes32"
                ]
            }
        },
        {
            "location": {
                "start": {
                    "line": 126,
                    "char": 5
                },
                "end": {
                    "line": 126,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]>, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"bytes32\"; readonly internalType: \"bytes32\"; }; readonly value: { readonly type: \"address\"; readonly internalType: \"address\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly keys: readonly [...]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 156,
                    "char": 5
                },
                "end": {
                    "line": 156,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"bytes32\"; value: \"CustomType\"; }, { CustomType: \"address\"; }, [\"key\"]>, { CustomType: \"address\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"bytes32\"; readonly internalType: \"bytes32\"; }; readonly value: { readonly type: \"address\"; readonly internalType: \"CustomType\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly keys: readonly [...]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 194,
                    "char": 5
                },
                "end": {
                    "line": 194,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"address\"; name: \"string\"; age: \"uint256\"; }, UserTypes, [\"key\"]>, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 232,
                    "char": 5
                },
                "end": {
                    "line": 232,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }, { CustomType: \"uint256\"; }, [\"key\"]>, { CustomType: \"uint256\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ schema: { key: { type: string; internalType: string; }; name: { type: string; internalType: string; }; age: { type: string; internalType: string; }; }; keySchema: { key: { type: string; internalType: string; }; }; valueSchema: { ...; }; keys: string[]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 237,
                    "char": 5
                },
                "end": {
                    "line": 237,
                    "char": 82
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 244,
                    "char": 5
                },
                "end": {
                    "line": 244,
                    "char": 80
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 251,
                    "char": 5
                },
                "end": {
                    "line": 251,
                    "char": 47
                }
            },
            "args": [
                {
                    "type": "\"error 1\"",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotAnAbiType\"' is not assignable to parameter of type 'TableConfigInput<{ [key: string]: AbiType; }, UserTypes, ValidKeys<{ [key: string]: AbiType; }, UserTypes>>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 258,
                    "char": 5
                },
                "end": {
                    "line": 258,
                    "char": 67
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 283,
                    "char": 5
                },
                "end": {
                    "line": 283,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"age\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 306,
                    "char": 5
                },
                "end": {
                    "line": 306,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"age\", \"key\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 347,
                    "char": 5
                },
                "end": {
                    "line": 347,
                    "char": 35
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"address\"; name: \"CustomString\"; age: \"CustomNumber\"; }, { CustomString: \"string\"; CustomNumber: \"uint256\"; }, [\"key\"]>, { CustomString: \"string\"; CustomNumber: \"uint256\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ schema: { key: { type: string; internalType: string; }; name: { type: string; internalType: string; }; age: { type: string; internalType: string; }; }; keySchema: { key: { type: string; internalType: string; }; }; valueSchema: { ...; }; keys: string[]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 353,
                    "char": 5
                },
                "end": {
                    "line": 359,
                    "char": 6
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"name\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"name\"' is not assignable to type '\"key\" | \"age\"'."
            ],
            "completions": {}
        }
    ]
}
