{
    "ts/config/v2/store.test.ts": [
        {
            "location": {
                "start": {
                    "line": 37,
                    "char": 5
                },
                "end": {
                    "line": 37,
                    "char": 36
                }
            },
            "args": [
                {
                    "type": "{ tables: { Name: resolveTableFullConfig<TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]>, UserTypes>; }; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly tables: { readonly Name: { readonly schema: { readonly key: { readonly type: \"bytes32\"; readonly internalType: \"bytes32\"; }; readonly value: { readonly type: \"address\"; readonly internalType: \"address\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly keys: readonly [...]; }; }...",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 79,
                    "char": 5
                },
                "end": {
                    "line": 79,
                    "char": 36
                }
            },
            "args": [
                {
                    "type": "{ tables: { Example: resolveTableFullConfig<TableFullConfigInput<{ key: \"address\"; name: \"string\"; age: \"uint256\"; }, UserTypes, [\"key\"]>, UserTypes>; }; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly tables: { readonly Example: { readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { ...; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly ke...",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 113,
                    "char": 5
                },
                "end": {
                    "line": 113,
                    "char": 19
                }
            },
            "args": [
                {
                    "type": "{ tables: { Example: resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [string]; }, UserTypes>; }; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [],
            "completions": {}
        }
    ],
    "ts/config/v2/table.test.ts": [
        {
            "location": {
                "start": {
                    "line": 7,
                    "char": 5
                },
                "end": {
                    "line": 7,
                    "char": 82
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 11,
                    "char": 5
                },
                "end": {
                    "line": 11,
                    "char": 114
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 15,
                    "char": 5
                },
                "end": {
                    "line": 15,
                    "char": 109
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 19,
                    "char": 5
                },
                "end": {
                    "line": 22,
                    "char": 16
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 26,
                    "char": 5
                },
                "end": {
                    "line": 29,
                    "char": 16
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"address\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 33,
                    "char": 5
                },
                "end": {
                    "line": 36,
                    "char": 16
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"bytes32\"; readonly value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"bytes32\"; value: \"CustomType\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 40,
                    "char": 5
                },
                "end": {
                    "line": 48,
                    "char": 70
                }
            },
            "args": [
                {
                    "type": "{ readonly key: \"CustomType\"; readonly name: \"string\"; readonly age: \"uint256\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 61,
                    "char": 7
                },
                "end": {
                    "line": 61,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"bytes32\"; readonly value: \"address\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 73,
                    "char": 7
                },
                "end": {
                    "line": 73,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"CustomType\"; }, { CustomType: \"uint256\"; }, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"bytes32\"; readonly value: \"CustomType\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 78,
                    "char": 7
                },
                "end": {
                    "line": 78,
                    "char": 58
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"string\"; }, UserTypes, [...]> | ... 5 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotAnAbiType\"' is not assignable to parameter of type 'TableShorthandConfigInput<UserTypes>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 85,
                    "char": 7
                },
                "end": {
                    "line": 85,
                    "char": 87
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"string\"; }, { CustomType: \"uint256\"; }, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"bytes\"; }, { CustomType: \"uint256\"; }, [...]> | ... 6 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotACustomType\"' is not assignable to parameter of type 'TableShorthandConfigInput<{ CustomType: \"uint256\"; }>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 100,
                    "char": 7
                },
                "end": {
                    "line": 100,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"address\"; name: \"string\"; age: \"uint256\"; }, UserTypes, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"address\"; readonly name: \"string\"; readonly age: \"uint256\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 105,
                    "char": 7
                },
                "end": {
                    "line": 105,
                    "char": 78
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 112,
                    "char": 7
                },
                "end": {
                    "line": 112,
                    "char": 93
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 119,
                    "char": 7
                },
                "end": {
                    "line": 119,
                    "char": 86
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]> | TableFullConfigInput<{ key: \"bytes32\"; value: \"string\"; }, UserTypes, [...]> | ... 5 more ... | TableFullConfigInput<...>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"NotACustomType\"' is not assignable to type 'AbiType'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 133,
                    "char": 7
                },
                "end": {
                    "line": 133,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "TableFullConfigInput<{ key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }, { CustomType: \"uint256\"; }, [\"key\"]>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: \"CustomType\"; readonly name: \"string\"; readonly age: \"uint256\"; }; readonly keys: readonly [\"key\"]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 137,
                    "char": 7
                },
                "end": {
                    "line": 140,
                    "char": 8
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {
                "bytes": [
                    "bytes32"
                ]
            }
        },
        {
            "location": {
                "start": {
                    "line": 172,
                    "char": 7
                },
                "end": {
                    "line": 172,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"bytes32\"; value: \"address\"; }, UserTypes, [\"key\"]>, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"bytes32\"; readonly internalType: \"bytes32\"; }; readonly value: { readonly type: \"address\"; readonly internalType: \"address\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly keys: readonly [...]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 202,
                    "char": 7
                },
                "end": {
                    "line": 202,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"bytes32\"; value: \"CustomType\"; }, { CustomType: \"address\"; }, [\"key\"]>, { CustomType: \"address\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"bytes32\"; readonly internalType: \"bytes32\"; }; readonly value: { readonly type: \"address\"; readonly internalType: \"CustomType\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...; }; readonly keys: readonly [...]; }",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 240,
                    "char": 7
                },
                "end": {
                    "line": 240,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"address\"; name: \"string\"; age: \"uint256\"; }, UserTypes, [\"key\"]>, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 281,
                    "char": 7
                },
                "end": {
                    "line": 281,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }, { CustomType: \"uint256\"; }, [\"key\"]>, { CustomType: \"uint256\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"uint256\"; readonly internalType: \"CustomType\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ...",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 286,
                    "char": 7
                },
                "end": {
                    "line": 286,
                    "char": 84
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 293,
                    "char": 7
                },
                "end": {
                    "line": 293,
                    "char": 82
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ key: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 300,
                    "char": 7
                },
                "end": {
                    "line": 300,
                    "char": 49
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '\"NotAnAbiType\"' is not assignable to parameter of type 'TableConfigInput<never, UserTypes, ValidKeys<never, UserTypes>>'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 307,
                    "char": 7
                },
                "end": {
                    "line": 307,
                    "char": 69
                }
            },
            "args": [
                {
                    "type": "never",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Argument of type '{ name: string; age: string; }' is not assignable to parameter of type '\"Provide a `key` field with static ABI type or a full config with explicit keys override. \"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 332,
                    "char": 7
                },
                "end": {
                    "line": 332,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"age\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 355,
                    "char": 7
                },
                "end": {
                    "line": 355,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"age\", \"key\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"string\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"uint256\"; }; }; readonly keySchema: { ...; }; readonly valueSchema: { ......",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 396,
                    "char": 7
                },
                "end": {
                    "line": 396,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"address\"; name: \"CustomString\"; age: \"CustomNumber\"; }, { CustomString: \"string\"; CustomNumber: \"uint256\"; }, [\"key\"]>, { CustomString: \"string\"; CustomNumber: \"uint256\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"address\"; readonly internalType: \"address\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"CustomString\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"CustomNumber\"; }; }; readonly keySchema: { ...; }; readonly valueSc...",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 437,
                    "char": 7
                },
                "end": {
                    "line": 437,
                    "char": 37
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<TableFullConfigInput<{ key: \"CustomNumber\"; name: \"CustomString\"; age: \"CustomNumber\"; }, { CustomString: \"string\"; CustomNumber: \"uint256\"; }, [\"key\"]>, { ...; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": [
                            "subtype"
                        ]
                    }
                }
            ],
            "typeArgs": [
                {
                    "type": "{ readonly schema: { readonly key: { readonly type: \"uint256\"; readonly internalType: \"CustomNumber\"; }; readonly name: { readonly type: \"string\"; readonly internalType: \"CustomString\"; }; readonly age: { readonly type: \"uint256\"; readonly internalType: \"CustomNumber\"; }; }; readonly keySchema: { ...; }; readonly va...",
                    "relationships": {
                        "args": [
                            "supertype"
                        ],
                        "typeArgs": [
                            "equality"
                        ]
                    }
                }
            ],
            "errors": [],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 441,
                    "char": 7
                },
                "end": {
                    "line": 447,
                    "char": 8
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"name\"]; }, UserTypes>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"name\"' is not assignable to type '\"key\" | \"age\"'."
            ],
            "completions": {}
        },
        {
            "location": {
                "start": {
                    "line": 451,
                    "char": 7
                },
                "end": {
                    "line": 460,
                    "char": 8
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"name\"]; }, { CustomType: \"string\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"name\"' is not assignable to type '\"key\" | \"age\"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 464,
                    "char": 7
                },
                "end": {
                    "line": 473,
                    "char": 8
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"CustomType\"; name: \"string\"; age: \"uint256\"; }; keys: [\"key\"]; }, { CustomType: \"string\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"key\"' is not assignable to type '\"age\"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        },
        {
            "location": {
                "start": {
                    "line": 477,
                    "char": 7
                },
                "end": {
                    "line": 486,
                    "char": 8
                }
            },
            "args": [
                {
                    "type": "resolveTableFullConfig<{ schema: { key: \"address\"; name: \"string\"; age: \"uint256\"; }; keys: [\"NotAKey\"]; }, { CustomType: \"string\"; }>",
                    "relationships": {
                        "args": [
                            "equality"
                        ],
                        "typeArgs": []
                    }
                }
            ],
            "typeArgs": [],
            "errors": [
                "Type '\"NotAKey\"' is not assignable to type '\"key\" | \"age\"'."
            ],
            "completions": "Encountered multiple completion candidates for string(s) 'string'. Assertions on the same prefix must be split into multiple attest calls so the results can be distinguished."
        }
    ]
}
