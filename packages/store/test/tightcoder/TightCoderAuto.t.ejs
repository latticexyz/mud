// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated via `pnpm codegen`. Do not edit the `.sol` file manually. */

import "forge-std/Test.sol";
import { Bytes } from "../../src/Bytes.sol";
import { EncodeArray } from "../../src/tightcoder/EncodeArray.sol";
import { SliceLib } from "../../src/Slice.sol";

contract TightCoderAutoTest is Test {
<% for (const prefix of ["uint", "int", "bytes"]) { -%>
<% const [start, end, step] = prefix === "bytes" ? [1, 32, 1] : [8, 256, 8]; -%>
<%= prefix === "uint" ? "" : "\n" -%>
  /************************************************************************
   *
   *    <%= prefix %><%= start %> - <%= prefix %><%= end %>
   *
   ************************************************************************/
<% for (let i = start; i <= end; i += step) { -%>
<% const T = `${prefix}${i}`; -%>

  function testEncodeDecodeArray_<%= `${prefix}${i}` %>(
    <%= T %> val0,
    <%= T %> val1,
    <%= T %> val2
  ) public {
    <%= T %>[] memory input = new <%= T %>[](3);
    input[0] = val0;
    input[1] = val1;
    input[2] = val2;

    bytes memory encoded = EncodeArray.encode(input);
    assertEq(encoded, abi.encodePacked(val0, val1, val2));

    <%= T %>[] memory decoded = SliceLib.fromBytes(encoded).decodeArray_<%= T %>();
    assertEq(decoded.length, 3);
    assertEq(decoded[0], val0);
    assertEq(decoded[1], val1);
    assertEq(decoded[2], val2);
  }
<% } -%>
<% } -%>
}
