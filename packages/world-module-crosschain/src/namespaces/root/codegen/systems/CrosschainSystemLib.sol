// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CrosschainSystem } from "../../CrosschainSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { Identifier } from "@contracts-bedrock/L2/interfaces/ICrossL2Inbox.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CrosschainSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "CrosschainSystem" }))
CrosschainSystemType constant crosschainSystem = CrosschainSystemType.wrap(
  0x7379000000000000000000000000000043726f7373636861696e53797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CrosschainSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CrosschainSystemLib {
  error CrosschainSystemLib_CallingFromRootSystem();
  error WrongWorld();
  error NotCrosschainRecord();
  error MoreRecentRecordExists();
  error RecordNotOwned();
  error RecordAlreadyExists();
  error RecordBridgedToADifferentChain();
  error InvalidRecordTimestamp();

  function create(CrosschainSystemType self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    return CallWrapper(self.toResourceId(), address(0)).create(tableId, keyTuple);
  }

  function remove(CrosschainSystemType self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    return CallWrapper(self.toResourceId(), address(0)).remove(tableId, keyTuple);
  }

  function bridge(
    CrosschainSystemType self,
    ResourceId tableId,
    bytes32[] memory keyTuple,
    uint256 targetChain
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).bridge(tableId, keyTuple, targetChain);
  }

  function crosschainRead(CrosschainSystemType self, ResourceId tableId, bytes32[] calldata keyTuple) internal {
    return CallWrapper(self.toResourceId(), address(0)).crosschainRead(tableId, keyTuple);
  }

  function crosschainWrite(
    CrosschainSystemType self,
    Identifier calldata identifier,
    bytes calldata _crosschainRead
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).crosschainWrite(identifier, _crosschainRead);
  }

  function create(CallWrapper memory self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrosschainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(CrosschainSystem.create, (tableId, keyTuple));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function remove(CallWrapper memory self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrosschainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(CrosschainSystem.remove, (tableId, keyTuple));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function bridge(
    CallWrapper memory self,
    ResourceId tableId,
    bytes32[] memory keyTuple,
    uint256 targetChain
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrosschainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(CrosschainSystem.bridge, (tableId, keyTuple, targetChain));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function crosschainRead(CallWrapper memory self, ResourceId tableId, bytes32[] calldata keyTuple) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrosschainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(CrosschainSystem.crosschainRead, (tableId, keyTuple));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function crosschainWrite(
    CallWrapper memory self,
    Identifier calldata identifier,
    bytes calldata _crosschainRead
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CrosschainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(CrosschainSystem.crosschainWrite, (identifier, _crosschainRead));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function create(RootCallWrapper memory self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    bytes memory systemCall = abi.encodeCall(CrosschainSystem.create, (tableId, keyTuple));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function remove(RootCallWrapper memory self, ResourceId tableId, bytes32[] memory keyTuple) internal {
    bytes memory systemCall = abi.encodeCall(CrosschainSystem.remove, (tableId, keyTuple));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function bridge(
    RootCallWrapper memory self,
    ResourceId tableId,
    bytes32[] memory keyTuple,
    uint256 targetChain
  ) internal {
    bytes memory systemCall = abi.encodeCall(CrosschainSystem.bridge, (tableId, keyTuple, targetChain));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function crosschainRead(RootCallWrapper memory self, ResourceId tableId, bytes32[] calldata keyTuple) internal {
    bytes memory systemCall = abi.encodeCall(CrosschainSystem.crosschainRead, (tableId, keyTuple));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function crosschainWrite(
    RootCallWrapper memory self,
    Identifier calldata identifier,
    bytes calldata _crosschainRead
  ) internal {
    bytes memory systemCall = abi.encodeCall(CrosschainSystem.crosschainWrite, (identifier, _crosschainRead));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CrosschainSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CrosschainSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(CrosschainSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CrosschainSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CrosschainSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CrosschainSystemType) {
    return CrosschainSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CrosschainSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using CrosschainSystemLib for CrosschainSystemType global;
using CrosschainSystemLib for CallWrapper global;
using CrosschainSystemLib for RootCallWrapper global;
