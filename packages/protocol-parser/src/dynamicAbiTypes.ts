import { StaticAbiType } from "./staticAbiTypes";
import { AbiType } from "abitype";
import { Hex } from "viem";

// Variable-length ABI types, where their lengths are defined by a PackedCounter

export const dynamicAbiTypes = [
  "uint8[]",
  "uint16[]",
  "uint24[]",
  "uint32[]",
  "uint40[]",
  "uint48[]",
  "uint56[]",
  "uint64[]",
  "uint72[]",
  "uint80[]",
  "uint88[]",
  "uint96[]",
  "uint104[]",
  "uint112[]",
  "uint120[]",
  "uint128[]",
  "uint136[]",
  "uint144[]",
  "uint152[]",
  "uint160[]",
  "uint168[]",
  "uint176[]",
  "uint184[]",
  "uint192[]",
  "uint200[]",
  "uint208[]",
  "uint216[]",
  "uint224[]",
  "uint232[]",
  "uint240[]",
  "uint248[]",
  "uint256[]",
  "int8[]",
  "int16[]",
  "int24[]",
  "int32[]",
  "int40[]",
  "int48[]",
  "int56[]",
  "int64[]",
  "int72[]",
  "int80[]",
  "int88[]",
  "int96[]",
  "int104[]",
  "int112[]",
  "int120[]",
  "int128[]",
  "int136[]",
  "int144[]",
  "int152[]",
  "int160[]",
  "int168[]",
  "int176[]",
  "int184[]",
  "int192[]",
  "int200[]",
  "int208[]",
  "int216[]",
  "int224[]",
  "int232[]",
  "int240[]",
  "int248[]",
  "int256[]",
  "bytes1[]",
  "bytes2[]",
  "bytes3[]",
  "bytes4[]",
  "bytes5[]",
  "bytes6[]",
  "bytes7[]",
  "bytes8[]",
  "bytes9[]",
  "bytes10[]",
  "bytes11[]",
  "bytes12[]",
  "bytes13[]",
  "bytes14[]",
  "bytes15[]",
  "bytes16[]",
  "bytes17[]",
  "bytes18[]",
  "bytes19[]",
  "bytes20[]",
  "bytes21[]",
  "bytes22[]",
  "bytes23[]",
  "bytes24[]",
  "bytes25[]",
  "bytes26[]",
  "bytes27[]",
  "bytes28[]",
  "bytes29[]",
  "bytes30[]",
  "bytes31[]",
  "bytes32[]",
  "bool[]",
  "address[]",
  "bytes",
  "string",
] as const satisfies readonly AbiType[];

export type DynamicAbiType = (typeof dynamicAbiTypes)[number];

export const dynamicAbiTypeToDefaultValue = {
  "uint8[]": [] as number[],
  "uint16[]": [] as number[],
  "uint24[]": [] as number[],
  "uint32[]": [] as number[],
  "uint40[]": [] as number[],
  "uint48[]": [] as number[],
  "uint56[]": [] as bigint[],
  "uint64[]": [] as bigint[],
  "uint72[]": [] as bigint[],
  "uint80[]": [] as bigint[],
  "uint88[]": [] as bigint[],
  "uint96[]": [] as bigint[],
  "uint104[]": [] as bigint[],
  "uint112[]": [] as bigint[],
  "uint120[]": [] as bigint[],
  "uint128[]": [] as bigint[],
  "uint136[]": [] as bigint[],
  "uint144[]": [] as bigint[],
  "uint152[]": [] as bigint[],
  "uint160[]": [] as bigint[],
  "uint168[]": [] as bigint[],
  "uint176[]": [] as bigint[],
  "uint184[]": [] as bigint[],
  "uint192[]": [] as bigint[],
  "uint200[]": [] as bigint[],
  "uint208[]": [] as bigint[],
  "uint216[]": [] as bigint[],
  "uint224[]": [] as bigint[],
  "uint232[]": [] as bigint[],
  "uint240[]": [] as bigint[],
  "uint248[]": [] as bigint[],
  "uint256[]": [] as bigint[],

  "int8[]": [] as number[],
  "int16[]": [] as number[],
  "int24[]": [] as number[],
  "int32[]": [] as number[],
  "int40[]": [] as number[],
  "int48[]": [] as number[],
  "int56[]": [] as bigint[],
  "int64[]": [] as bigint[],
  "int72[]": [] as bigint[],
  "int80[]": [] as bigint[],
  "int88[]": [] as bigint[],
  "int96[]": [] as bigint[],
  "int104[]": [] as bigint[],
  "int112[]": [] as bigint[],
  "int120[]": [] as bigint[],
  "int128[]": [] as bigint[],
  "int136[]": [] as bigint[],
  "int144[]": [] as bigint[],
  "int152[]": [] as bigint[],
  "int160[]": [] as bigint[],
  "int168[]": [] as bigint[],
  "int176[]": [] as bigint[],
  "int184[]": [] as bigint[],
  "int192[]": [] as bigint[],
  "int200[]": [] as bigint[],
  "int208[]": [] as bigint[],
  "int216[]": [] as bigint[],
  "int224[]": [] as bigint[],
  "int232[]": [] as bigint[],
  "int240[]": [] as bigint[],
  "int248[]": [] as bigint[],
  "int256[]": [] as bigint[],

  "bytes1[]": [] as Hex[],
  "bytes2[]": [] as Hex[],
  "bytes3[]": [] as Hex[],
  "bytes4[]": [] as Hex[],
  "bytes5[]": [] as Hex[],
  "bytes6[]": [] as Hex[],
  "bytes7[]": [] as Hex[],
  "bytes8[]": [] as Hex[],
  "bytes9[]": [] as Hex[],
  "bytes10[]": [] as Hex[],
  "bytes11[]": [] as Hex[],
  "bytes12[]": [] as Hex[],
  "bytes13[]": [] as Hex[],
  "bytes14[]": [] as Hex[],
  "bytes15[]": [] as Hex[],
  "bytes16[]": [] as Hex[],
  "bytes17[]": [] as Hex[],
  "bytes18[]": [] as Hex[],
  "bytes19[]": [] as Hex[],
  "bytes20[]": [] as Hex[],
  "bytes21[]": [] as Hex[],
  "bytes22[]": [] as Hex[],
  "bytes23[]": [] as Hex[],
  "bytes24[]": [] as Hex[],
  "bytes25[]": [] as Hex[],
  "bytes26[]": [] as Hex[],
  "bytes27[]": [] as Hex[],
  "bytes28[]": [] as Hex[],
  "bytes29[]": [] as Hex[],
  "bytes30[]": [] as Hex[],
  "bytes31[]": [] as Hex[],
  "bytes32[]": [] as Hex[],

  "bool[]": [] as boolean[],
  "address[]": [] as Hex[],

  bytes: "0x",
  string: "",
} as const satisfies Record<DynamicAbiType, number[] | bigint[] | Hex[] | boolean[] | Hex | string>;

export type DynamicAbiTypeToPrimitiveType<TDynamicAbiType extends DynamicAbiType> =
  (typeof dynamicAbiTypeToDefaultValue)[TDynamicAbiType];

export type ArrayAbiTypeToStaticAbiType<T extends string> = T extends `${infer StaticAbiType}[]`
  ? StaticAbiType
  : never;

export function arrayAbiTypeToStaticAbiType<T extends `${StaticAbiType}[]`>(
  abiType: T
): ArrayAbiTypeToStaticAbiType<T> {
  return abiType.replace(/\[\]$/g, "") as ArrayAbiTypeToStaticAbiType<T>;
}
