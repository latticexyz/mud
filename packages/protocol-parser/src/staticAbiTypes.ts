import { AbiType } from "abitype";
import { Hex } from "viem";

// Fixed-length ABI types

export const staticAbiTypes = [
  "uint8",
  "uint16",
  "uint24",
  "uint32",
  "uint40",
  "uint48",
  "uint56",
  "uint64",
  "uint72",
  "uint80",
  "uint88",
  "uint96",
  "uint104",
  "uint112",
  "uint120",
  "uint128",
  "uint136",
  "uint144",
  "uint152",
  "uint160",
  "uint168",
  "uint176",
  "uint184",
  "uint192",
  "uint200",
  "uint208",
  "uint216",
  "uint224",
  "uint232",
  "uint240",
  "uint248",
  "uint256",
  "int8",
  "int16",
  "int24",
  "int32",
  "int40",
  "int48",
  "int56",
  "int64",
  "int72",
  "int80",
  "int88",
  "int96",
  "int104",
  "int112",
  "int120",
  "int128",
  "int136",
  "int144",
  "int152",
  "int160",
  "int168",
  "int176",
  "int184",
  "int192",
  "int200",
  "int208",
  "int216",
  "int224",
  "int232",
  "int240",
  "int248",
  "int256",
  "bytes1",
  "bytes2",
  "bytes3",
  "bytes4",
  "bytes5",
  "bytes6",
  "bytes7",
  "bytes8",
  "bytes9",
  "bytes10",
  "bytes11",
  "bytes12",
  "bytes13",
  "bytes14",
  "bytes15",
  "bytes16",
  "bytes17",
  "bytes18",
  "bytes19",
  "bytes20",
  "bytes21",
  "bytes22",
  "bytes23",
  "bytes24",
  "bytes25",
  "bytes26",
  "bytes27",
  "bytes28",
  "bytes29",
  "bytes30",
  "bytes31",
  "bytes32",
  "bool",
  "address",
] as const satisfies readonly AbiType[];

export type StaticAbiType = (typeof staticAbiTypes)[number];

export const staticAbiTypeToDefaultValue = {
  uint8: 0,
  uint16: 0,
  uint24: 0,
  uint32: 0,
  uint40: 0,
  uint48: 0,
  uint56: 0n,
  uint64: 0n,
  uint72: 0n,
  uint80: 0n,
  uint88: 0n,
  uint96: 0n,
  uint104: 0n,
  uint112: 0n,
  uint120: 0n,
  uint128: 0n,
  uint136: 0n,
  uint144: 0n,
  uint152: 0n,
  uint160: 0n,
  uint168: 0n,
  uint176: 0n,
  uint184: 0n,
  uint192: 0n,
  uint200: 0n,
  uint208: 0n,
  uint216: 0n,
  uint224: 0n,
  uint232: 0n,
  uint240: 0n,
  uint248: 0n,
  uint256: 0n,

  int8: 0,
  int16: 0,
  int24: 0,
  int32: 0,
  int40: 0,
  int48: 0,
  int56: 0n,
  int64: 0n,
  int72: 0n,
  int80: 0n,
  int88: 0n,
  int96: 0n,
  int104: 0n,
  int112: 0n,
  int120: 0n,
  int128: 0n,
  int136: 0n,
  int144: 0n,
  int152: 0n,
  int160: 0n,
  int168: 0n,
  int176: 0n,
  int184: 0n,
  int192: 0n,
  int200: 0n,
  int208: 0n,
  int216: 0n,
  int224: 0n,
  int232: 0n,
  int240: 0n,
  int248: 0n,
  int256: 0n,

  bytes1: "0x00",
  bytes2: "0x0000",
  bytes3: "0x000000",
  bytes4: "0x00000000",
  bytes5: "0x0000000000",
  bytes6: "0x000000000000",
  bytes7: "0x00000000000000",
  bytes8: "0x0000000000000000",
  bytes9: "0x000000000000000000",
  bytes10: "0x00000000000000000000",
  bytes11: "0x0000000000000000000000",
  bytes12: "0x000000000000000000000000",
  bytes13: "0x00000000000000000000000000",
  bytes14: "0x0000000000000000000000000000",
  bytes15: "0x000000000000000000000000000000",
  bytes16: "0x00000000000000000000000000000000",
  bytes17: "0x0000000000000000000000000000000000",
  bytes18: "0x000000000000000000000000000000000000",
  bytes19: "0x00000000000000000000000000000000000000",
  bytes20: "0x0000000000000000000000000000000000000000",
  bytes21: "0x000000000000000000000000000000000000000000",
  bytes22: "0x00000000000000000000000000000000000000000000",
  bytes23: "0x0000000000000000000000000000000000000000000000",
  bytes24: "0x000000000000000000000000000000000000000000000000",
  bytes25: "0x00000000000000000000000000000000000000000000000000",
  bytes26: "0x0000000000000000000000000000000000000000000000000000",
  bytes27: "0x000000000000000000000000000000000000000000000000000000",
  bytes28: "0x00000000000000000000000000000000000000000000000000000000",
  bytes29: "0x0000000000000000000000000000000000000000000000000000000000",
  bytes30: "0x000000000000000000000000000000000000000000000000000000000000",
  bytes31: "0x00000000000000000000000000000000000000000000000000000000000000",
  bytes32: "0x0000000000000000000000000000000000000000000000000000000000000000",

  bool: false,
  address: "0x0000000000000000000000000000000000000000",
} as const satisfies Record<StaticAbiType, number | bigint | boolean | Hex>;

export type StaticAbiTypeToPrimitiveType<TStaticAbiType extends StaticAbiType> =
  (typeof staticAbiTypeToDefaultValue)[TStaticAbiType];
