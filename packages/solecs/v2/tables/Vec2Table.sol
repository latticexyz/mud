// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";

// -- User defined schema and id --

bytes32 constant id = keccak256("mud.store.table.vec2");

struct Schema {
  uint32 x;
  uint32 y;
}

// -- Autogenerated schema and library --
// TODO: autogenerate

library Vec2Table {
  /** Get the table's schema */
  function getSchema() internal pure returns (SchemaType[] memory schema) {
    schema = new SchemaType[](2);
    schema[0] = SchemaType.Uint32;
    schema[1] = SchemaType.Uint32;
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(id, getSchema());
  }

  /** Set the table's data */
  function set(
    bytes32 key,
    uint32 x,
    uint32 y
  ) internal {
    bytes memory data = bytes.concat(bytes4(x), bytes4(y));
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, data);
  }

  function set(bytes32 key, Schema memory vec2) internal {
    set(key, vec2.x, vec2.y);
  }

  function setX(bytes32 key, uint32 x) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 0, bytes.concat(bytes4(x)));
  }

  function setY(bytes32 key, uint32 y) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 1, bytes.concat(bytes4(y)));
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (Schema memory vec2) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory blob = StoreSwitch.getData(id, keyTuple, 8);
    bytes[] memory data = StoreCore.split(blob, getSchema());
    return Schema({ x: Bytes.toUint32(data[0]), y: Bytes.toUint32(data[1]) });
  }
}
