import fs from "fs";
import glob from "glob";
import type { CommandBuilder } from "yargs";
import { deferred } from "../utils";

const IDregex = new RegExp(/(?<=uint256 constant ID = uint256\(keccak256\(")(.*)(?="\))/);

type Options = Record<string, never>;

export const command = "system-types";
export const desc =
  "Generates system type file. Note: assumes ABIs of all systems in ./abi and typechain generated types in ./types/ethers-contracts";

export const builder: CommandBuilder<Options, Options> = (yargs) =>
  yargs.options({
    include: { type: "array" },
    exclude: { type: "array" },
    out: { type: "string" },
  });

export const handler = async (): Promise<void> => {
  const wd = process.cwd();
  let abis: string[] = [];
  let systems: string[] = [];
  let ids: string[] = [];
  let typePaths: string[] = [];

  const systemsPath = `${wd}/src/systems/*.sol`;

  const [resolve, , promise] = deferred<void>();
  glob(systemsPath, {}, (_, matches) => {
    systems = matches.map((path) => {
      const fragments = path.split("/");
      return fragments[fragments.length - 1].split(".sol")[0];
    });

    ids = matches
      .map((path) => fs.readFileSync(path).toString())
      .map((source, index) => {
        const regexResult = IDregex.exec(source);
        const id = regexResult && regexResult[0];
        if (!id) {
          console.log("Source:", source);
          console.log("ID:", id);
          console.log("Regex:", IDregex, regexResult);
          throw new Error(
            "No ID found for" +
              matches[index] +
              ". Make sure your system source file includes a ID definition (uint256 constant ID = uint256(keccak256(<ID>));)"
          );
        }
        return id;
      });

    abis = systems.map((system) => `../abi/${system}.json`);

    typePaths = systems.map((system) => `./ethers-contracts/${system}.ts`);

    resolve();
  });

  // Make the callback synchronous
  await promise;

  console.log("Matches", systems);
  console.log("Solidity", ids);
  console.log("Type paths", typePaths);
  console.log("ABIs", abis);

  const SystemTypes = `// Autogenerated using mud system-types
${typePaths.map((path, index) => `import { ${systems[index]} } from "${path.replace(".ts", "")}";`).join("\n")}
 
export type SystemTypes = {
${systems.map((system, index) => `  "${ids[index]}": ${system};`).join("\n")}
};
`;

  const SystemAbis = `// Autogenerated using mud system-types
${abis.map((path, index) => `import ${systems[index]} from "${path}";`).join("\n")}

export const SystemAbis = {
${systems.map((system, index) => `  "${ids[index]}": ${system}.abi,`).join("\n")}
};
`;

  console.log("Generating files:");
  console.log("SystemTypes.ts", SystemTypes);
  console.log("SystemAbis.mts", SystemAbis);

  fs.writeFileSync("./types/SystemTypes.ts", SystemTypes);
  fs.writeFileSync("./types/SystemAbis.mts", SystemAbis);
};
