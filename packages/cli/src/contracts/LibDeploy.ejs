// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { console } from "forge-std/console.sol";

// Solecs 
import { IWorld } from "solecs/interfaces/IWorld.sol";
import { World } from "solecs/World.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";
import { SystemStorage } from "solecs/SystemStorage.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
<% components.forEach(component => { -%>
<% const componentName = component.split("/").pop(); %>
import { <%= componentName %>, ID as <%= componentName %>ID } from "components/<%- component %>.sol";
<% }); -%>

// Systems (requires 'systems=...' remapping in project's remappings.txt)
<% systems.forEach(system => { -%>
<% const systemName=system.name.split("/").pop(); %>
import { <%= systemName %>, ID as <%= systemName %>ID } from "systems/<%- system.name %>.sol";
<% }); -%>

<% if (initializers.length > 0) { -%>
// Initializer libraries (requires 'libraries=...' remapping in project's remappings.txt)
<% initializers.forEach((initializer) => { -%>
<% const initializerName=initializer.name.split("/").pop(); %>
import { <%= initializerName %> } from "libraries/<%- initializer %>.sol";
<% }); -%>
<% } -%>

struct DeployResult {
  IWorld world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : IWorld(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      IComponent comp;
<% components.forEach(component => { -%>
      <% const componentName=component.split("/").pop(); %>
      console.log("Deploying <%= componentName %>");
      comp = new <%= componentName %>(address(result.world));
      console.log(address(comp));
<% });-%>
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);

    // Call initializer libraries
    if (!_reuseComponents) {
      // Allow initializers to utilize SystemStorage
      SystemStorage.init(result.world, result.world.components());

<% initializers.forEach((name) => { -%>
      <% const initializerName=name.split("/").pop(); %>
      <%= initializerName -%>.init(result.world);
<% }); -%>
    }
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    IComponent(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    IWorld world = IWorld(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();
<% systems.forEach(system => { -%>
    <% const systemName=system.name.split("/").pop(); %>
    console.log("Deploying <%= systemName %>");
    system = new <%= systemName %>(world, address(components));
    world.registerSystem(address(system), <%= systemName %>ID);
<% system.writeAccess?.forEach(component => { -%>
<% const componentName=component.split("/").pop(); %>
<% if (componentName === "*") { -%>
<% components.forEach(comp=> { -%>
    <% const compName=comp.split("/").pop(); %>
    authorizeWriter(components, <%= compName %>ID, address(system));
<% });-%>
<% } else { -%>
    authorizeWriter(components, <%= componentName %>ID, address(system));
<% } -%>
<% });-%>
<% if (system.initialize) { -%>
      if(init) system.execute(<%= system.initialize -%>);
<% } -%>
    console.log(address(system));
<% });-%>
  }
}
