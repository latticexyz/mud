// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Singleton")));
bytes32 constant SingletonTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0020010320000000000000000000000000000000000000000000000000000000
);

library Singleton {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](0);

    return SchemaLib.encode(_keySchema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](4);
    _valueSchema[0] = SchemaType.INT256;
    _valueSchema[1] = SchemaType.UINT32_ARRAY;
    _valueSchema[2] = SchemaType.UINT32_ARRAY;
    _valueSchema[3] = SchemaType.UINT32_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "v1";
    fieldNames[1] = "v2";
    fieldNames[2] = "v3";
    fieldNames[3] = "v4";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get v1 */
  function getV1() internal view returns (int256 v1) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /** Get v1 */
  function _getV1() internal view returns (int256 v1) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /** Get v1 (using the specified store) */
  function getV1(IStore _store) internal view returns (int256 v1) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /** Set v1 */
  function setV1(int256 v1) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((v1)), _fieldLayout);
  }

  /** Set v1 */
  function _setV1(int256 v1) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setField(_tableId, _keyTuple, 0, abi.encodePacked((v1)), _fieldLayout);
  }

  /** Set v1 (using the specified store) */
  function setV1(IStore _store, int256 v1) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((v1)), _fieldLayout);
  }

  /** Get v2 */
  function getV2() internal view returns (uint32[2] memory v2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v2 */
  function _getV2() internal view returns (uint32[2] memory v2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v2 (using the specified store) */
  function getV2(IStore _store) internal view returns (uint32[2] memory v2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set v2 */
  function setV2(uint32[2] memory v2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint32_2(v2)), _fieldLayout);
  }

  /** Set v2 */
  function _setV2(uint32[2] memory v2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint32_2(v2)), _fieldLayout);
  }

  /** Set v2 (using the specified store) */
  function setV2(IStore _store, uint32[2] memory v2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint32_2(v2)), _fieldLayout);
  }

  /** Get the length of v2 */
  function lengthV2() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v2 */
  function _lengthV2() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 1, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v2 (using the specified store) */
  function lengthV2(IStore _store) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * Get an item of v2
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV2(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        1,
        _fieldLayout,
        _index * 4,
        (_index + 1) * 4
      );
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v2
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemV2(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(_tableId, _keyTuple, 1, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v2 (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV2(IStore _store, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /** Push an element to v2 */
  function pushV2(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v2 */
  function _pushV2(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v2 (using the specified store) */
  function pushV2(IStore _store, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Pop an element from v2 */
  function popV2() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 4, _fieldLayout);
  }

  /** Pop an element from v2 */
  function _popV2() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromField(_tableId, _keyTuple, 1, 4, _fieldLayout);
  }

  /** Pop an element from v2 (using the specified store) */
  function popV2(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.popFromField(_tableId, _keyTuple, 1, 4, _fieldLayout);
  }

  /**
   * Update an element of v2 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV2(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v2 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateV2(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 1, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v2 (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV2(IStore _store, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 1, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /** Get v3 */
  function getV3() internal view returns (uint32[2] memory v3) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v3 */
  function _getV3() internal view returns (uint32[2] memory v3) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v3 (using the specified store) */
  function getV3(IStore _store) internal view returns (uint32[2] memory v3) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_uint32_2(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set v3 */
  function setV3(uint32[2] memory v3) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, EncodeArray.encode(fromStaticArray_uint32_2(v3)), _fieldLayout);
  }

  /** Set v3 */
  function _setV3(uint32[2] memory v3) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setField(_tableId, _keyTuple, 2, EncodeArray.encode(fromStaticArray_uint32_2(v3)), _fieldLayout);
  }

  /** Set v3 (using the specified store) */
  function setV3(IStore _store, uint32[2] memory v3) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 2, EncodeArray.encode(fromStaticArray_uint32_2(v3)), _fieldLayout);
  }

  /** Get the length of v3 */
  function lengthV3() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v3 */
  function _lengthV3() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 2, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v3 (using the specified store) */
  function lengthV3(IStore _store) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * Get an item of v3
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV3(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        _fieldLayout,
        _index * 4,
        (_index + 1) * 4
      );
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v3
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemV3(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(_tableId, _keyTuple, 2, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v3 (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV3(IStore _store, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /** Push an element to v3 */
  function pushV3(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v3 */
  function _pushV3(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v3 (using the specified store) */
  function pushV3(IStore _store, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Pop an element from v3 */
  function popV3() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 4, _fieldLayout);
  }

  /** Pop an element from v3 */
  function _popV3() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromField(_tableId, _keyTuple, 2, 4, _fieldLayout);
  }

  /** Pop an element from v3 (using the specified store) */
  function popV3(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.popFromField(_tableId, _keyTuple, 2, 4, _fieldLayout);
  }

  /**
   * Update an element of v3 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV3(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v3 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateV3(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 2, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v3 (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV3(IStore _store, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 2, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /** Get v4 */
  function getV4() internal view returns (uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return toStaticArray_uint32_1(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v4 */
  function _getV4() internal view returns (uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return toStaticArray_uint32_1(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get v4 (using the specified store) */
  function getV4(IStore _store) internal view returns (uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 2);
    return toStaticArray_uint32_1(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set v4 */
  function setV4(uint32[1] memory v4) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode(fromStaticArray_uint32_1(v4)), _fieldLayout);
  }

  /** Set v4 */
  function _setV4(uint32[1] memory v4) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setField(_tableId, _keyTuple, 3, EncodeArray.encode(fromStaticArray_uint32_1(v4)), _fieldLayout);
  }

  /** Set v4 (using the specified store) */
  function setV4(IStore _store, uint32[1] memory v4) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 3, EncodeArray.encode(fromStaticArray_uint32_1(v4)), _fieldLayout);
  }

  /** Get the length of v4 */
  function lengthV4() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v4 */
  function _lengthV4() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /** Get the length of v4 (using the specified store) */
  function lengthV4(IStore _store) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, _fieldLayout);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * Get an item of v4
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV4(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        _fieldLayout,
        _index * 4,
        (_index + 1) * 4
      );
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v4
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemV4(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(_tableId, _keyTuple, 3, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * Get an item of v4 (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemV4(IStore _store, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, _fieldLayout, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /** Push an element to v4 */
  function pushV4(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v4 */
  function _pushV4(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to v4 (using the specified store) */
  function pushV4(IStore _store, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Pop an element from v4 */
  function popV4() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 4, _fieldLayout);
  }

  /** Pop an element from v4 */
  function _popV4() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromField(_tableId, _keyTuple, 3, 4, _fieldLayout);
  }

  /** Pop an element from v4 (using the specified store) */
  function popV4(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.popFromField(_tableId, _keyTuple, 3, 4, _fieldLayout);
  }

  /**
   * Update an element of v4 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV4(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v4 at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateV4(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 3, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of v4 (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateV4(IStore _store, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 3, _index * 4, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /** Get the full data */
  function get() internal view returns (int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Get the full data */
  function _get() internal view returns (int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store
  ) internal view returns (int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, _fieldLayout);
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) internal {
    bytes memory _staticData = encodeStatic(v1);

    PackedCounter _encodedLengths = encodeLengths(v2, v3, v4);
    bytes memory _dynamicData = encodeDynamic(v2, v3, v4);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using individual values */
  function _set(int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) internal {
    bytes memory _staticData = encodeStatic(v1);

    PackedCounter _encodedLengths = encodeLengths(v2, v3, v4);
    bytes memory _dynamicData = encodeDynamic(v2, v3, v4);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) internal {
    bytes memory _staticData = encodeStatic(v1);

    PackedCounter _encodedLengths = encodeLengths(v2, v3, v4);
    bytes memory _dynamicData = encodeDynamic(v2, v3, v4);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * Decode the tightly packed blob using this table's field layout.
   * Undefined behaviour for invalid blobs.
   */
  function decode(
    bytes memory _blob
  ) internal pure returns (int256 v1, uint32[2] memory v2, uint32[2] memory v3, uint32[1] memory v4) {
    // 32 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 32));

    v1 = (int256(uint256(Bytes.slice32(_blob, 0))));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 32) {
      // skip static data length + dynamic lengths word
      uint256 _start = 64;
      uint256 _end;
      unchecked {
        _end = 64 + _encodedLengths.atIndex(0);
      }
      v2 = toStaticArray_uint32_2(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(1);
      }
      v3 = toStaticArray_uint32_2(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(2);
      }
      v4 = toStaticArray_uint32_1(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
    }
  }

  /** Tightly pack static data using this table's schema */
  function encodeStatic(int256 v1) internal pure returns (bytes memory) {
    return abi.encodePacked(v1);
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeLengths(
    uint32[2] memory v2,
    uint32[2] memory v3,
    uint32[1] memory v4
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(v2.length * 4, v3.length * 4, v4.length * 4);
    }
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeDynamic(
    uint32[2] memory v2,
    uint32[2] memory v3,
    uint32[1] memory v4
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode(fromStaticArray_uint32_2(v2)),
        EncodeArray.encode(fromStaticArray_uint32_2(v3)),
        EncodeArray.encode(fromStaticArray_uint32_1(v4))
      );
  }

  /** Tightly pack full data using this table's field layout */
  function encode(
    int256 v1,
    uint32[2] memory v2,
    uint32[2] memory v3,
    uint32[1] memory v4
  ) internal pure returns (bytes memory) {
    bytes memory _staticData = encodeStatic(v1);

    PackedCounter _encodedLengths = encodeLengths(v2, v3, v4);
    bytes memory _dynamicData = encodeDynamic(v2, v3, v4);

    return abi.encodePacked(_staticData, _encodedLengths, _dynamicData);
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /* Delete all data for given keys */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }
}

function toStaticArray_uint32_2(uint32[] memory _value) pure returns (uint32[2] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function toStaticArray_uint32_1(uint32[] memory _value) pure returns (uint32[1] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_uint32_2(uint32[2] memory _value) pure returns (uint32[] memory _result) {
  _result = new uint32[](2);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 64);
}

function fromStaticArray_uint32_1(uint32[1] memory _value) pure returns (uint32[] memory _result) {
  _result = new uint32[](1);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 32);
}
