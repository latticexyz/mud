/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface PersonaMirrorInterface extends utils.Interface {
  functions: {
    "activePersona(address,address)": FunctionFragment;
    "authorize(uint256,address,address,bytes4[])": FunctionFragment;
    "bridgeChangeOwner(address,uint256)": FunctionFragment;
    "bridgeNuke(uint256)": FunctionFragment;
    "deauthorize(uint256,address,address)": FunctionFragment;
    "deimpersonate(address)": FunctionFragment;
    "getActivePersona(address,address)": FunctionFragment;
    "impersonate(uint256,address)": FunctionFragment;
    "isAuthorized(uint256,address,address,bytes4)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "ovmL2CrossDomainMessenger()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "personaL1()": FunctionFragment;
    "personaOwner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activePersona"
      | "authorize"
      | "bridgeChangeOwner"
      | "bridgeNuke"
      | "deauthorize"
      | "deimpersonate"
      | "getActivePersona"
      | "impersonate"
      | "isAuthorized"
      | "isTrustedForwarder"
      | "ovmL2CrossDomainMessenger"
      | "ownerOf"
      | "personaL1"
      | "personaOwner"
      | "setOwner"
      | "setTrustedForwarder"
      | "trustedForwarder"
      | "versionRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activePersona",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeChangeOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "bridgeNuke", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "deauthorize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "deimpersonate", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "getActivePersona",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "impersonate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "isTrustedForwarder", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "ovmL2CrossDomainMessenger", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "personaL1", values?: undefined): string;
  encodeFunctionData(functionFragment: "personaOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setTrustedForwarder", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "trustedForwarder", values?: undefined): string;
  encodeFunctionData(functionFragment: "versionRecipient", values?: undefined): string;

  decodeFunctionResult(functionFragment: "activePersona", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeChangeOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeNuke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deauthorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deimpersonate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActivePersona", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "impersonate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ovmL2CrossDomainMessenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "personaL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "personaOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTrustedForwarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trustedForwarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "versionRecipient", data: BytesLike): Result;

  events: {
    "Authorize(uint256,address,address,bytes4[])": EventFragment;
    "BridgeChangeOwner(uint256,address,address,uint256)": EventFragment;
    "BridgeNuke(uint256,uint256)": EventFragment;
    "Deauthorize(uint256,address,address)": EventFragment;
    "Deimpersonate(uint256,address,address)": EventFragment;
    "Impersonate(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeChangeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeNuke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deauthorize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deimpersonate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Impersonate"): EventFragment;
}

export interface AuthorizeEventObject {
  personaId: BigNumber;
  user: string;
  consumer: string;
  fnSignatures: string[];
}
export type AuthorizeEvent = TypedEvent<[BigNumber, string, string, string[]], AuthorizeEventObject>;

export type AuthorizeEventFilter = TypedEventFilter<AuthorizeEvent>;

export interface BridgeChangeOwnerEventObject {
  personaId: BigNumber;
  from: string;
  to: string;
  nonce: BigNumber;
}
export type BridgeChangeOwnerEvent = TypedEvent<[BigNumber, string, string, BigNumber], BridgeChangeOwnerEventObject>;

export type BridgeChangeOwnerEventFilter = TypedEventFilter<BridgeChangeOwnerEvent>;

export interface BridgeNukeEventObject {
  personaId: BigNumber;
  nonce: BigNumber;
}
export type BridgeNukeEvent = TypedEvent<[BigNumber, BigNumber], BridgeNukeEventObject>;

export type BridgeNukeEventFilter = TypedEventFilter<BridgeNukeEvent>;

export interface DeauthorizeEventObject {
  personaId: BigNumber;
  user: string;
  consumer: string;
}
export type DeauthorizeEvent = TypedEvent<[BigNumber, string, string], DeauthorizeEventObject>;

export type DeauthorizeEventFilter = TypedEventFilter<DeauthorizeEvent>;

export interface DeimpersonateEventObject {
  personaId: BigNumber;
  user: string;
  consumer: string;
}
export type DeimpersonateEvent = TypedEvent<[BigNumber, string, string], DeimpersonateEventObject>;

export type DeimpersonateEventFilter = TypedEventFilter<DeimpersonateEvent>;

export interface ImpersonateEventObject {
  personaId: BigNumber;
  user: string;
  consumer: string;
}
export type ImpersonateEvent = TypedEvent<[BigNumber, string, string], ImpersonateEventObject>;

export type ImpersonateEventFilter = TypedEventFilter<ImpersonateEvent>;

export interface PersonaMirror extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PersonaMirrorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activePersona(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nonce: BigNumber; personaId: BigNumber }>;

    authorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeChangeOwner(
      to: PromiseOrValue<string>,
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeNuke(
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deauthorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deimpersonate(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActivePersona(
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { personaId: BigNumber }>;

    impersonate(
      personaId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    ovmL2CrossDomainMessenger(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    personaL1(overrides?: CallOverrides): Promise<[string]>;

    personaOwner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      trustedForwarderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;
  };

  activePersona(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { nonce: BigNumber; personaId: BigNumber }>;

  authorize(
    personaId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    consumer: PromiseOrValue<string>,
    fnSignatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeChangeOwner(
    to: PromiseOrValue<string>,
    personaId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeNuke(
    personaId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deauthorize(
    personaId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deimpersonate(
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActivePersona(
    user: PromiseOrValue<string>,
    consumer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  impersonate(
    personaId: PromiseOrValue<BigNumberish>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(
    personaId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    consumer: PromiseOrValue<string>,
    fnSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  ovmL2CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  ownerOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  personaL1(overrides?: CallOverrides): Promise<string>;

  personaOwner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newContractOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    trustedForwarderAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activePersona(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nonce: BigNumber; personaId: BigNumber }>;

    authorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeChangeOwner(
      to: PromiseOrValue<string>,
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeNuke(personaId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    deauthorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deimpersonate(consumer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getActivePersona(
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impersonate(
      personaId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorized(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    ovmL2CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    ownerOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    personaL1(overrides?: CallOverrides): Promise<string>;

    personaOwner(overrides?: CallOverrides): Promise<string>;

    setOwner(newContractOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTrustedForwarder(trustedForwarderAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Authorize(uint256,address,address,bytes4[])"(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null,
      fnSignatures?: null
    ): AuthorizeEventFilter;
    Authorize(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null,
      fnSignatures?: null
    ): AuthorizeEventFilter;

    "BridgeChangeOwner(uint256,address,address,uint256)"(
      personaId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      nonce?: null
    ): BridgeChangeOwnerEventFilter;
    BridgeChangeOwner(
      personaId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      nonce?: null
    ): BridgeChangeOwnerEventFilter;

    "BridgeNuke(uint256,uint256)"(personaId?: PromiseOrValue<BigNumberish> | null, nonce?: null): BridgeNukeEventFilter;
    BridgeNuke(personaId?: PromiseOrValue<BigNumberish> | null, nonce?: null): BridgeNukeEventFilter;

    "Deauthorize(uint256,address,address)"(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): DeauthorizeEventFilter;
    Deauthorize(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): DeauthorizeEventFilter;

    "Deimpersonate(uint256,address,address)"(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): DeimpersonateEventFilter;
    Deimpersonate(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): DeimpersonateEventFilter;

    "Impersonate(uint256,address,address)"(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): ImpersonateEventFilter;
    Impersonate(
      personaId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      consumer?: PromiseOrValue<string> | null
    ): ImpersonateEventFilter;
  };

  estimateGas: {
    activePersona(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeChangeOwner(
      to: PromiseOrValue<string>,
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeNuke(
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deauthorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deimpersonate(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActivePersona(
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impersonate(
      personaId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuthorized(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    ovmL2CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    personaL1(overrides?: CallOverrides): Promise<BigNumber>;

    personaOwner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      trustedForwarderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activePersona(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeChangeOwner(
      to: PromiseOrValue<string>,
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeNuke(
      personaId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deauthorize(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deimpersonate(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActivePersona(
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impersonate(
      personaId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      personaId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      consumer: PromiseOrValue<string>,
      fnSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ovmL2CrossDomainMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personaL1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personaOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      trustedForwarderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
