/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockL2Bridge, MockL2BridgeInterface } from "../MockL2Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610317806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633dbb202b1461003b5780636e296e4514610050575b600080fd5b61004e61004936600461019b565b61007c565b005b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317815560405173ffffffffffffffffffffffffffffffffffffffff85169063ffffffff8416906100d49086906102a6565b60006040518083038160008787f1925050503d8060008114610112576040519150601f19603f3d011682016040523d82523d6000602084013e610117565b606091505b5050600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590508061014d57600080fd5b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803563ffffffff8116811461019657600080fd5b919050565b6000806000606084860312156101b057600080fd5b833573ffffffffffffffffffffffffffffffffffffffff811681146101d457600080fd5b9250602084013567ffffffffffffffff808211156101f157600080fd5b818601915086601f83011261020557600080fd5b81358181111561021757610217610153565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561025d5761025d610153565b8160405282815289602084870101111561027657600080fd5b82602086016020830137600060208483010152809650505050505061029d60408501610182565b90509250925092565b6000825160005b818110156102c757602081860181015185830152016102ad565b818111156102d6576000828501525b50919091019291505056fea2646970667358221220a5e6072f99c7873458f5c81c1f7c600e713ba1e67a9e3a49eb197f300933e30364736f6c634300080b0033";

type MockL2BridgeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockL2BridgeConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockL2Bridge__factory extends ContractFactory {
  constructor(...args: MockL2BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockL2Bridge> {
    return super.deploy(overrides || {}) as Promise<MockL2Bridge>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockL2Bridge {
    return super.attach(address) as MockL2Bridge;
  }
  override connect(signer: Signer): MockL2Bridge__factory {
    return super.connect(signer) as MockL2Bridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockL2BridgeInterface {
    return new utils.Interface(_abi) as MockL2BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockL2Bridge {
    return new Contract(address, _abi, signerOrProvider) as MockL2Bridge;
  }
}
