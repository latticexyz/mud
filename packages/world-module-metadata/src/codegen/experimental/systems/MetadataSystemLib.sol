// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { MetadataSystem } from "../../../MetadataSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MetadataSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "metadata", name: "MetadataSystem" }))
MetadataSystemType constant metadataSystem = MetadataSystemType.wrap(
  0x73796d657461646174610000000000004d6574616461746153797374656d0000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title MetadataSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MetadataSystemLib {
  error MetadataSystemLib_CallingFromRootSystem();

  function getResourceTag(
    MetadataSystemType self,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    return CallWrapper(self.toResourceId(), address(0)).getResourceTag(resource, tag);
  }

  function setResourceTag(MetadataSystemType self, ResourceId resource, bytes32 tag, bytes memory value) internal {
    return CallWrapper(self.toResourceId(), address(0)).setResourceTag(resource, tag, value);
  }

  function deleteResourceTag(MetadataSystemType self, ResourceId resource, bytes32 tag) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteResourceTag(resource, tag);
  }

  function getResourceTag(
    CallWrapper memory self,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert MetadataSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getResourceTag_ResourceId_bytes32.getResourceTag, (resource, tag));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bytes));
  }

  function setResourceTag(CallWrapper memory self, ResourceId resource, bytes32 tag, bytes memory value) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert MetadataSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setResourceTag_ResourceId_bytes32_bytes.setResourceTag,
      (resource, tag, value)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteResourceTag(CallWrapper memory self, ResourceId resource, bytes32 tag) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert MetadataSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_deleteResourceTag_ResourceId_bytes32.deleteResourceTag, (resource, tag));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getResourceTag(
    RootCallWrapper memory self,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    bytes memory systemCall = abi.encodeCall(_getResourceTag_ResourceId_bytes32.getResourceTag, (resource, tag));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes));
  }

  function setResourceTag(RootCallWrapper memory self, ResourceId resource, bytes32 tag, bytes memory value) internal {
    bytes memory systemCall = abi.encodeCall(
      _setResourceTag_ResourceId_bytes32_bytes.setResourceTag,
      (resource, tag, value)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteResourceTag(RootCallWrapper memory self, ResourceId resource, bytes32 tag) internal {
    bytes memory systemCall = abi.encodeCall(_deleteResourceTag_ResourceId_bytes32.deleteResourceTag, (resource, tag));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(MetadataSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(MetadataSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(MetadataSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(MetadataSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(MetadataSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MetadataSystemType) {
    return MetadataSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(MetadataSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _getResourceTag_ResourceId_bytes32 {
  function getResourceTag(ResourceId resource, bytes32 tag) external;
}

interface _setResourceTag_ResourceId_bytes32_bytes {
  function setResourceTag(ResourceId resource, bytes32 tag, bytes memory value) external;
}

interface _deleteResourceTag_ResourceId_bytes32 {
  function deleteResourceTag(ResourceId resource, bytes32 tag) external;
}

using MetadataSystemLib for MetadataSystemType global;
using MetadataSystemLib for CallWrapper global;
using MetadataSystemLib for RootCallWrapper global;
