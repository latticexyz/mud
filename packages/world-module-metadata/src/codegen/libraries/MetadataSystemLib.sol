// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { MetadataSystem } from "../../MetadataSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MetadataSystemType is bytes32;

MetadataSystemType constant metadataSystem = MetadataSystemType.wrap(
  0x73796d657461646174610000000000004d6574616461746153797374656d0000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title MetadataSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MetadataSystemLib {
  function getResourceTag(
    MetadataSystemType self,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    CallWrapper(self.toResourceId(), address(0)).getResourceTag(resource, tag);
  }

  function setResourceTag(MetadataSystemType self, ResourceId resource, bytes32 tag, bytes memory value) internal {
    CallWrapper(self.toResourceId(), address(0)).setResourceTag(resource, tag, value);
  }

  function deleteResourceTag(MetadataSystemType self, ResourceId resource, bytes32 tag) internal {
    CallWrapper(self.toResourceId(), address(0)).deleteResourceTag(resource, tag);
  }

  function getResourceTag(
    CallWrapper memory self,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    bytes memory systemCall = abi.encodeCall(MetadataSystem.getResourceTag, (resource, tag));
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (bytes));
  }

  function setResourceTag(CallWrapper memory self, ResourceId resource, bytes32 tag, bytes memory value) internal {
    bytes memory systemCall = abi.encodeCall(MetadataSystem.setResourceTag, (resource, tag, value));
    bytes memory result = _world().call(self.systemId, systemCall);
    result;
  }

  function deleteResourceTag(CallWrapper memory self, ResourceId resource, bytes32 tag) internal {
    bytes memory systemCall = abi.encodeCall(MetadataSystem.deleteResourceTag, (resource, tag));
    bytes memory result = _world().call(self.systemId, systemCall);
    result;
  }

  function toResourceId(MetadataSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(MetadataSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MetadataSystemType) {
    return MetadataSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using MetadataSystemLib for MetadataSystemType global;
using MetadataSystemLib for CallWrapper global;
