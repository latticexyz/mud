// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type MetadataSystemType is bytes32;

MetadataSystemType constant metadataSystem = MetadataSystemType.wrap(
  0x73796d657461646174610000000000004d6574616461746153797374656d0000
);

/**
 * @title MetadataSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library MetadataSystemLib {
  function getResourceTag(
    MetadataSystemType __systemId,
    ResourceId resource,
    bytes32 tag
  ) internal view returns (bytes memory) {
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (__systemId.toResourceId(), abi.encode(resource, tag)));
    (bool success, bytes memory result) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(result);

    return abi.decode(result, (bytes));
  }

  function setResourceTag(
    MetadataSystemType __systemId,
    ResourceId resource,
    bytes32 tag,
    bytes memory value
  ) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(resource, tag, value));
    result;
  }

  function deleteResourceTag(MetadataSystemType __systemId, ResourceId resource, bytes32 tag) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(resource, tag));
    result;
  }

  function toResourceId(MetadataSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(MetadataSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (MetadataSystemType) {
    return MetadataSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using MetadataSystemLib for MetadataSystemType global;
