// SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.0;

import { DSTest } from "ds-test/test.sol";
import { getAddressById } from "solecs/utils.sol";
import { console } from "forge-std/console.sol";
import { CubicNoiseConfig, LibNoise } from "./LibNoise.sol";

contract LibNoiseTest is DSTest {
  function testNoise() public {
    int256[2][100] memory coords = [
      [int256(364), int256(-143)],
      [int256(-298), int256(-82)],
      [int256(-157), int256(-154)],
      [int256(254), int256(402)],
      [int256(-234), int256(-186)],
      [int256(-210), int256(127)],
      [int256(69), int256(326)],
      [int256(348), int256(-284)],
      [int256(-48), int256(-339)],
      [int256(345), int256(-162)],
      [int256(-88), int256(-251)],
      [int256(219), int256(302)],
      [int256(432), int256(-243)],
      [int256(35), int256(66)],
      [int256(306), int256(354)],
      [int256(436), int256(197)],
      [int256(-36), int256(-371)],
      [int256(168), int256(-265)],
      [int256(420), int256(44)],
      [int256(360), int256(-96)],
      [int256(-471), int256(-217)],
      [int256(310), int256(-196)],
      [int256(64), int256(-444)],
      [int256(-271), int256(-447)],
      [int256(-218), int256(290)],
      [int256(332), int256(253)],
      [int256(223), int256(-480)],
      [int256(108), int256(477)],
      [int256(-452), int256(-177)],
      [int256(-140), int256(-361)],
      [int256(45), int256(-49)],
      [int256(84), int256(-432)],
      [int256(471), int256(-170)],
      [int256(-131), int256(-342)],
      [int256(129), int256(84)],
      [int256(-153), int256(310)],
      [int256(-140), int256(84)],
      [int256(-58), int256(-360)],
      [int256(2), int256(482)],
      [int256(420), int256(-251)],
      [int256(147), int256(124)],
      [int256(459), int256(-182)],
      [int256(-398), int256(203)],
      [int256(232), int256(-180)],
      [int256(-336), int256(76)],
      [int256(79), int256(-25)],
      [int256(-129), int256(-353)],
      [int256(-426), int256(-453)],
      [int256(155), int256(-269)],
      [int256(226), int256(-217)],
      [int256(-180), int256(-304)],
      [int256(-248), int256(-48)],
      [int256(495), int256(-113)],
      [int256(318), int256(-243)],
      [int256(417), int256(-292)],
      [int256(-222), int256(431)],
      [int256(-218), int256(-74)],
      [int256(-74), int256(-189)],
      [int256(-158), int256(272)],
      [int256(166), int256(6)],
      [int256(9), int256(-303)],
      [int256(-450), int256(-499)],
      [int256(257), int256(-442)],
      [int256(235), int256(137)],
      [int256(401), int256(462)],
      [int256(-79), int256(-265)],
      [int256(-225), int256(-310)],
      [int256(176), int256(-40)],
      [int256(-114), int256(-480)],
      [int256(-341), int256(61)],
      [int256(-260), int256(-103)],
      [int256(414), int256(-128)],
      [int256(255), int256(475)],
      [int256(126), int256(421)],
      [int256(467), int256(-144)],
      [int256(349), int256(395)],
      [int256(-380), int256(470)],
      [int256(-157), int256(203)],
      [int256(-367), int256(-89)],
      [int256(21), int256(174)],
      [int256(-379), int256(320)],
      [int256(-77), int256(391)],
      [int256(465), int256(438)],
      [int256(-490), int256(171)],
      [int256(269), int256(-310)],
      [int256(-394), int256(-22)],
      [int256(-199), int256(-401)],
      [int256(-212), int256(-114)],
      [int256(-418), int256(-375)],
      [int256(-23), int256(90)],
      [int256(258), int256(385)],
      [int256(153), int256(-222)],
      [int256(390), int256(-284)],
      [int256(271), int256(85)],
      [int256(185), int256(475)],
      [int256(-203), int256(329)],
      [int256(-311), int256(264)],
      [int256(-335), int256(-458)],
      [int256(-150), int256(-132)],
      [int256(391), int256(241)]
    ];

    int256[100] memory results = [
      int256(9),
      int256(2),
      int256(8),
      int256(6),
      int256(14),
      int256(13),
      int256(9),
      int256(13),
      int256(-1),
      int256(5),
      int256(4),
      int256(7),
      int256(11),
      int256(11),
      int256(6),
      int256(3),
      int256(2),
      int256(14),
      int256(15),
      int256(13),
      int256(7),
      int256(-1),
      int256(11),
      int256(14),
      int256(9),
      int256(11),
      int256(8),
      int256(10),
      int256(4),
      int256(8),
      int256(2),
      int256(10),
      int256(13),
      int256(12),
      int256(12),
      int256(10),
      int256(7),
      int256(-1),
      int256(11),
      int256(12),
      int256(9),
      int256(12),
      int256(11),
      int256(7),
      int256(8),
      int256(7),
      int256(9),
      int256(8),
      int256(13),
      int256(10),
      int256(5),
      int256(2),
      int256(13),
      int256(7),
      int256(8),
      int256(7),
      int256(5),
      int256(5),
      int256(11),
      int256(9),
      int256(3),
      int256(9),
      int256(5),
      int256(11),
      int256(5),
      int256(4),
      int256(1),
      int256(6),
      int256(9),
      int256(9),
      int256(8),
      int256(12),
      int256(9),
      int256(9),
      int256(15),
      int256(14),
      int256(6),
      int256(9),
      int256(3),
      int256(15),
      int256(6),
      int256(3),
      int256(8),
      int256(0),
      int256(6),
      int256(7),
      int256(8),
      int256(5),
      int256(9),
      int256(11),
      int256(5),
      int256(10),
      int256(10),
      int256(12),
      int256(11),
      int256(9),
      int256(16),
      int256(6),
      int256(5),
      int256(2)
    ];

    CubicNoiseConfig memory config = CubicNoiseConfig(1000, 64, 16, 256, 256);

    for (uint256 i; i < 100; i++) {
      int256[2] memory coord = coords[i];
      assertEq(LibNoise.cubicNoiseSample2(config, coord[0], coord[1]), results[i]);
    }
  }
}
