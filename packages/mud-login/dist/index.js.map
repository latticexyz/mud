{"version":3,"sources":["../src/ui/Button.tsx","../src/icons/PendingIcon.tsx","../src/useLoginDialog.ts","../src/LoginDialog.tsx","../src/AppSignerDialogContent.tsx","../src/useAppSigner.ts","../src/ui/ModalContent.tsx","../src/icons/IconSVG.tsx","../src/icons/CloseIcon.tsx","../src/GasAllowanceDialogContent.tsx","../src/Context.tsx","../src/useGasTankBalance.ts","../src/getRecord.ts","../src/encodeKeyTuple.ts","../src/AccountDelegationDialogContent.tsx","../src/useAppAccountClient.ts","../src/useAppAccount.ts","../src/common.ts","../src/getUserBalanceSlot.ts","../src/getStaticDataLocation.ts","../src/getEntryPointDepositSlot.ts","../src/callWithSignature.ts","../src/signCall.tsx","../src/useHasDelegation.ts","../src/GasSpenderDialogContent.tsx","../src/useIsGasSpender.ts","../src/ConnectedChainDialogContent.tsx","../src/ui/Modal.tsx","../src/Shadow.tsx","../src/useLoginRequirements.ts","../src/LoginButton.tsx"],"sourcesContent":["import { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nimport { PendingIcon } from \"../icons/PendingIcon\";\n\ntype ButtonClassNameOptions = {\n  variant?: \"primary\" | \"secondary\" | \"tertiary\";\n};\n\nconst buttonClassName = ({ variant = \"primary\" }: ButtonClassNameOptions = {}) =>\n  twMerge(\n    \"self-center text-sm font-medium px-4 py-2 border border-transparent inline-flex justify-center\",\n    {\n      primary:\n        \"text-white bg-orange-500 hover:bg-orange-400 active:bg-orange-600 disabled:bg-neutral-400 disabled:text-neutral-200\",\n      secondary:\n        \"text-white disabled:text-neutral-400 bg-neutral-600 hover:bg-neutral-500 active:bg-neutral-700 border-white/20\",\n      tertiary: \"text-white disabled:text-neutral-400 border-white/20 hover:bg-white/10 active:bg-black/10\",\n    }[variant],\n  );\n\ntype Props = {\n  children: React.ReactNode;\n  pending?: boolean;\n  variant?: ButtonClassNameOptions[\"variant\"];\n};\n\ntype ButtonProps = Props & DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\nexport const Button = ({ pending, variant, type, className, children, disabled, ...props }: ButtonProps) => {\n  return (\n    <button\n      type={type || \"button\"}\n      className={twMerge(buttonClassName({ variant }), className)}\n      disabled={disabled || pending}\n      {...props}\n    >\n      {children}\n      {pending ? (\n        <span className=\"self-center ml-2 -mr-1\">\n          <PendingIcon />\n        </span>\n      ) : null}\n    </button>\n  );\n};\n","import { DetailedHTMLProps, SVGAttributes } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport type Props = DetailedHTMLProps<SVGAttributes<SVGSVGElement>, SVGSVGElement>;\n\nexport function PendingIcon({ className, ...props }: Props) {\n  return (\n    <svg\n      className={twMerge(\"-my-[0.125em] h-[1.25em] w-[1.25em] animate-spin\", className)}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      {...props}\n    >\n      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n}\n","import { useConnectModal } from \"@rainbow-me/rainbowkit\";\nimport { useCallback, useMemo } from \"react\";\nimport { useStore } from \"zustand\";\nimport { createStore } from \"zustand/vanilla\";\n\nconst store = createStore(() => ({ open: false }));\n\nexport type UseLoginDialogResult = {\n  readonly openConnectModal: (() => void) | undefined;\n  readonly connectPending: boolean;\n  readonly loginDialogOpen: boolean;\n  readonly openLoginDialog: () => void;\n  readonly closeLoginDialog: () => void;\n  readonly toggleLoginDialog: (open: boolean) => void;\n};\n\nexport function useLoginDialog(): UseLoginDialogResult {\n  const { openConnectModal, connectModalOpen } = useConnectModal();\n  const connectPending = !openConnectModal || connectModalOpen;\n\n  const loginDialogOpen = useStore(store, (state) => state.open);\n\n  const openLoginDialog = useCallback(() => {\n    store.setState({ open: true });\n  }, []);\n\n  const closeLoginDialog = useCallback(() => {\n    store.setState({ open: false });\n  }, []);\n\n  const toggleLoginDialog = useCallback((open: boolean) => {\n    store.setState({ open });\n  }, []);\n\n  return useMemo(\n    () => ({\n      openConnectModal,\n      connectPending,\n      loginDialogOpen,\n      openLoginDialog,\n      closeLoginDialog,\n      toggleLoginDialog,\n    }),\n    [closeLoginDialog, connectPending, loginDialogOpen, openConnectModal, openLoginDialog, toggleLoginDialog],\n  );\n}\n","import { useMemo } from \"react\";\nimport { assertExhaustive } from \"@latticexyz/common/utils\";\nimport { AppSignerDialogContent } from \"./AppSignerDialogContent\";\nimport { GasAllowanceDialogContent } from \"./GasAllowanceDialogContent\";\nimport { AccountDelegationDialogContent } from \"./AccountDelegationDialogContent\";\nimport { LoginRequirement } from \"./common\";\nimport { GasSpenderDialogContent } from \"./GasSpenderDialogContent\";\nimport { ConnectedChainDialogContent } from \"./ConnectedChainDialogContent\";\nimport { Modal, Props as ModalProps } from \"./ui/Modal\";\n\nexport type Props = Pick<ModalProps, \"open\" | \"onOpenChange\" | \"trigger\"> & {\n  requirement: LoginRequirement;\n};\n\nexport function LoginDialog({ requirement, ...dialogProps }: Props) {\n  const content = useMemo(() => {\n    switch (requirement) {\n      case \"connectedWallet\":\n        // TODO\n        return <>Connect wallet</>;\n      case \"connectedChain\":\n        return <ConnectedChainDialogContent />;\n      case \"appSigner\":\n        return <AppSignerDialogContent />;\n      case \"gasAllowance\":\n        return <GasAllowanceDialogContent />;\n      case \"gasSpender\":\n        return <GasSpenderDialogContent />;\n      case \"accountDelegation\":\n        return <AccountDelegationDialogContent />;\n      default:\n        return assertExhaustive(requirement);\n    }\n  }, [requirement]);\n\n  return <Modal {...dialogProps}>{content}</Modal>;\n}\n","import * as Dialog from \"@radix-ui/react-dialog\";\nimport { keccak256 } from \"viem\";\nimport { useSignMessage } from \"wagmi\";\nimport { useAppSigner } from \"./useAppSigner\";\nimport { Button } from \"./ui/Button\";\nimport { ModalContent } from \"./ui/ModalContent\";\n\nexport function AppSignerDialogContent() {\n  const [, setAppSigner] = useAppSigner();\n  const { signMessageAsync, isPending } = useSignMessage();\n\n  return (\n    <ModalContent title=\"Generate app signer\" description=\"TODO\">\n      <div className=\"flex gap-3 justify-end\">\n        <Dialog.Close asChild>\n          <Button variant=\"tertiary\">Cancel</Button>\n        </Dialog.Close>\n\n        <Button\n          variant=\"secondary\"\n          pending={isPending}\n          onClick={async () => {\n            const signature = await signMessageAsync({\n              // TODO: improve message, include location.origin\n              message: \"Create app-signer\",\n            });\n            setAppSigner(keccak256(signature));\n          }}\n        >\n          Generate signer\n        </Button>\n      </div>\n    </ModalContent>\n  );\n}\n","import { PrivateKeyAccount, Hex } from \"viem\";\nimport { useLocalStorage } from \"usehooks-ts\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { useMemo } from \"react\";\n\nexport const storageKey = \"mud:appSigner:privateKey\";\n\nexport function useAppSigner(): [PrivateKeyAccount | undefined, (privateKey: Hex) => void] {\n  const [privateKey, setPrivateKey] = useLocalStorage<Hex | undefined>(storageKey, undefined);\n  return useMemo(\n    () => [privateKey ? privateKeyToAccount(privateKey) : undefined, setPrivateKey],\n    [privateKey, setPrivateKey],\n  );\n}\n","import { ReactNode } from \"react\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport { CloseIcon } from \"../icons/CloseIcon\";\n\nexport type Props = {\n  title?: ReactNode;\n  description?: ReactNode;\n  children?: ReactNode;\n};\n\nexport function ModalContent({ title, description, children }: Props) {\n  return (\n    <Dialog.Content className=\"flex w-[28rem] flex-col gap-6 bg-neutral-800 text-neutral-400 border border-white/20 p-6 outline-none\">\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex items-start gap-4\">\n          <Dialog.Title className=\"flex-grow font-mono text-xl uppercase text-white\">{title}</Dialog.Title>\n          <Dialog.Close\n            className=\"-m-2 flex-shrink-0 p-2 text-xl text-white/40 transition hover:text-white\"\n            title=\"Close\"\n          >\n            <CloseIcon />\n          </Dialog.Close>\n        </div>\n        {description ? <Dialog.Description className=\"text-sm text-white\">{description}</Dialog.Description> : null}\n      </div>\n      {children}\n    </Dialog.Content>\n  );\n}\n","import { SVGProps } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport type Props = SVGProps<SVGSVGElement>;\n\nexport function IconSVG({ className, children, ...props }: Props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className={twMerge(\"h-[1em] w-[1em]\", className)}\n      {...props}\n    >\n      {children}\n    </svg>\n  );\n}\n","/* eslint-disable max-len */\nimport { IconSVG, Props } from \"./IconSVG\";\n\nexport function CloseIcon(props: Props) {\n  return (\n    <IconSVG {...props}>\n      <path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" />\n    </IconSVG>\n  );\n}\n","import { parseEther } from \"viem\";\nimport { useAccount, useConfig, useWriteContract } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport GasTankAbi from \"@latticexyz/gas-tank/out/IWorld.sol/IWorld.abi.json\";\nimport { getGasTankBalanceQueryKey } from \"./useGasTankBalance\";\nimport { waitForTransactionReceipt } from \"wagmi/actions\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"./ui/Button\";\nimport { ModalContent } from \"./ui/ModalContent\";\n\nexport function GasAllowanceDialogContent() {\n  const queryClient = useQueryClient();\n  const wagmiConfig = useConfig();\n  const { chainId, gasTankAddress } = useLoginConfig();\n  const userAccount = useAccount();\n  const userAccountAddress = userAccount.address;\n  const { writeContractAsync, isPending, error } = useWriteContract({\n    mutation: {\n      onSuccess: async (hash) => {\n        const receipt = await waitForTransactionReceipt(wagmiConfig, { hash });\n        if (receipt.status === \"success\") {\n          queryClient.invalidateQueries({\n            queryKey: getGasTankBalanceQueryKey({ chainId, gasTankAddress, userAccountAddress }),\n          });\n        }\n      },\n    },\n  });\n\n  return (\n    <ModalContent title=\"Fund Redstone balance\" description=\"TODO\">\n      {error ? <div>{String(error)}</div> : null}\n\n      <div className=\"flex flex-col gap-2\">\n        <Button\n          variant=\"secondary\"\n          pending={!userAccountAddress || isPending}\n          onClick={async () => {\n            if (!userAccountAddress) return;\n\n            await writeContractAsync({\n              chainId,\n              address: gasTankAddress,\n              abi: GasTankAbi,\n              functionName: \"depositTo\",\n              args: [userAccountAddress],\n              value: parseEther(\"0.01\"),\n            });\n          }}\n        >\n          Deposit to gas tank\n        </Button>\n        <Button variant=\"secondary\" disabled>\n          Relay.link\n        </Button>\n        <Button variant=\"secondary\" disabled>\n          Redstone ETH\n        </Button>\n      </div>\n    </ModalContent>\n  );\n}\n","import { createContext, useContext, type ReactNode } from \"react\";\nimport { MUDLoginConfig } from \"./common\";\n\n/** @internal */\nconst Context = createContext<MUDLoginConfig | null>(null);\n\nexport type Props = {\n  config: MUDLoginConfig;\n  children: ReactNode;\n};\n\nexport function MUDLoginProvider({ config, children }: Props) {\n  const currentConfig = useContext(Context);\n  if (currentConfig) throw new Error(\"`MUDLoginProvider` can only be used once.\");\n  return <Context.Provider value={config}>{children}</Context.Provider>;\n}\n\nexport function useLoginConfig(): MUDLoginConfig {\n  const config = useContext(Context);\n  if (!config) throw new Error(\"`useLoginConfig` be used within a `MUDLoginProvider`.\");\n  return config;\n}\n","import { useAccount, usePublicClient } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getRecord } from \"./getRecord\";\nimport { Address } from \"abitype\";\nimport { PublicClient } from \"viem\";\nimport gasTankConfig from \"@latticexyz/gas-tank/mud.config\";\n\nexport type GetGasTankBalanceOptions = {\n  publicClient: PublicClient;\n  worldAddress: Address;\n  userAccountAddress: Address;\n};\n\nexport function getGasTankBalanceQueryKey(data: {\n  chainId: number;\n  gasTankAddress: Address;\n  userAccountAddress: Address | undefined;\n}) {\n  return [\"mud:getGasTankBalance\", data] as const;\n}\n\nexport async function getGasTankBalance({\n  publicClient,\n  worldAddress,\n  userAccountAddress,\n}: GetGasTankBalanceOptions): Promise<bigint> {\n  const record = await getRecord(publicClient, {\n    storeAddress: worldAddress,\n    table: gasTankConfig.tables.UserBalances,\n    key: {\n      userAccount: userAccountAddress,\n    },\n    blockTag: \"pending\",\n  });\n  return record.balance;\n}\n\nexport function useGasTankBalance(): bigint | undefined {\n  const { chainId, gasTankAddress } = useLoginConfig();\n  const publicClient = usePublicClient({ chainId });\n\n  const userAccount = useAccount();\n  const userAccountAddress = userAccount.address;\n\n  const queryKey = getGasTankBalanceQueryKey({ chainId, gasTankAddress, userAccountAddress });\n\n  const result = useQuery(\n    publicClient && gasTankAddress && userAccountAddress\n      ? {\n          queryKey,\n          queryFn: () =>\n            getGasTankBalance({\n              publicClient,\n              worldAddress: gasTankAddress,\n              userAccountAddress,\n            }),\n        }\n      : {\n          queryKey,\n          enabled: false,\n        },\n  );\n\n  return result.data;\n}\n","import { Address, PublicClient } from \"viem\";\nimport { Table } from \"@latticexyz/config\";\nimport { decodeValueArgs, getKeySchema, getSchemaTypes, getValueSchema } from \"@latticexyz/protocol-parser/internal\";\nimport { readContract } from \"viem/actions\";\nimport IStoreReadAbi from \"@latticexyz/store/out/IStoreRead.sol/IStoreRead.abi.json\";\nimport { schemaToPrimitives } from \"./common\";\nimport { encodeKeyTuple } from \"./encodeKeyTuple\";\n\nexport type GetRecordOptions<table extends Table> = {\n  storeAddress: Address;\n  table: table;\n  key: schemaToPrimitives<getKeySchema<table>>;\n  blockTag?: \"latest\" | \"pending\";\n};\n\nexport async function getRecord<table extends Table>(\n  publicClient: PublicClient,\n  { storeAddress, table, key, blockTag }: GetRecordOptions<table>,\n): Promise<schemaToPrimitives<table[\"schema\"]>> {\n  const keyTuple = encodeKeyTuple(getKeySchema(table), key);\n\n  const [staticData, encodedLengths, dynamicData] = await readContract(publicClient, {\n    address: storeAddress,\n    abi: IStoreReadAbi,\n    functionName: \"getRecord\",\n    args: [table.tableId, keyTuple],\n    blockTag,\n  });\n\n  return {\n    ...key,\n    ...decodeValueArgs(getSchemaTypes(getValueSchema(table)), { staticData, encodedLengths, dynamicData }),\n  };\n}\n","import { Hex, encodeAbiParameters } from \"viem\";\nimport { Schema } from \"@latticexyz/config\";\nimport { schemaToPrimitives } from \"./common\";\n\nexport function encodeKeyTuple<keySchema extends Schema, key extends schemaToPrimitives<keySchema>>(\n  keySchema: keySchema,\n  key: key,\n): Hex[] {\n  return Object.keys(keySchema).map((name) => encodeAbiParameters([keySchema[name]], [key[name]]));\n}\n","import * as Dialog from \"@radix-ui/react-dialog\";\nimport { useAppAccountClient } from \"./useAppAccountClient\";\nimport { usePublicClient, useWalletClient } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { encodeFunctionData } from \"viem\";\nimport { waitForTransactionReceipt } from \"viem/actions\";\nimport IBaseWorldAbi from \"@latticexyz/world/out/IBaseWorld.sol/IBaseWorld.abi.json\";\nimport { unlimitedDelegationControlId } from \"./common\";\nimport { resourceToHex } from \"@latticexyz/common\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { callWithSignature } from \"./callWithSignature\";\nimport { hasDelegationQueryKey } from \"./useHasDelegation\";\nimport { Button } from \"./ui/Button\";\nimport { ModalContent } from \"./ui/ModalContent\";\n\nexport function AccountDelegationDialogContent() {\n  const queryClient = useQueryClient();\n  const { chainId, worldAddress } = useLoginConfig();\n  const publicClient = usePublicClient({ chainId });\n  const { data: userAccountClient } = useWalletClient({ chainId });\n  const appAccountClient = useAppAccountClient();\n\n  const { mutate, isPending, error } = useMutation({\n    mutationFn: async () => {\n      if (!publicClient) throw new Error(\"Public client not ready. Not connected?\");\n      if (!userAccountClient) throw new Error(\"Wallet client not ready. Not connected?\");\n      if (!appAccountClient) throw new Error(\"App account client not ready.\");\n\n      console.log(\"registerDelegation\");\n      const hash = await callWithSignature({\n        worldAddress,\n        systemId: resourceToHex({ type: \"system\", namespace: \"\", name: \"Registration\" }),\n        callData: encodeFunctionData({\n          abi: IBaseWorldAbi,\n          functionName: \"registerDelegation\",\n          args: [appAccountClient.account.address, unlimitedDelegationControlId, \"0x\"],\n        }),\n        publicClient,\n        userAccountClient,\n        appAccountClient,\n      });\n      console.log(\"registerDelegation tx\", hash);\n\n      const receipt = await waitForTransactionReceipt(publicClient, { hash });\n      console.log(\"registerDelegation receipt\", receipt);\n      if (receipt.status === \"reverted\") {\n        console.error(\"Failed to register delegation.\", receipt);\n        throw new Error(\"Failed to register delegation.\");\n      }\n\n      queryClient.invalidateQueries({\n        queryKey: hasDelegationQueryKey({\n          chainId,\n          worldAddress,\n          userAccountAddress: userAccountClient.account.address,\n          appAccountAddress: appAccountClient.account.address,\n        }),\n      });\n    },\n  });\n\n  return (\n    <ModalContent title=\"Delegation\" description=\"Delegation description\">\n      {error ? <>Error: {String(error)}</> : null}\n\n      <div className=\"flex gap-3 justify-end\">\n        <Dialog.Close asChild>\n          <Button variant=\"tertiary\">Cancel</Button>\n        </Dialog.Close>\n        <Button variant=\"secondary\" pending={isPending} onClick={() => mutate()}>\n          Set up delegation\n        </Button>\n      </div>\n    </ModalContent>\n  );\n}\n","import { useMemo } from \"react\";\nimport { useAccount, usePublicClient } from \"wagmi\";\nimport { http, maxUint256, toHex } from \"viem\";\nimport { callFrom } from \"@latticexyz/world/internal\";\nimport { createSmartAccountClient } from \"permissionless\";\nimport { createPimlicoBundlerClient } from \"permissionless/clients/pimlico\";\nimport { call, getTransactionCount } from \"viem/actions\";\nimport { useLoginConfig } from \"./Context\";\nimport { useAppSigner } from \"./useAppSigner\";\nimport { useAppAccount } from \"./useAppAccount\";\nimport { AppAccountClient, entryPointAddress } from \"./common\";\nimport { getUserBalanceSlot } from \"./getUserBalanceSlot\";\nimport { getEntryPointDepositSlot } from \"./getEntryPointDepositSlot\";\n\nexport function useAppAccountClient(): AppAccountClient | undefined {\n  const [appSignerAccount] = useAppSigner();\n  const { chainId, worldAddress, gasTankAddress } = useLoginConfig();\n  const { address: userAddress } = useAccount();\n  const publicClient = usePublicClient({ chainId });\n  const { data: appAccount } = useAppAccount({ publicClient, appSignerAccount });\n\n  return useMemo(() => {\n    if (!appSignerAccount) return;\n    if (!userAddress) return;\n    if (!publicClient) return;\n    if (!appAccount) return;\n\n    const pimlicoBundlerClient = createPimlicoBundlerClient({\n      chain: publicClient.chain,\n      transport: http(\"http://127.0.0.1:4337\"),\n      entryPoint: entryPointAddress,\n    });\n\n    const appAccountClient = createSmartAccountClient({\n      chain: publicClient.chain,\n      account: appAccount,\n      bundlerTransport: http(\"http://127.0.0.1:4337\"),\n      middleware: {\n        sponsorUserOperation: async ({ userOperation }) => {\n          const gasEstimates = await pimlicoBundlerClient.estimateUserOperationGas(\n            {\n              userOperation: {\n                ...userOperation,\n                paymaster: gasTankAddress,\n                paymasterData: \"0x\",\n              },\n            },\n            {\n              // Pimlico's gas estimation runs with high gas limits, which can make the estimation fail if\n              // the cost would exceed the user's balance.\n              // We override the user's balance in the paymaster contract and the deposit balance of the\n              // paymaster in the entry point contract to make the gas estimation succeed.\n              [gasTankAddress]: {\n                stateDiff: {\n                  [getUserBalanceSlot(userAddress)]: toHex(maxUint256),\n                },\n              },\n              [entryPointAddress]: {\n                stateDiff: {\n                  [getEntryPointDepositSlot(gasTankAddress)]: toHex(maxUint256),\n                },\n              },\n            },\n          );\n\n          return {\n            paymasterData: \"0x\",\n            paymaster: gasTankAddress,\n            ...gasEstimates,\n          };\n        },\n        gasPrice: async () => (await pimlicoBundlerClient.getUserOperationGasPrice()).fast, // use pimlico bundler to get gas prices\n      },\n    })\n      // TODO: can we replace the below with all publicActions?\n      // .extend(publicActions(publicClient))\n      .extend(() => ({\n        getTransactionCount: (args) => {\n          console.log(\"getTransactionCount, \", args);\n          return getTransactionCount(publicClient, args);\n        },\n        call: (args) => call(publicClient, args),\n      }))\n      // .extend(transactionQueue(publicClient))\n      // .extend(writeObserver({ onWrite: (write) => write$.next(write) }))\n      .extend(\n        callFrom({\n          worldAddress,\n          delegatorAddress: userAddress,\n          publicClient,\n        }),\n      );\n\n    return appAccountClient;\n  }, [appSignerAccount, userAddress, publicClient, appAccount, worldAddress, gasTankAddress]);\n}\n","import { Chain, PrivateKeyAccount, PublicClient, Transport } from \"viem\";\nimport { signerToSimpleSmartAccount } from \"permissionless/accounts\";\nimport { UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport { AppAccount, entryPointAddress, smartAccountFactory } from \"./common\";\n\ntype GetAppAccountOptions = {\n  publicClient: PublicClient<Transport, Chain>;\n  appSignerAccount: PrivateKeyAccount;\n};\n\nasync function getAppAccount({ publicClient, appSignerAccount }: GetAppAccountOptions): Promise<AppAccount> {\n  return await signerToSimpleSmartAccount(publicClient, {\n    entryPoint: entryPointAddress,\n    factoryAddress: smartAccountFactory,\n    signer: appSignerAccount,\n  });\n}\n\nexport function useAppAccount({\n  publicClient,\n  appSignerAccount,\n}: Partial<GetAppAccountOptions>): UseQueryResult<AppAccount> {\n  const queryKey = [\n    \"mud:appAccount\",\n    publicClient?.chain.id,\n    entryPointAddress,\n    smartAccountFactory,\n    appSignerAccount?.address,\n  ] as const;\n\n  return useQuery(\n    publicClient && appSignerAccount\n      ? {\n          queryKey,\n          queryFn: () => getAppAccount({ publicClient, appSignerAccount }),\n          staleTime: Infinity,\n        }\n      : {\n          queryKey,\n          enabled: false,\n        },\n  );\n}\n","import { resourceToHex } from \"@latticexyz/common\";\nimport { Schema } from \"@latticexyz/config\";\nimport { AbiTypeToPrimitiveType } from \"abitype\";\nimport { ENTRYPOINT_ADDRESS_V07, SmartAccountClient } from \"permissionless\";\nimport { SmartAccount } from \"permissionless/accounts\";\nimport { Address, Chain, Transport } from \"viem\";\n\nexport const entryPointAddress = ENTRYPOINT_ADDRESS_V07;\n/**\n * `deposits` storage variable position in the entry point contract,\n * used to override contract state when doing paymaster gas estimation.\n */\nexport const entryPointDepositsSlot = 0n;\n\nexport type AppAccount = SmartAccount<typeof entryPointAddress>;\nexport type AppAccountClient = SmartAccountClient<typeof entryPointAddress, Transport, Chain, AppAccount>;\n\nexport const smartAccountFactory = \"0x91E60e0613810449d098b0b5Ec8b51A0FE8c8985\";\n\nexport type MUDLoginConfig = {\n  chainId: number;\n  worldAddress: Address;\n  gasTankAddress: Address;\n};\n\nexport const loginRequirements = [\n  \"connectedWallet\",\n  \"connectedChain\",\n  \"appSigner\",\n  \"gasAllowance\",\n  \"gasSpender\",\n  \"accountDelegation\",\n] as const;\n\nexport type LoginRequirement = (typeof loginRequirements)[number];\n\nexport const unlimitedDelegationControlId = resourceToHex({ type: \"system\", namespace: \"\", name: \"unlimited\" });\n\nexport type schemaToPrimitives<schema extends Schema> = {\n  readonly [key in keyof schema]: AbiTypeToPrimitiveType<schema[key][\"type\"]>;\n};\n","import { Address } from \"viem\";\nimport gasTankConfig from \"@latticexyz/gas-tank/mud.config\";\nimport { getStaticDataLocation } from \"./getStaticDataLocation\";\nimport { encodeKeyTuple } from \"./encodeKeyTuple\";\nimport { getKeySchema } from \"@latticexyz/protocol-parser/internal\";\n\nexport function getUserBalanceSlot(userAccount: Address) {\n  return getStaticDataLocation(\n    gasTankConfig.tables.UserBalances.tableId,\n    encodeKeyTuple(getKeySchema(gasTankConfig.tables.UserBalances), { userAccount }),\n  );\n}\n","import { Hex, concatHex, hexToBigInt, keccak256, toBytes, toHex } from \"viem\";\n\n// TODO: move this util to MUD (equivalent of StoreCore._getStaticDataLocation)\nconst SLOT = hexToBigInt(keccak256(toBytes(\"mud.store\")));\nexport function getStaticDataLocation(tableId: Hex, keyTuple: Hex[]): Hex {\n  return toHex(SLOT ^ hexToBigInt(keccak256(concatHex([tableId, ...keyTuple]))));\n}\n","import { Address, Hex, encodeAbiParameters, keccak256 } from \"viem\";\nimport { entryPointDepositsSlot } from \"./common\";\n\nexport function getEntryPointDepositSlot(gasTankAddress: Address): Hex {\n  return keccak256(\n    encodeAbiParameters([{ type: \"address\" }, { type: \"uint256\" }], [gasTankAddress, entryPointDepositsSlot]),\n  );\n}\n","import { Address } from \"abitype\";\nimport { Hex, WalletClient, Transport, Chain, Account, PublicClient } from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { AppAccountClient } from \"./common\";\nimport { getRecord } from \"./getRecord\";\nimport { signCall } from \"./signCall\";\nimport modulesConfig from \"@latticexyz/world-modules/internal/mud.config\";\nimport CallWithSignatureAbi from \"@latticexyz/world-modules/out/IUnstable_CallWithSignatureSystem.sol/IUnstable_CallWithSignatureSystem.abi.json\";\n\nexport type CallWithSignatureOptions = {\n  userAccountClient: WalletClient<Transport, Chain, Account>;\n  worldAddress: Address;\n  systemId: Hex;\n  callData: Hex;\n  publicClient: PublicClient<Transport, Chain>;\n  appAccountClient: AppAccountClient;\n  nonce?: bigint | null;\n};\n\nexport async function callWithSignature({\n  userAccountClient,\n  worldAddress,\n  systemId,\n  callData,\n  publicClient,\n  appAccountClient,\n  nonce: initialNonce,\n}: CallWithSignatureOptions) {\n  // TODO: use nonce manager? need to be able to pass in method to \"get current nonce\" and also \"should reset nonce\" (unclear what errors are thrown for bad nonces here)\n  const nonce =\n    initialNonce ??\n    (\n      await getRecord(publicClient, {\n        storeAddress: worldAddress,\n        table: modulesConfig.tables.CallWithSignatureNonces,\n        key: { signer: userAccountClient.account.address },\n        blockTag: \"pending\",\n      })\n    ).nonce;\n\n  const signature = await signCall({ worldAddress, userAccountClient, systemId, callData, nonce });\n\n  return writeContract(appAccountClient, {\n    address: worldAddress,\n    abi: CallWithSignatureAbi,\n    functionName: \"callWithSignature\",\n    args: [userAccountClient.account.address, systemId, callData, signature],\n  });\n}\n","import { Account, Address, Chain, Hex, Transport, WalletClient } from \"viem\";\nimport { signTypedData } from \"viem/actions\";\nimport { callWithSignatureTypes } from \"@latticexyz/world/internal\";\n\nexport type SignCallOptions = {\n  userAccountClient: WalletClient<Transport, Chain, Account>;\n  worldAddress: Address;\n  systemId: Hex;\n  callData: Hex;\n  nonce: bigint;\n};\n\nexport async function signCall({ userAccountClient, worldAddress, systemId, callData, nonce }: SignCallOptions) {\n  return await signTypedData(userAccountClient, {\n    account: userAccountClient.account,\n    domain: {\n      chainId: userAccountClient.chain.id,\n      verifyingContract: worldAddress,\n    },\n    types: callWithSignatureTypes,\n    primaryType: \"Call\",\n    message: {\n      signer: userAccountClient.account.address,\n      systemId,\n      callData,\n      nonce,\n    },\n  });\n}\n","import { useAccount, usePublicClient } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAppAccount } from \"./useAppAccount\";\nimport { useAppSigner } from \"./useAppSigner\";\nimport { getRecord } from \"./getRecord\";\nimport { Address } from \"abitype\";\nimport { PublicClient } from \"viem\";\nimport { unlimitedDelegationControlId } from \"./common\";\nimport worldConfig from \"@latticexyz/world/mud.config\";\n\nexport type HasDelegationOptions = {\n  publicClient: PublicClient;\n  worldAddress: Address;\n  userAccountAddress: Address;\n  appAccountAddress: Address;\n};\n\nexport function hasDelegationQueryKey(data: {\n  chainId: number;\n  worldAddress: Address;\n  userAccountAddress: Address | undefined;\n  appAccountAddress: Address | undefined;\n}) {\n  return [\"mud:hasDelegation\", data] as const;\n}\n\nexport async function hasDelegation({\n  publicClient,\n  worldAddress,\n  userAccountAddress,\n  appAccountAddress,\n}: HasDelegationOptions): Promise<boolean> {\n  const record = await getRecord(publicClient, {\n    storeAddress: worldAddress,\n    table: worldConfig.tables.world__UserDelegationControl,\n    key: {\n      delegator: userAccountAddress,\n      delegatee: appAccountAddress,\n    },\n    blockTag: \"pending\",\n  });\n  return record.delegationControlId === unlimitedDelegationControlId;\n}\n\nexport function useHasDelegation(): boolean | undefined {\n  const { chainId, worldAddress } = useLoginConfig();\n  const publicClient = usePublicClient({ chainId });\n  const userAccount = useAccount();\n  const [appSignerAccount] = useAppSigner();\n  const appAccount = useAppAccount({ publicClient, appSignerAccount });\n\n  const userAccountAddress = userAccount.address;\n  const appAccountAddress = appAccount.data?.address;\n\n  const queryKey = hasDelegationQueryKey({\n    chainId,\n    worldAddress,\n    userAccountAddress,\n    appAccountAddress,\n  });\n\n  const result = useQuery(\n    publicClient && worldAddress && userAccountAddress && appAccountAddress\n      ? {\n          queryKey,\n          queryFn: () =>\n            hasDelegation({\n              publicClient,\n              worldAddress,\n              userAccountAddress,\n              appAccountAddress,\n            }),\n          staleTime: 1000 * 60 * 5,\n        }\n      : {\n          queryKey,\n          enabled: false,\n        },\n  );\n\n  return result.data;\n}\n","import * as Dialog from \"@radix-ui/react-dialog\";\nimport { useAppAccountClient } from \"./useAppAccountClient\";\nimport { usePublicClient, useWalletClient } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { encodeFunctionData } from \"viem\";\nimport { waitForTransactionReceipt } from \"viem/actions\";\nimport { resourceToHex } from \"@latticexyz/common\";\nimport GasTankAbi from \"@latticexyz/gas-tank/out/IWorld.sol/IWorld.abi.json\";\nimport { callWithSignature } from \"./callWithSignature\";\nimport { isGasSpenderQueryKey } from \"./useIsGasSpender\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"./ui/Button\";\nimport { ModalContent } from \"./ui/ModalContent\";\n\nexport function GasSpenderDialogContent() {\n  const queryClient = useQueryClient();\n  const { chainId, gasTankAddress } = useLoginConfig();\n  const publicClient = usePublicClient({ chainId });\n  const { data: userAccountClient } = useWalletClient({ chainId });\n  const appAccountClient = useAppAccountClient();\n\n  const { mutate, isPending, error } = useMutation({\n    mutationFn: async () => {\n      if (!publicClient) throw new Error(\"Public client not ready. Not connected?\");\n      if (!userAccountClient) throw new Error(\"Wallet client not ready. Not connected?\");\n      if (!appAccountClient) throw new Error(\"App account client not ready.\");\n\n      console.log(\"registerSpender\");\n      const hash = await callWithSignature({\n        worldAddress: gasTankAddress,\n        systemId: resourceToHex({ type: \"system\", namespace: \"\", name: \"PaymasterSystem\" }),\n        callData: encodeFunctionData({\n          abi: GasTankAbi,\n          functionName: \"registerSpender\",\n          args: [appAccountClient.account.address],\n        }),\n        publicClient,\n        userAccountClient,\n        appAccountClient,\n      });\n      console.log(\"registerSpender tx\", hash);\n\n      const receipt = await waitForTransactionReceipt(publicClient, { hash });\n      console.log(\"registerSpender receipt\", receipt);\n      if (receipt.status === \"reverted\") {\n        console.error(\"Failed to register spender.\", receipt);\n        throw new Error(\"Failed to register spender.\");\n      }\n\n      // invalidating this cache will cause the balance to be fetched again\n      // but this could fail for load balanced RPCs that aren't fully in sync\n      // where the one we got the receipt one is ahead of the one that will\n      // refetch the balance\n      // TODO: figure out a better fix? maybe just assume we're good to go?\n      queryClient.invalidateQueries({\n        queryKey: isGasSpenderQueryKey({\n          chainId,\n          gasTankAddress,\n          userAccountAddress: userAccountClient.account.address,\n          appAccountAddress: appAccountClient.account.address,\n        }),\n      });\n    },\n  });\n\n  return (\n    <ModalContent title=\"Gas spender\" description=\"TODO\">\n      {error ? <>Error: {String(error)}</> : null}\n\n      <div className=\"flex gap-3 justify-end\">\n        <Dialog.Close asChild>\n          <Button variant=\"tertiary\">Cancel</Button>\n        </Dialog.Close>\n        <Button variant=\"secondary\" pending={isPending} onClick={() => mutate()}>\n          Set up spender\n        </Button>\n      </div>\n    </ModalContent>\n  );\n}\n","import { useAccount, usePublicClient } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getRecord } from \"./getRecord\";\nimport { Address } from \"abitype\";\nimport { PublicClient } from \"viem\";\nimport gasTankConfig from \"@latticexyz/gas-tank/mud.config\";\nimport { useAppSigner } from \"./useAppSigner\";\nimport { useAppAccount } from \"./useAppAccount\";\n\nexport type IsGasSpenderOptions = {\n  publicClient: PublicClient;\n  gasTankAddress: Address;\n  userAccountAddress: Address;\n  appAccountAddress: Address;\n};\n\nexport function isGasSpenderQueryKey(data: {\n  chainId: number;\n  gasTankAddress: Address;\n  userAccountAddress: Address | undefined;\n  appAccountAddress: Address | undefined;\n}) {\n  return [\"mud:isGasSpender\", data] as const;\n}\n\nexport async function isGasSpender({\n  publicClient,\n  gasTankAddress,\n  userAccountAddress,\n  appAccountAddress,\n}: IsGasSpenderOptions): Promise<boolean> {\n  const record = await getRecord(publicClient, {\n    storeAddress: gasTankAddress,\n    table: gasTankConfig.tables.Spender,\n    key: {\n      spender: appAccountAddress,\n    },\n    blockTag: \"pending\",\n  });\n  return record.userAccount === userAccountAddress;\n}\n\nexport function useIsGasSpender(): boolean | undefined {\n  const { chainId, gasTankAddress } = useLoginConfig();\n  const publicClient = usePublicClient({ chainId });\n\n  const userAccount = useAccount();\n  const userAccountAddress = userAccount.address;\n\n  const [appSignerAccount] = useAppSigner();\n  const appAccount = useAppAccount({ publicClient, appSignerAccount });\n  const appAccountAddress = appAccount.data?.address;\n\n  const queryKey = isGasSpenderQueryKey({ chainId, gasTankAddress, userAccountAddress, appAccountAddress });\n\n  const result = useQuery(\n    publicClient && gasTankAddress && userAccountAddress && appAccountAddress\n      ? {\n          queryKey,\n          queryFn: () =>\n            isGasSpender({\n              publicClient,\n              gasTankAddress,\n              userAccountAddress,\n              appAccountAddress,\n            }),\n        }\n      : {\n          queryKey,\n          enabled: false,\n        },\n  );\n\n  return result.data;\n}\n","import * as Dialog from \"@radix-ui/react-dialog\";\nimport { useSwitchChain } from \"wagmi\";\nimport { useLoginConfig } from \"./Context\";\nimport { Button } from \"./ui/Button\";\nimport { ModalContent } from \"./ui/ModalContent\";\n\nexport function ConnectedChainDialogContent() {\n  const { chainId } = useLoginConfig();\n  const { switchChain, isPending, error } = useSwitchChain();\n\n  // TODO: prompt user to add chain if missing\n\n  return (\n    <ModalContent title=\"Switch chain\" description=\"Switch chain to login\">\n      {error ? <>Error: {String(error)}</> : null}\n\n      <div className=\"flex gap-3 justify-end\">\n        <Dialog.Close>\n          <Button variant=\"tertiary\">Cancel</Button>\n        </Dialog.Close>\n        <Button variant=\"secondary\" pending={isPending} onClick={() => switchChain({ chainId })}>\n          Switch chain\n        </Button>\n      </div>\n    </ModalContent>\n  );\n}\n","import { ReactNode } from \"react\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport { Shadow } from \"../Shadow\";\n\nexport type Props = {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  trigger?: ReactNode;\n  children: ReactNode;\n};\n\nexport function Modal({ open, onOpenChange, trigger, children }: Props) {\n  return (\n    <Dialog.Root open={open} onOpenChange={onOpenChange}>\n      {trigger ? <Dialog.Trigger asChild>{trigger}</Dialog.Trigger> : null}\n      <Dialog.Portal>\n        {/* This is intentionally wrapped in an empty fragment to avoid React errors related to Radix portals. Maybe fixable by using forwardRef in Shadow. */}\n        <>\n          <Shadow>\n            {/**\n             * This intentionally does not use `Dialog.Overlay` due to an issue it causes with scrolling the modal contents.\n             * See https://github.com/radix-ui/primitives/issues/1159#issuecomment-1105320294\n             */}\n            <div className=\"bg-neutral-950/60 animate-in fade-in fixed inset-0 grid place-items-center overflow-y-auto p-4\">\n              {children}\n            </div>\n          </Shadow>\n        </>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n}\n","import { ReactNode, useEffect, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport css from \"tailwindcss/tailwind.css?inline\";\n\nexport type Props = {\n  children: ReactNode;\n};\n\nexport function Shadow({ children }: Props) {\n  const containerRef = useRef<HTMLSpanElement | null>(null);\n  const [shadowRoot, setShadowRoot] = useState<ShadowRoot | null>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const root = container.attachShadow({ mode: \"open\", delegatesFocus: true });\n    setShadowRoot(root);\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync(css);\n    root.adoptedStyleSheets = [sheet];\n  }, []);\n\n  return (\n    <span ref={containerRef} style={{ display: \"unset\", outline: \"none\" }}>\n      {shadowRoot ? ReactDOM.createPortal(children, shadowRoot) : null}\n    </span>\n  );\n}\n","import { useAccount } from \"wagmi\";\nimport { LoginRequirement, loginRequirements } from \"./common\";\nimport { useAppSigner } from \"./useAppSigner\";\nimport { useHasDelegation } from \"./useHasDelegation\";\nimport { useMemo } from \"react\";\nimport { useGasTankBalance } from \"./useGasTankBalance\";\nimport { useIsGasSpender } from \"./useIsGasSpender\";\nimport { useLoginConfig } from \"./Context\";\n\nexport type UseLoginRequirementsResult = {\n  readonly requirement: LoginRequirement | null;\n  readonly requirements: readonly LoginRequirement[];\n};\n\nexport function useLoginRequirements(): UseLoginRequirementsResult {\n  const { chainId } = useLoginConfig();\n  const userAccount = useAccount();\n\n  const [appSignerAccount] = useAppSigner();\n  const gasTankBalance = useGasTankBalance();\n  const isGasSpender = useIsGasSpender();\n  const hasDelegation = useHasDelegation();\n\n  return useMemo(() => {\n    const satisfiesRequirement = {\n      connectedWallet: () => userAccount.status === \"connected\",\n      connectedChain: () => userAccount.chainId === chainId,\n      appSigner: () => appSignerAccount != null,\n      gasAllowance: () => gasTankBalance != null && gasTankBalance > 0n,\n      gasSpender: () => isGasSpender === true,\n      accountDelegation: () => hasDelegation === true,\n    } as const satisfies Record<LoginRequirement, () => boolean>;\n\n    const requirements = loginRequirements.filter((requirement) => !satisfiesRequirement[requirement]());\n\n    return {\n      requirement: requirements.at(0) ?? null,\n      requirements,\n    };\n  }, [appSignerAccount, chainId, gasTankBalance, hasDelegation, isGasSpender, userAccount.chainId, userAccount.status]);\n}\n","import { Button } from \"./ui/Button\";\nimport { useLoginDialog } from \"./useLoginDialog\";\nimport { LoginDialog } from \"./LoginDialog\";\nimport { useLoginRequirements } from \"./useLoginRequirements\";\nimport { Shadow } from \"./Shadow\";\n\nconst buttonClassName = \"w-48\";\n\nexport function LoginButton() {\n  const { requirement } = useLoginRequirements();\n  const { openConnectModal, connectPending, openLoginDialog, toggleLoginDialog, loginDialogOpen } = useLoginDialog();\n\n  if (requirement === \"connectedWallet\") {\n    return (\n      <Shadow>\n        <Button\n          className={buttonClassName}\n          pending={connectPending}\n          onClick={() => {\n            openConnectModal?.();\n            openLoginDialog();\n          }}\n        >\n          Connect wallet\n        </Button>\n      </Shadow>\n    );\n  }\n\n  if (requirement != null) {\n    return (\n      <>\n        <Shadow>\n          <Button className={buttonClassName} onClick={openLoginDialog}>\n            Log in\n          </Button>\n        </Shadow>\n        <LoginDialog requirement={requirement} open={loginDialogOpen} onOpenChange={toggleLoginDialog} />\n      </>\n    );\n  }\n\n  // TODO\n  return (\n    <Shadow>\n      <Button className={buttonClassName} disabled>\n        All good!\n      </Button>\n    </Shadow>\n  );\n}\n"],"mappings":"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","names":["twMerge","twMerge","jsx","jsxs","PendingIcon","className","props","jsx","jsxs","buttonClassName","variant","twMerge","Button","pending","type","className","children","disabled","props","PendingIcon","useConnectModal","useCallback","useMemo","useStore","createStore","store","useLoginDialog","openConnectModal","connectModalOpen","connectPending","loginDialogOpen","state","openLoginDialog","closeLoginDialog","toggleLoginDialog","open","useMemo","assertExhaustive","Dialog","keccak256","useSignMessage","useLocalStorage","privateKeyToAccount","useMemo","storageKey","useAppSigner","privateKey","setPrivateKey","Dialog","twMerge","jsx","IconSVG","className","children","props","jsx","CloseIcon","props","IconSVG","jsx","jsxs","ModalContent","title","description","children","CloseIcon","jsx","jsxs","AppSignerDialogContent","setAppSigner","useAppSigner","signMessageAsync","isPending","useSignMessage","ModalContent","Button","signature","keccak256","parseEther","useAccount","useConfig","useWriteContract","createContext","useContext","jsx","Context","MUDLoginProvider","config","children","useLoginConfig","GasTankAbi","useAccount","usePublicClient","useQuery","decodeValueArgs","getKeySchema","getSchemaTypes","getValueSchema","readContract","IStoreReadAbi","encodeAbiParameters","encodeKeyTuple","keySchema","key","name","getRecord","publicClient","storeAddress","table","key","blockTag","keyTuple","encodeKeyTuple","getKeySchema","staticData","encodedLengths","dynamicData","readContract","IStoreReadAbi","decodeValueArgs","getSchemaTypes","getValueSchema","gasTankConfig","getGasTankBalanceQueryKey","data","getGasTankBalance","publicClient","worldAddress","userAccountAddress","getRecord","useGasTankBalance","chainId","gasTankAddress","useLoginConfig","usePublicClient","useAccount","queryKey","useQuery","waitForTransactionReceipt","useQueryClient","jsx","jsxs","GasAllowanceDialogContent","queryClient","useQueryClient","wagmiConfig","useConfig","chainId","gasTankAddress","useLoginConfig","userAccountAddress","useAccount","writeContractAsync","isPending","error","useWriteContract","hash","waitForTransactionReceipt","getGasTankBalanceQueryKey","ModalContent","Button","GasTankAbi","parseEther","Dialog","useMemo","useAccount","usePublicClient","http","maxUint256","toHex","callFrom","createSmartAccountClient","createPimlicoBundlerClient","call","getTransactionCount","signerToSimpleSmartAccount","useQuery","resourceToHex","ENTRYPOINT_ADDRESS_V07","entryPointAddress","entryPointDepositsSlot","smartAccountFactory","loginRequirements","unlimitedDelegationControlId","getAppAccount","publicClient","appSignerAccount","signerToSimpleSmartAccount","entryPointAddress","smartAccountFactory","useAppAccount","queryKey","useQuery","gasTankConfig","concatHex","hexToBigInt","keccak256","toBytes","toHex","SLOT","getStaticDataLocation","tableId","keyTuple","getKeySchema","getUserBalanceSlot","userAccount","getStaticDataLocation","gasTankConfig","encodeKeyTuple","encodeAbiParameters","keccak256","getEntryPointDepositSlot","gasTankAddress","keccak256","encodeAbiParameters","entryPointDepositsSlot","useAppAccountClient","appSignerAccount","useAppSigner","chainId","worldAddress","gasTankAddress","useLoginConfig","userAddress","useAccount","publicClient","usePublicClient","appAccount","useAppAccount","useMemo","pimlicoBundlerClient","createPimlicoBundlerClient","http","entryPointAddress","createSmartAccountClient","userOperation","gasEstimates","getUserBalanceSlot","toHex","maxUint256","getEntryPointDepositSlot","args","getTransactionCount","call","callFrom","usePublicClient","useWalletClient","encodeFunctionData","waitForTransactionReceipt","IBaseWorldAbi","resourceToHex","useMutation","useQueryClient","writeContract","signTypedData","callWithSignatureTypes","signCall","userAccountClient","worldAddress","systemId","callData","nonce","modulesConfig","CallWithSignatureAbi","callWithSignature","userAccountClient","worldAddress","systemId","callData","publicClient","appAccountClient","initialNonce","nonce","getRecord","signature","signCall","writeContract","useAccount","usePublicClient","useQuery","worldConfig","hasDelegationQueryKey","data","hasDelegation","publicClient","worldAddress","userAccountAddress","appAccountAddress","getRecord","unlimitedDelegationControlId","useHasDelegation","chainId","useLoginConfig","usePublicClient","userAccount","useAccount","appSignerAccount","useAppSigner","appAccount","useAppAccount","queryKey","useQuery","Fragment","jsx","jsxs","AccountDelegationDialogContent","queryClient","useQueryClient","chainId","worldAddress","useLoginConfig","publicClient","usePublicClient","userAccountClient","useWalletClient","appAccountClient","useAppAccountClient","mutate","isPending","error","useMutation","hash","callWithSignature","resourceToHex","encodeFunctionData","IBaseWorldAbi","unlimitedDelegationControlId","receipt","waitForTransactionReceipt","hasDelegationQueryKey","ModalContent","Button","Dialog","usePublicClient","useWalletClient","encodeFunctionData","waitForTransactionReceipt","resourceToHex","GasTankAbi","useAccount","usePublicClient","useQuery","gasTankConfig","isGasSpenderQueryKey","data","isGasSpender","publicClient","gasTankAddress","userAccountAddress","appAccountAddress","getRecord","gasTankConfig","useIsGasSpender","chainId","useLoginConfig","usePublicClient","useAccount","appSignerAccount","useAppSigner","useAppAccount","queryKey","useQuery","useMutation","useQueryClient","Fragment","jsx","jsxs","GasSpenderDialogContent","queryClient","useQueryClient","chainId","gasTankAddress","useLoginConfig","publicClient","usePublicClient","userAccountClient","useWalletClient","appAccountClient","useAppAccountClient","mutate","isPending","error","useMutation","hash","callWithSignature","resourceToHex","encodeFunctionData","GasTankAbi","receipt","waitForTransactionReceipt","isGasSpenderQueryKey","ModalContent","Button","Dialog","useSwitchChain","Fragment","jsx","jsxs","ConnectedChainDialogContent","chainId","useLoginConfig","switchChain","isPending","error","useSwitchChain","ModalContent","Button","Dialog","useEffect","useRef","useState","ReactDOM","jsx","Shadow","children","containerRef","useRef","shadowRoot","setShadowRoot","useState","useEffect","container","root","sheet","tailwind_default","ReactDOM","Fragment","jsx","jsxs","Modal","open","onOpenChange","trigger","children","Shadow","Fragment","jsx","LoginDialog","requirement","dialogProps","content","useMemo","ConnectedChainDialogContent","AppSignerDialogContent","GasAllowanceDialogContent","GasSpenderDialogContent","AccountDelegationDialogContent","assertExhaustive","Modal","useAccount","useMemo","useLoginRequirements","chainId","useLoginConfig","userAccount","useAccount","appSignerAccount","useAppSigner","gasTankBalance","useGasTankBalance","isGasSpender","useIsGasSpender","hasDelegation","useHasDelegation","useMemo","satisfiesRequirement","requirements","loginRequirements","requirement","Fragment","jsx","jsxs","buttonClassName","LoginButton","requirement","useLoginRequirements","openConnectModal","connectPending","openLoginDialog","toggleLoginDialog","loginDialogOpen","useLoginDialog","Shadow","Button","LoginDialog"]}