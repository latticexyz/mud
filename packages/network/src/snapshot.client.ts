// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "snapshot.proto" (package "ecssnapshot", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ECSStateSnapshotService } from "./snapshot";
import type { ECSStateRequestAtBlock } from "./snapshot";
import type { ECSStateBlockReply } from "./snapshot";
import type { ECSStateBlockRequestLatest } from "./snapshot";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ECSStateReply } from "./snapshot";
import type { ECSStateRequestLatest } from "./snapshot";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The Snapshot Service definition.
 *
 * @generated from protobuf service ecssnapshot.ECSStateSnapshotService
 */
export interface IECSStateSnapshotServiceClient {
  /**
   * Requests the latest ECS state.
   *
   * @generated from protobuf rpc: GetStateLatest(ecssnapshot.ECSStateRequestLatest) returns (ecssnapshot.ECSStateReply);
   */
  getStateLatest(input: ECSStateRequestLatest, options?: RpcOptions): UnaryCall<ECSStateRequestLatest, ECSStateReply>;
  /**
   * Requests the latest block number based on the latest ECS state.
   *
   * @generated from protobuf rpc: GetStateBlockLatest(ecssnapshot.ECSStateBlockRequestLatest) returns (ecssnapshot.ECSStateBlockReply);
   */
  getStateBlockLatest(
    input: ECSStateBlockRequestLatest,
    options?: RpcOptions
  ): UnaryCall<ECSStateBlockRequestLatest, ECSStateBlockReply>;
  /**
   * Requests the ECS state at specific block.
   *
   * @generated from protobuf rpc: GetStateAtBlock(ecssnapshot.ECSStateRequestAtBlock) returns (ecssnapshot.ECSStateReply);
   */
  getStateAtBlock(
    input: ECSStateRequestAtBlock,
    options?: RpcOptions
  ): UnaryCall<ECSStateRequestAtBlock, ECSStateReply>;
}
/**
 * The Snapshot Service definition.
 *
 * @generated from protobuf service ecssnapshot.ECSStateSnapshotService
 */
export class ECSStateSnapshotServiceClient implements IECSStateSnapshotServiceClient, ServiceInfo {
  typeName = ECSStateSnapshotService.typeName;
  methods = ECSStateSnapshotService.methods;
  options = ECSStateSnapshotService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Requests the latest ECS state.
   *
   * @generated from protobuf rpc: GetStateLatest(ecssnapshot.ECSStateRequestLatest) returns (ecssnapshot.ECSStateReply);
   */
  getStateLatest(input: ECSStateRequestLatest, options?: RpcOptions): UnaryCall<ECSStateRequestLatest, ECSStateReply> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ECSStateRequestLatest, ECSStateReply>("unary", this._transport, method, opt, input);
  }
  /**
   * Requests the latest block number based on the latest ECS state.
   *
   * @generated from protobuf rpc: GetStateBlockLatest(ecssnapshot.ECSStateBlockRequestLatest) returns (ecssnapshot.ECSStateBlockReply);
   */
  getStateBlockLatest(
    input: ECSStateBlockRequestLatest,
    options?: RpcOptions
  ): UnaryCall<ECSStateBlockRequestLatest, ECSStateBlockReply> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ECSStateBlockRequestLatest, ECSStateBlockReply>("unary", this._transport, method, opt, input);
  }
  /**
   * Requests the ECS state at specific block.
   *
   * @generated from protobuf rpc: GetStateAtBlock(ecssnapshot.ECSStateRequestAtBlock) returns (ecssnapshot.ECSStateReply);
   */
  getStateAtBlock(
    input: ECSStateRequestAtBlock,
    options?: RpcOptions
  ): UnaryCall<ECSStateRequestAtBlock, ECSStateReply> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ECSStateRequestAtBlock, ECSStateReply>("unary", this._transport, method, opt, input);
  }
}
