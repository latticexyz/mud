/* eslint-disable no-case-declarations */
/* eslint-disable @typescript-eslint/no-empty-interface */
// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "snapshot.proto" (package "ecssnapshot", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ecssnapshot.ECSState
 */
export interface ECSState {
  /**
   * @generated from protobuf field: string component_id = 1;
   */
  componentId: string;
  /**
   * @generated from protobuf field: string entity_id = 2;
   */
  entityId: string;
  /**
   * @generated from protobuf field: bytes value = 3;
   */
  value: Uint8Array;
}
/**
 * @generated from protobuf message ecssnapshot.ECSStateSnapshot
 */
export interface ECSStateSnapshot {
  /**
   * @generated from protobuf field: repeated ecssnapshot.ECSState state = 1;
   */
  state: ECSState[];
  /**
   * @generated from protobuf field: uint64 blockNumber = 2;
   */
  blockNumber: bigint;
}
/**
 * The request message for the latest ECS state.
 *
 * @generated from protobuf message ecssnapshot.ECSStateRequestLatest
 */
export interface ECSStateRequestLatest {}
/**
 * The request message for the latest block based on latest ECS state.
 *
 * @generated from protobuf message ecssnapshot.ECSStateBlockRequestLatest
 */
export interface ECSStateBlockRequestLatest {}
/**
 * The request message for the ECS state given a block number.
 *
 * @generated from protobuf message ecssnapshot.ECSStateRequestAtBlock
 */
export interface ECSStateRequestAtBlock {
  /**
   * @generated from protobuf field: uint64 blockNumber = 1;
   */
  blockNumber: bigint;
}
/**
 * The response message containing the current state and the block number of that state.
 *
 * @generated from protobuf message ecssnapshot.ECSStateReply
 */
export interface ECSStateReply {
  /**
   * @generated from protobuf field: repeated ecssnapshot.ECSState state = 1;
   */
  state: ECSState[];
  /**
   * @generated from protobuf field: uint64 blockNumber = 2;
   */
  blockNumber: bigint;
}
/**
 * @generated from protobuf message ecssnapshot.ECSStateBlockReply
 */
export interface ECSStateBlockReply {
  /**
   * @generated from protobuf field: uint64 blockNumber = 1;
   */
  blockNumber: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class ECSState$Type extends MessageType<ECSState> {
  constructor() {
    super("ecssnapshot.ECSState", [
      { no: 1, name: "component_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "entity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<ECSState>): ECSState {
    const message = { componentId: "", entityId: "", value: new Uint8Array(0) };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSState>(this, message, value);
    return message;
  }
  internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ECSState): ECSState {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string component_id */ 1:
          message.componentId = reader.string();
          break;
        case /* string entity_id */ 2:
          message.entityId = reader.string();
          break;
        case /* bytes value */ 3:
          message.value = reader.bytes();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          const d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ECSState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string component_id = 1; */
    if (message.componentId !== "") writer.tag(1, WireType.LengthDelimited).string(message.componentId);
    /* string entity_id = 2; */
    if (message.entityId !== "") writer.tag(2, WireType.LengthDelimited).string(message.entityId);
    /* bytes value = 3; */
    if (message.value.length) writer.tag(3, WireType.LengthDelimited).bytes(message.value);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSState
 */
export const ECSState = new ECSState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateSnapshot$Type extends MessageType<ECSStateSnapshot> {
  constructor() {
    super("ecssnapshot.ECSStateSnapshot", [
      { no: 1, name: "state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ECSState },
      { no: 2, name: "blockNumber", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
    ]);
  }
  create(value?: PartialMessage<ECSStateSnapshot>): ECSStateSnapshot {
    const message = { state: [], blockNumber: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateSnapshot>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateSnapshot
  ): ECSStateSnapshot {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated ecssnapshot.ECSState state */ 1:
          message.state.push(ECSState.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* uint64 blockNumber */ 2:
          message.blockNumber = reader.uint64().toBigInt();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          const d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ECSStateSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* repeated ecssnapshot.ECSState state = 1; */
    for (let i = 0; i < message.state.length; i++)
      ECSState.internalBinaryWrite(message.state[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
    /* uint64 blockNumber = 2; */
    if (message.blockNumber !== 0n) writer.tag(2, WireType.Varint).uint64(message.blockNumber);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateSnapshot
 */
export const ECSStateSnapshot = new ECSStateSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateRequestLatest$Type extends MessageType<ECSStateRequestLatest> {
  constructor() {
    super("ecssnapshot.ECSStateRequestLatest", []);
  }
  create(value?: PartialMessage<ECSStateRequestLatest>): ECSStateRequestLatest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateRequestLatest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateRequestLatest
  ): ECSStateRequestLatest {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: ECSStateRequestLatest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateRequestLatest
 */
export const ECSStateRequestLatest = new ECSStateRequestLatest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateBlockRequestLatest$Type extends MessageType<ECSStateBlockRequestLatest> {
  constructor() {
    super("ecssnapshot.ECSStateBlockRequestLatest", []);
  }
  create(value?: PartialMessage<ECSStateBlockRequestLatest>): ECSStateBlockRequestLatest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateBlockRequestLatest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateBlockRequestLatest
  ): ECSStateBlockRequestLatest {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: ECSStateBlockRequestLatest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateBlockRequestLatest
 */
export const ECSStateBlockRequestLatest = new ECSStateBlockRequestLatest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateRequestAtBlock$Type extends MessageType<ECSStateRequestAtBlock> {
  constructor() {
    super("ecssnapshot.ECSStateRequestAtBlock", [
      { no: 1, name: "blockNumber", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
    ]);
  }
  create(value?: PartialMessage<ECSStateRequestAtBlock>): ECSStateRequestAtBlock {
    const message = { blockNumber: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateRequestAtBlock>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateRequestAtBlock
  ): ECSStateRequestAtBlock {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 blockNumber */ 1:
          message.blockNumber = reader.uint64().toBigInt();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          const d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ECSStateRequestAtBlock,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint64 blockNumber = 1; */
    if (message.blockNumber !== 0n) writer.tag(1, WireType.Varint).uint64(message.blockNumber);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateRequestAtBlock
 */
export const ECSStateRequestAtBlock = new ECSStateRequestAtBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateReply$Type extends MessageType<ECSStateReply> {
  constructor() {
    super("ecssnapshot.ECSStateReply", [
      { no: 1, name: "state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ECSState },
      { no: 2, name: "blockNumber", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
    ]);
  }
  create(value?: PartialMessage<ECSStateReply>): ECSStateReply {
    const message = { state: [], blockNumber: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateReply>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateReply
  ): ECSStateReply {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated ecssnapshot.ECSState state */ 1:
          message.state.push(ECSState.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* uint64 blockNumber */ 2:
          message.blockNumber = reader.uint64().toBigInt();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          const d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ECSStateReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* repeated ecssnapshot.ECSState state = 1; */
    for (let i = 0; i < message.state.length; i++)
      ECSState.internalBinaryWrite(message.state[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
    /* uint64 blockNumber = 2; */
    if (message.blockNumber !== 0n) writer.tag(2, WireType.Varint).uint64(message.blockNumber);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateReply
 */
export const ECSStateReply = new ECSStateReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ECSStateBlockReply$Type extends MessageType<ECSStateBlockReply> {
  constructor() {
    super("ecssnapshot.ECSStateBlockReply", [
      { no: 1, name: "blockNumber", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
    ]);
  }
  create(value?: PartialMessage<ECSStateBlockReply>): ECSStateBlockReply {
    const message = { blockNumber: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ECSStateBlockReply>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ECSStateBlockReply
  ): ECSStateBlockReply {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 blockNumber */ 1:
          message.blockNumber = reader.uint64().toBigInt();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          const d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ECSStateBlockReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* uint64 blockNumber = 1; */
    if (message.blockNumber !== 0n) writer.tag(1, WireType.Varint).uint64(message.blockNumber);
    const u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ecssnapshot.ECSStateBlockReply
 */
export const ECSStateBlockReply = new ECSStateBlockReply$Type();
/**
 * @generated ServiceType for protobuf service ecssnapshot.ECSStateSnapshotService
 */
export const ECSStateSnapshotService = new ServiceType("ecssnapshot.ECSStateSnapshotService", [
  { name: "GetStateLatest", options: {}, I: ECSStateRequestLatest, O: ECSStateReply },
  { name: "GetStateBlockLatest", options: {}, I: ECSStateBlockRequestLatest, O: ECSStateBlockReply },
  { name: "GetStateAtBlock", options: {}, I: ECSStateRequestAtBlock, O: ECSStateReply },
]);
