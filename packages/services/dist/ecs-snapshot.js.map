{"version":3,"sources":["../protobuf/ts/ecs-snapshot/ecs-snapshot.ts"],"sourcesContent":["/* eslint-disable */\nimport Long from \"long\";\nimport type { CallContext, CallOptions } from \"nice-grpc-common\";\nimport _m0 from \"protobufjs/minimal.js\";\n\nexport const protobufPackage = \"ecssnapshot\";\n\nexport interface ECSState {\n  componentIdIdx: number;\n  entityIdIdx: number;\n  value: Uint8Array;\n}\n\nexport interface ECSStateSnapshot {\n  state: ECSState[];\n  stateComponents: string[];\n  stateEntities: string[];\n  stateHash: string;\n  startBlockNumber: number;\n  endBlockNumber: number;\n  worldAddress: string;\n}\n\nexport interface Worlds {\n  worldAddress: string[];\n}\n\n/** The request message for the latest ECS state. */\nexport interface ECSStateRequestLatest {\n  worldAddress: string;\n}\n\n/** The request message for the latest ECS statem, pruned for specific address. */\nexport interface ECSStateRequestLatestStreamPruned {\n  worldAddress: string;\n  pruneAddress: string;\n  pruneComponentId?: string | undefined;\n  chunkPercentage?: number | undefined;\n}\n\n/** The request message for the latest chunked ECS state. */\nexport interface ECSStateRequestLatestStream {\n  worldAddress: string;\n  chunkPercentage?: number | undefined;\n}\n\n/** The request message for the latest block based on latest ECS state. */\nexport interface ECSStateBlockRequestLatest {\n  worldAddress: string;\n}\n\n/** The request message for the ECS state given a block number. */\nexport interface ECSStateRequestAtBlock {\n  blockNumber: number;\n}\n\n/** The request message for all worlds. */\nexport interface WorldsRequest {\n}\n\n/** The response message containing the current state, hash of that state, and the block number of that state. */\nexport interface ECSStateReply {\n  state: ECSState[];\n  stateComponents: string[];\n  stateEntities: string[];\n  stateHash: string;\n  blockNumber: number;\n}\n\nexport interface ECSStateReplyV2 {\n  state: ECSState[];\n  stateComponents: string[];\n  stateEntities: Uint8Array[];\n  stateHash: string;\n  blockNumber: number;\n}\n\nexport interface ECSStateBlockReply {\n  blockNumber: number;\n}\n\nfunction createBaseECSState(): ECSState {\n  return { componentIdIdx: 0, entityIdIdx: 0, value: new Uint8Array() };\n}\n\nexport const ECSState = {\n  encode(message: ECSState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.componentIdIdx !== 0) {\n      writer.uint32(8).uint32(message.componentIdIdx);\n    }\n    if (message.entityIdIdx !== 0) {\n      writer.uint32(16).uint32(message.entityIdIdx);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(26).bytes(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSState {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSState();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.componentIdIdx = reader.uint32();\n          continue;\n        case 2:\n          if (tag != 16) {\n            break;\n          }\n\n          message.entityIdIdx = reader.uint32();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.value = reader.bytes();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSState>): ECSState {\n    return ECSState.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSState>): ECSState {\n    const message = createBaseECSState();\n    message.componentIdIdx = object.componentIdIdx ?? 0;\n    message.entityIdIdx = object.entityIdIdx ?? 0;\n    message.value = object.value ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseECSStateSnapshot(): ECSStateSnapshot {\n  return {\n    state: [],\n    stateComponents: [],\n    stateEntities: [],\n    stateHash: \"\",\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    worldAddress: \"\",\n  };\n}\n\nexport const ECSStateSnapshot = {\n  encode(message: ECSStateSnapshot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.state) {\n      ECSState.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.stateComponents) {\n      writer.uint32(18).string(v!);\n    }\n    for (const v of message.stateEntities) {\n      writer.uint32(26).string(v!);\n    }\n    if (message.stateHash !== \"\") {\n      writer.uint32(34).string(message.stateHash);\n    }\n    if (message.startBlockNumber !== 0) {\n      writer.uint32(40).uint32(message.startBlockNumber);\n    }\n    if (message.endBlockNumber !== 0) {\n      writer.uint32(48).uint32(message.endBlockNumber);\n    }\n    if (message.worldAddress !== \"\") {\n      writer.uint32(58).string(message.worldAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateSnapshot {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateSnapshot();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.state.push(ECSState.decode(reader, reader.uint32()));\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.stateComponents.push(reader.string());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.stateEntities.push(reader.string());\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.stateHash = reader.string();\n          continue;\n        case 5:\n          if (tag != 40) {\n            break;\n          }\n\n          message.startBlockNumber = reader.uint32();\n          continue;\n        case 6:\n          if (tag != 48) {\n            break;\n          }\n\n          message.endBlockNumber = reader.uint32();\n          continue;\n        case 7:\n          if (tag != 58) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateSnapshot>): ECSStateSnapshot {\n    return ECSStateSnapshot.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateSnapshot>): ECSStateSnapshot {\n    const message = createBaseECSStateSnapshot();\n    message.state = object.state?.map((e) => ECSState.fromPartial(e)) || [];\n    message.stateComponents = object.stateComponents?.map((e) => e) || [];\n    message.stateEntities = object.stateEntities?.map((e) => e) || [];\n    message.stateHash = object.stateHash ?? \"\";\n    message.startBlockNumber = object.startBlockNumber ?? 0;\n    message.endBlockNumber = object.endBlockNumber ?? 0;\n    message.worldAddress = object.worldAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseWorlds(): Worlds {\n  return { worldAddress: [] };\n}\n\nexport const Worlds = {\n  encode(message: Worlds, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.worldAddress) {\n      writer.uint32(10).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Worlds {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseWorlds();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Worlds>): Worlds {\n    return Worlds.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Worlds>): Worlds {\n    const message = createBaseWorlds();\n    message.worldAddress = object.worldAddress?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseECSStateRequestLatest(): ECSStateRequestLatest {\n  return { worldAddress: \"\" };\n}\n\nexport const ECSStateRequestLatest = {\n  encode(message: ECSStateRequestLatest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.worldAddress !== \"\") {\n      writer.uint32(10).string(message.worldAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateRequestLatest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateRequestLatest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateRequestLatest>): ECSStateRequestLatest {\n    return ECSStateRequestLatest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateRequestLatest>): ECSStateRequestLatest {\n    const message = createBaseECSStateRequestLatest();\n    message.worldAddress = object.worldAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseECSStateRequestLatestStreamPruned(): ECSStateRequestLatestStreamPruned {\n  return { worldAddress: \"\", pruneAddress: \"\", pruneComponentId: undefined, chunkPercentage: undefined };\n}\n\nexport const ECSStateRequestLatestStreamPruned = {\n  encode(message: ECSStateRequestLatestStreamPruned, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.worldAddress !== \"\") {\n      writer.uint32(10).string(message.worldAddress);\n    }\n    if (message.pruneAddress !== \"\") {\n      writer.uint32(18).string(message.pruneAddress);\n    }\n    if (message.pruneComponentId !== undefined) {\n      writer.uint32(26).string(message.pruneComponentId);\n    }\n    if (message.chunkPercentage !== undefined) {\n      writer.uint32(32).uint32(message.chunkPercentage);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateRequestLatestStreamPruned {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateRequestLatestStreamPruned();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.pruneAddress = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.pruneComponentId = reader.string();\n          continue;\n        case 4:\n          if (tag != 32) {\n            break;\n          }\n\n          message.chunkPercentage = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateRequestLatestStreamPruned>): ECSStateRequestLatestStreamPruned {\n    return ECSStateRequestLatestStreamPruned.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateRequestLatestStreamPruned>): ECSStateRequestLatestStreamPruned {\n    const message = createBaseECSStateRequestLatestStreamPruned();\n    message.worldAddress = object.worldAddress ?? \"\";\n    message.pruneAddress = object.pruneAddress ?? \"\";\n    message.pruneComponentId = object.pruneComponentId ?? undefined;\n    message.chunkPercentage = object.chunkPercentage ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseECSStateRequestLatestStream(): ECSStateRequestLatestStream {\n  return { worldAddress: \"\", chunkPercentage: undefined };\n}\n\nexport const ECSStateRequestLatestStream = {\n  encode(message: ECSStateRequestLatestStream, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.worldAddress !== \"\") {\n      writer.uint32(10).string(message.worldAddress);\n    }\n    if (message.chunkPercentage !== undefined) {\n      writer.uint32(16).uint32(message.chunkPercentage);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateRequestLatestStream {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateRequestLatestStream();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n        case 2:\n          if (tag != 16) {\n            break;\n          }\n\n          message.chunkPercentage = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateRequestLatestStream>): ECSStateRequestLatestStream {\n    return ECSStateRequestLatestStream.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateRequestLatestStream>): ECSStateRequestLatestStream {\n    const message = createBaseECSStateRequestLatestStream();\n    message.worldAddress = object.worldAddress ?? \"\";\n    message.chunkPercentage = object.chunkPercentage ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseECSStateBlockRequestLatest(): ECSStateBlockRequestLatest {\n  return { worldAddress: \"\" };\n}\n\nexport const ECSStateBlockRequestLatest = {\n  encode(message: ECSStateBlockRequestLatest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.worldAddress !== \"\") {\n      writer.uint32(10).string(message.worldAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateBlockRequestLatest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateBlockRequestLatest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateBlockRequestLatest>): ECSStateBlockRequestLatest {\n    return ECSStateBlockRequestLatest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateBlockRequestLatest>): ECSStateBlockRequestLatest {\n    const message = createBaseECSStateBlockRequestLatest();\n    message.worldAddress = object.worldAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseECSStateRequestAtBlock(): ECSStateRequestAtBlock {\n  return { blockNumber: 0 };\n}\n\nexport const ECSStateRequestAtBlock = {\n  encode(message: ECSStateRequestAtBlock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.blockNumber !== 0) {\n      writer.uint32(8).uint64(message.blockNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateRequestAtBlock {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateRequestAtBlock();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.blockNumber = longToNumber(reader.uint64() as Long);\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateRequestAtBlock>): ECSStateRequestAtBlock {\n    return ECSStateRequestAtBlock.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateRequestAtBlock>): ECSStateRequestAtBlock {\n    const message = createBaseECSStateRequestAtBlock();\n    message.blockNumber = object.blockNumber ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseWorldsRequest(): WorldsRequest {\n  return {};\n}\n\nexport const WorldsRequest = {\n  encode(_: WorldsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): WorldsRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseWorldsRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<WorldsRequest>): WorldsRequest {\n    return WorldsRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(_: DeepPartial<WorldsRequest>): WorldsRequest {\n    const message = createBaseWorldsRequest();\n    return message;\n  },\n};\n\nfunction createBaseECSStateReply(): ECSStateReply {\n  return { state: [], stateComponents: [], stateEntities: [], stateHash: \"\", blockNumber: 0 };\n}\n\nexport const ECSStateReply = {\n  encode(message: ECSStateReply, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.state) {\n      ECSState.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.stateComponents) {\n      writer.uint32(18).string(v!);\n    }\n    for (const v of message.stateEntities) {\n      writer.uint32(26).string(v!);\n    }\n    if (message.stateHash !== \"\") {\n      writer.uint32(34).string(message.stateHash);\n    }\n    if (message.blockNumber !== 0) {\n      writer.uint32(40).uint32(message.blockNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateReply {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateReply();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.state.push(ECSState.decode(reader, reader.uint32()));\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.stateComponents.push(reader.string());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.stateEntities.push(reader.string());\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.stateHash = reader.string();\n          continue;\n        case 5:\n          if (tag != 40) {\n            break;\n          }\n\n          message.blockNumber = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateReply>): ECSStateReply {\n    return ECSStateReply.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateReply>): ECSStateReply {\n    const message = createBaseECSStateReply();\n    message.state = object.state?.map((e) => ECSState.fromPartial(e)) || [];\n    message.stateComponents = object.stateComponents?.map((e) => e) || [];\n    message.stateEntities = object.stateEntities?.map((e) => e) || [];\n    message.stateHash = object.stateHash ?? \"\";\n    message.blockNumber = object.blockNumber ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseECSStateReplyV2(): ECSStateReplyV2 {\n  return { state: [], stateComponents: [], stateEntities: [], stateHash: \"\", blockNumber: 0 };\n}\n\nexport const ECSStateReplyV2 = {\n  encode(message: ECSStateReplyV2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.state) {\n      ECSState.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.stateComponents) {\n      writer.uint32(18).string(v!);\n    }\n    for (const v of message.stateEntities) {\n      writer.uint32(26).bytes(v!);\n    }\n    if (message.stateHash !== \"\") {\n      writer.uint32(34).string(message.stateHash);\n    }\n    if (message.blockNumber !== 0) {\n      writer.uint32(40).uint32(message.blockNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateReplyV2 {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateReplyV2();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.state.push(ECSState.decode(reader, reader.uint32()));\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.stateComponents.push(reader.string());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.stateEntities.push(reader.bytes());\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.stateHash = reader.string();\n          continue;\n        case 5:\n          if (tag != 40) {\n            break;\n          }\n\n          message.blockNumber = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateReplyV2>): ECSStateReplyV2 {\n    return ECSStateReplyV2.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateReplyV2>): ECSStateReplyV2 {\n    const message = createBaseECSStateReplyV2();\n    message.state = object.state?.map((e) => ECSState.fromPartial(e)) || [];\n    message.stateComponents = object.stateComponents?.map((e) => e) || [];\n    message.stateEntities = object.stateEntities?.map((e) => e) || [];\n    message.stateHash = object.stateHash ?? \"\";\n    message.blockNumber = object.blockNumber ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseECSStateBlockReply(): ECSStateBlockReply {\n  return { blockNumber: 0 };\n}\n\nexport const ECSStateBlockReply = {\n  encode(message: ECSStateBlockReply, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.blockNumber !== 0) {\n      writer.uint32(8).uint32(message.blockNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStateBlockReply {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStateBlockReply();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.blockNumber = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStateBlockReply>): ECSStateBlockReply {\n    return ECSStateBlockReply.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStateBlockReply>): ECSStateBlockReply {\n    const message = createBaseECSStateBlockReply();\n    message.blockNumber = object.blockNumber ?? 0;\n    return message;\n  },\n};\n\n/** The Snapshot Service definition. */\nexport type ECSStateSnapshotServiceDefinition = typeof ECSStateSnapshotServiceDefinition;\nexport const ECSStateSnapshotServiceDefinition = {\n  name: \"ECSStateSnapshotService\",\n  fullName: \"ecssnapshot.ECSStateSnapshotService\",\n  methods: {\n    /** Requests the latest ECS state. */\n    getStateLatest: {\n      name: \"GetStateLatest\",\n      requestType: ECSStateRequestLatest,\n      requestStream: false,\n      responseType: ECSStateReply,\n      responseStream: false,\n      options: {},\n    },\n    /** Requests the latest ECS state in stream format, which will chunk the state. */\n    getStateLatestStream: {\n      name: \"GetStateLatestStream\",\n      requestType: ECSStateRequestLatestStream,\n      requestStream: false,\n      responseType: ECSStateReply,\n      responseStream: true,\n      options: {},\n    },\n    /**\n     * Requests the latest ECS state in stream format, which will chunk the state.\n     *\n     * V2 version optimized to return entities as raw bytes.\n     */\n    getStateLatestStreamV2: {\n      name: \"GetStateLatestStreamV2\",\n      requestType: ECSStateRequestLatestStream,\n      requestStream: false,\n      responseType: ECSStateReplyV2,\n      responseStream: true,\n      options: {},\n    },\n    /** Requests the latest ECS state, with aditional pruning. */\n    getStateLatestStreamPruned: {\n      name: \"GetStateLatestStreamPruned\",\n      requestType: ECSStateRequestLatestStreamPruned,\n      requestStream: false,\n      responseType: ECSStateReply,\n      responseStream: true,\n      options: {},\n    },\n    /**\n     * Requests the latest ECS state, with aditional pruning.\n     *\n     * V2 version optimized to return entities as raw bytes.\n     */\n    getStateLatestStreamPrunedV2: {\n      name: \"GetStateLatestStreamPrunedV2\",\n      requestType: ECSStateRequestLatestStreamPruned,\n      requestStream: false,\n      responseType: ECSStateReplyV2,\n      responseStream: true,\n      options: {},\n    },\n    /** Requests the latest block number based on the latest ECS state. */\n    getStateBlockLatest: {\n      name: \"GetStateBlockLatest\",\n      requestType: ECSStateBlockRequestLatest,\n      requestStream: false,\n      responseType: ECSStateBlockReply,\n      responseStream: false,\n      options: {},\n    },\n    /** Requests the ECS state at specific block. */\n    getStateAtBlock: {\n      name: \"GetStateAtBlock\",\n      requestType: ECSStateRequestAtBlock,\n      requestStream: false,\n      responseType: ECSStateReply,\n      responseStream: false,\n      options: {},\n    },\n    /** Requests a list of known worlds based on chain state. */\n    getWorlds: {\n      name: \"GetWorlds\",\n      requestType: WorldsRequest,\n      requestStream: false,\n      responseType: Worlds,\n      responseStream: false,\n      options: {},\n    },\n  },\n} as const;\n\nexport interface ECSStateSnapshotServiceImplementation<CallContextExt = {}> {\n  /** Requests the latest ECS state. */\n  getStateLatest(\n    request: ECSStateRequestLatest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<ECSStateReply>>;\n  /** Requests the latest ECS state in stream format, which will chunk the state. */\n  getStateLatestStream(\n    request: ECSStateRequestLatestStream,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<ECSStateReply>>;\n  /**\n   * Requests the latest ECS state in stream format, which will chunk the state.\n   *\n   * V2 version optimized to return entities as raw bytes.\n   */\n  getStateLatestStreamV2(\n    request: ECSStateRequestLatestStream,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<ECSStateReplyV2>>;\n  /** Requests the latest ECS state, with aditional pruning. */\n  getStateLatestStreamPruned(\n    request: ECSStateRequestLatestStreamPruned,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<ECSStateReply>>;\n  /**\n   * Requests the latest ECS state, with aditional pruning.\n   *\n   * V2 version optimized to return entities as raw bytes.\n   */\n  getStateLatestStreamPrunedV2(\n    request: ECSStateRequestLatestStreamPruned,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<ECSStateReplyV2>>;\n  /** Requests the latest block number based on the latest ECS state. */\n  getStateBlockLatest(\n    request: ECSStateBlockRequestLatest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<ECSStateBlockReply>>;\n  /** Requests the ECS state at specific block. */\n  getStateAtBlock(\n    request: ECSStateRequestAtBlock,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<ECSStateReply>>;\n  /** Requests a list of known worlds based on chain state. */\n  getWorlds(request: WorldsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Worlds>>;\n}\n\nexport interface ECSStateSnapshotServiceClient<CallOptionsExt = {}> {\n  /** Requests the latest ECS state. */\n  getStateLatest(\n    request: DeepPartial<ECSStateRequestLatest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<ECSStateReply>;\n  /** Requests the latest ECS state in stream format, which will chunk the state. */\n  getStateLatestStream(\n    request: DeepPartial<ECSStateRequestLatestStream>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<ECSStateReply>;\n  /**\n   * Requests the latest ECS state in stream format, which will chunk the state.\n   *\n   * V2 version optimized to return entities as raw bytes.\n   */\n  getStateLatestStreamV2(\n    request: DeepPartial<ECSStateRequestLatestStream>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<ECSStateReplyV2>;\n  /** Requests the latest ECS state, with aditional pruning. */\n  getStateLatestStreamPruned(\n    request: DeepPartial<ECSStateRequestLatestStreamPruned>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<ECSStateReply>;\n  /**\n   * Requests the latest ECS state, with aditional pruning.\n   *\n   * V2 version optimized to return entities as raw bytes.\n   */\n  getStateLatestStreamPrunedV2(\n    request: DeepPartial<ECSStateRequestLatestStreamPruned>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<ECSStateReplyV2>;\n  /** Requests the latest block number based on the latest ECS state. */\n  getStateBlockLatest(\n    request: DeepPartial<ECSStateBlockRequestLatest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<ECSStateBlockReply>;\n  /** Requests the ECS state at specific block. */\n  getStateAtBlock(\n    request: DeepPartial<ECSStateRequestAtBlock>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<ECSStateReply>;\n  /** Requests a list of known worlds based on chain state. */\n  getWorlds(request: DeepPartial<WorldsRequest>, options?: CallOptions & CallOptionsExt): Promise<Worlds>;\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar tsProtoGlobalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw \"Unable to locate global object\";\n})();\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\nfunction longToNumber(long: Long): number {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new tsProtoGlobalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  return long.toNumber();\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nexport type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };\n"],"mappings":"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","names":[]}