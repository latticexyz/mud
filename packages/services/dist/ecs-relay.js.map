{"version":3,"sources":["../protobuf/ts/ecs-relay/ecs-relay.ts"],"sourcesContent":["/* eslint-disable */\nimport Long from \"long\";\nimport type { CallContext, CallOptions } from \"nice-grpc-common\";\nimport _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"ecsrelay\";\n\n/** Identifies a client connecting to Relay Service. */\nexport interface Identity {\n  name: string;\n}\n\n/** Signature that a client must provide to prove ownership of identity. */\nexport interface Signature {\n  signature: string;\n}\n\nexport interface Message {\n  version: number;\n  id: string;\n  data: Uint8Array;\n  timestamp: number;\n  signature: string;\n}\n\nexport interface SubscriptionRequest {\n  signature: Signature | undefined;\n  subscription: Subscription | undefined;\n}\n\nexport interface Subscription {\n  label: string;\n}\n\nexport interface PushRequest {\n  label: string;\n  message: Message | undefined;\n}\n\nexport interface PushManyRequest {\n  signature: Signature | undefined;\n  label: string;\n  messages: Message[];\n}\n\nexport interface PushResponse {\n}\n\nexport interface CountIdentitiesRequest {\n}\n\nexport interface CountIdentitiesResponse {\n  count: number;\n}\n\nexport interface BalanceRequest {\n}\n\nexport interface BalanceResponse {\n  wei: number;\n  ether: number;\n}\n\nfunction createBaseIdentity(): Identity {\n  return { name: \"\" };\n}\n\nexport const Identity = {\n  encode(message: Identity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Identity {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseIdentity();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Identity>): Identity {\n    return Identity.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Identity>): Identity {\n    const message = createBaseIdentity();\n    message.name = object.name ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseSignature(): Signature {\n  return { signature: \"\" };\n}\n\nexport const Signature = {\n  encode(message: Signature, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.signature !== \"\") {\n      writer.uint32(10).string(message.signature);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Signature {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignature();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.signature = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Signature>): Signature {\n    return Signature.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Signature>): Signature {\n    const message = createBaseSignature();\n    message.signature = object.signature ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMessage(): Message {\n  return { version: 0, id: \"\", data: new Uint8Array(), timestamp: 0, signature: \"\" };\n}\n\nexport const Message = {\n  encode(message: Message, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.version !== 0) {\n      writer.uint32(8).uint32(message.version);\n    }\n    if (message.id !== \"\") {\n      writer.uint32(18).string(message.id);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n    if (message.timestamp !== 0) {\n      writer.uint32(32).int64(message.timestamp);\n    }\n    if (message.signature !== \"\") {\n      writer.uint32(42).string(message.signature);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Message {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.version = reader.uint32();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.data = reader.bytes();\n          continue;\n        case 4:\n          if (tag != 32) {\n            break;\n          }\n\n          message.timestamp = longToNumber(reader.int64() as Long);\n          continue;\n        case 5:\n          if (tag != 42) {\n            break;\n          }\n\n          message.signature = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Message>): Message {\n    return Message.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Message>): Message {\n    const message = createBaseMessage();\n    message.version = object.version ?? 0;\n    message.id = object.id ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    message.timestamp = object.timestamp ?? 0;\n    message.signature = object.signature ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseSubscriptionRequest(): SubscriptionRequest {\n  return { signature: undefined, subscription: undefined };\n}\n\nexport const SubscriptionRequest = {\n  encode(message: SubscriptionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.signature !== undefined) {\n      Signature.encode(message.signature, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.subscription !== undefined) {\n      Subscription.encode(message.subscription, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SubscriptionRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSubscriptionRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.signature = Signature.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.subscription = Subscription.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<SubscriptionRequest>): SubscriptionRequest {\n    return SubscriptionRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<SubscriptionRequest>): SubscriptionRequest {\n    const message = createBaseSubscriptionRequest();\n    message.signature = (object.signature !== undefined && object.signature !== null)\n      ? Signature.fromPartial(object.signature)\n      : undefined;\n    message.subscription = (object.subscription !== undefined && object.subscription !== null)\n      ? Subscription.fromPartial(object.subscription)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseSubscription(): Subscription {\n  return { label: \"\" };\n}\n\nexport const Subscription = {\n  encode(message: Subscription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.label !== \"\") {\n      writer.uint32(10).string(message.label);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Subscription {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSubscription();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.label = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Subscription>): Subscription {\n    return Subscription.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Subscription>): Subscription {\n    const message = createBaseSubscription();\n    message.label = object.label ?? \"\";\n    return message;\n  },\n};\n\nfunction createBasePushRequest(): PushRequest {\n  return { label: \"\", message: undefined };\n}\n\nexport const PushRequest = {\n  encode(message: PushRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.label !== \"\") {\n      writer.uint32(10).string(message.label);\n    }\n    if (message.message !== undefined) {\n      Message.encode(message.message, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PushRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePushRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.label = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.message = Message.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<PushRequest>): PushRequest {\n    return PushRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<PushRequest>): PushRequest {\n    const message = createBasePushRequest();\n    message.label = object.label ?? \"\";\n    message.message = (object.message !== undefined && object.message !== null)\n      ? Message.fromPartial(object.message)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBasePushManyRequest(): PushManyRequest {\n  return { signature: undefined, label: \"\", messages: [] };\n}\n\nexport const PushManyRequest = {\n  encode(message: PushManyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.signature !== undefined) {\n      Signature.encode(message.signature, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.label !== \"\") {\n      writer.uint32(18).string(message.label);\n    }\n    for (const v of message.messages) {\n      Message.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PushManyRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePushManyRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.signature = Signature.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.label = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.messages.push(Message.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<PushManyRequest>): PushManyRequest {\n    return PushManyRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<PushManyRequest>): PushManyRequest {\n    const message = createBasePushManyRequest();\n    message.signature = (object.signature !== undefined && object.signature !== null)\n      ? Signature.fromPartial(object.signature)\n      : undefined;\n    message.label = object.label ?? \"\";\n    message.messages = object.messages?.map((e) => Message.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBasePushResponse(): PushResponse {\n  return {};\n}\n\nexport const PushResponse = {\n  encode(_: PushResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PushResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePushResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<PushResponse>): PushResponse {\n    return PushResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(_: DeepPartial<PushResponse>): PushResponse {\n    const message = createBasePushResponse();\n    return message;\n  },\n};\n\nfunction createBaseCountIdentitiesRequest(): CountIdentitiesRequest {\n  return {};\n}\n\nexport const CountIdentitiesRequest = {\n  encode(_: CountIdentitiesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CountIdentitiesRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCountIdentitiesRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<CountIdentitiesRequest>): CountIdentitiesRequest {\n    return CountIdentitiesRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(_: DeepPartial<CountIdentitiesRequest>): CountIdentitiesRequest {\n    const message = createBaseCountIdentitiesRequest();\n    return message;\n  },\n};\n\nfunction createBaseCountIdentitiesResponse(): CountIdentitiesResponse {\n  return { count: 0 };\n}\n\nexport const CountIdentitiesResponse = {\n  encode(message: CountIdentitiesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.count !== 0) {\n      writer.uint32(8).uint32(message.count);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CountIdentitiesResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCountIdentitiesResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.count = reader.uint32();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<CountIdentitiesResponse>): CountIdentitiesResponse {\n    return CountIdentitiesResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<CountIdentitiesResponse>): CountIdentitiesResponse {\n    const message = createBaseCountIdentitiesResponse();\n    message.count = object.count ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseBalanceRequest(): BalanceRequest {\n  return {};\n}\n\nexport const BalanceRequest = {\n  encode(_: BalanceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): BalanceRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBalanceRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<BalanceRequest>): BalanceRequest {\n    return BalanceRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(_: DeepPartial<BalanceRequest>): BalanceRequest {\n    const message = createBaseBalanceRequest();\n    return message;\n  },\n};\n\nfunction createBaseBalanceResponse(): BalanceResponse {\n  return { wei: 0, ether: 0 };\n}\n\nexport const BalanceResponse = {\n  encode(message: BalanceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.wei !== 0) {\n      writer.uint32(8).uint64(message.wei);\n    }\n    if (message.ether !== 0) {\n      writer.uint32(17).double(message.ether);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): BalanceResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBalanceResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.wei = longToNumber(reader.uint64() as Long);\n          continue;\n        case 2:\n          if (tag != 17) {\n            break;\n          }\n\n          message.ether = reader.double();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<BalanceResponse>): BalanceResponse {\n    return BalanceResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<BalanceResponse>): BalanceResponse {\n    const message = createBaseBalanceResponse();\n    message.wei = object.wei ?? 0;\n    message.ether = object.ether ?? 0;\n    return message;\n  },\n};\n\n/** The Relay Service definition. */\nexport type ECSRelayServiceDefinition = typeof ECSRelayServiceDefinition;\nexport const ECSRelayServiceDefinition = {\n  name: \"ECSRelayService\",\n  fullName: \"ecsrelay.ECSRelayService\",\n  methods: {\n    authenticate: {\n      name: \"Authenticate\",\n      requestType: Signature,\n      requestStream: false,\n      responseType: Identity,\n      responseStream: false,\n      options: {},\n    },\n    revoke: {\n      name: \"Revoke\",\n      requestType: Signature,\n      requestStream: false,\n      responseType: Identity,\n      responseStream: false,\n      options: {},\n    },\n    ping: {\n      name: \"Ping\",\n      requestType: Signature,\n      requestStream: false,\n      responseType: Identity,\n      responseStream: false,\n      options: {},\n    },\n    countAuthenticated: {\n      name: \"CountAuthenticated\",\n      requestType: CountIdentitiesRequest,\n      requestStream: false,\n      responseType: CountIdentitiesResponse,\n      responseStream: false,\n      options: {},\n    },\n    countConnected: {\n      name: \"CountConnected\",\n      requestType: CountIdentitiesRequest,\n      requestStream: false,\n      responseType: CountIdentitiesResponse,\n      responseStream: false,\n      options: {},\n    },\n    subscribe: {\n      name: \"Subscribe\",\n      requestType: SubscriptionRequest,\n      requestStream: false,\n      responseType: Subscription,\n      responseStream: false,\n      options: {},\n    },\n    unsubscribe: {\n      name: \"Unsubscribe\",\n      requestType: SubscriptionRequest,\n      requestStream: false,\n      responseType: Subscription,\n      responseStream: false,\n      options: {},\n    },\n    openStream: {\n      name: \"OpenStream\",\n      requestType: Signature,\n      requestStream: false,\n      responseType: Message,\n      responseStream: true,\n      options: {},\n    },\n    /** Push a stream of messages to be relayed. */\n    pushStream: {\n      name: \"PushStream\",\n      requestType: PushRequest,\n      requestStream: true,\n      responseType: PushResponse,\n      responseStream: true,\n      options: {},\n    },\n    /** Push a single message to be relayed. */\n    push: {\n      name: \"Push\",\n      requestType: PushRequest,\n      requestStream: false,\n      responseType: PushResponse,\n      responseStream: false,\n      options: {},\n    },\n    /** Minimum balance an account must have to be able to push. */\n    minBalanceForPush: {\n      name: \"MinBalanceForPush\",\n      requestType: BalanceRequest,\n      requestStream: false,\n      responseType: BalanceResponse,\n      responseStream: false,\n      options: {},\n    },\n  },\n} as const;\n\nexport interface ECSRelayServiceImplementation<CallContextExt = {}> {\n  authenticate(request: Signature, context: CallContext & CallContextExt): Promise<DeepPartial<Identity>>;\n  revoke(request: Signature, context: CallContext & CallContextExt): Promise<DeepPartial<Identity>>;\n  ping(request: Signature, context: CallContext & CallContextExt): Promise<DeepPartial<Identity>>;\n  countAuthenticated(\n    request: CountIdentitiesRequest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<CountIdentitiesResponse>>;\n  countConnected(\n    request: CountIdentitiesRequest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<CountIdentitiesResponse>>;\n  subscribe(request: SubscriptionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Subscription>>;\n  unsubscribe(request: SubscriptionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Subscription>>;\n  openStream(\n    request: Signature,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<Message>>;\n  /** Push a stream of messages to be relayed. */\n  pushStream(\n    request: AsyncIterable<PushRequest>,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<PushResponse>>;\n  /** Push a single message to be relayed. */\n  push(request: PushRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PushResponse>>;\n  /** Minimum balance an account must have to be able to push. */\n  minBalanceForPush(\n    request: BalanceRequest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<BalanceResponse>>;\n}\n\nexport interface ECSRelayServiceClient<CallOptionsExt = {}> {\n  authenticate(request: DeepPartial<Signature>, options?: CallOptions & CallOptionsExt): Promise<Identity>;\n  revoke(request: DeepPartial<Signature>, options?: CallOptions & CallOptionsExt): Promise<Identity>;\n  ping(request: DeepPartial<Signature>, options?: CallOptions & CallOptionsExt): Promise<Identity>;\n  countAuthenticated(\n    request: DeepPartial<CountIdentitiesRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<CountIdentitiesResponse>;\n  countConnected(\n    request: DeepPartial<CountIdentitiesRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<CountIdentitiesResponse>;\n  subscribe(request: DeepPartial<SubscriptionRequest>, options?: CallOptions & CallOptionsExt): Promise<Subscription>;\n  unsubscribe(request: DeepPartial<SubscriptionRequest>, options?: CallOptions & CallOptionsExt): Promise<Subscription>;\n  openStream(request: DeepPartial<Signature>, options?: CallOptions & CallOptionsExt): AsyncIterable<Message>;\n  /** Push a stream of messages to be relayed. */\n  pushStream(\n    request: AsyncIterable<DeepPartial<PushRequest>>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<PushResponse>;\n  /** Push a single message to be relayed. */\n  push(request: DeepPartial<PushRequest>, options?: CallOptions & CallOptionsExt): Promise<PushResponse>;\n  /** Minimum balance an account must have to be able to push. */\n  minBalanceForPush(\n    request: DeepPartial<BalanceRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<BalanceResponse>;\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar tsProtoGlobalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw \"Unable to locate global object\";\n})();\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\nfunction longToNumber(long: Long): number {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new tsProtoGlobalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  return long.toNumber();\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nexport type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };\n"],"mappings":"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","names":[]}