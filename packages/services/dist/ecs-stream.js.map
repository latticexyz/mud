{"version":3,"sources":["../protobuf/ts/ecs-stream/ecs-stream.ts"],"sourcesContent":["/* eslint-disable */\nimport Long from \"long\";\nimport type { CallContext, CallOptions } from \"nice-grpc-common\";\nimport _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"ecsstream\";\n\nexport interface TxMetadata {\n  to: string;\n  data: Uint8Array;\n  value: number;\n}\n\nexport interface ECSEvent {\n  eventType: string;\n  componentId: string;\n  entityId: string;\n  value: Uint8Array;\n  txHash: string;\n  txMetadata: TxMetadata | undefined;\n}\n\n/**\n * Request to subscribe to an ECSStream. The required parameter is 'worldAddress', while others\n * are opt-in based on which data the client is interested in receiving.\n */\nexport interface ECSStreamBlockBundleRequest {\n  worldAddress: string;\n  blockNumber: boolean;\n  blockHash: boolean;\n  blockTimestamp: boolean;\n  transactionsConfirmed: boolean;\n  ecsEvents: boolean;\n  ecsEventsIncludeTxMetadata: boolean;\n}\n\n/**\n * ECSStream response. The fields are populated based on the request which must have been sent when\n * starting the subscription.\n */\nexport interface ECSStreamBlockBundleReply {\n  blockNumber: number;\n  blockHash: string;\n  blockTimestamp: number;\n  transactionsConfirmed: string[];\n  ecsEvents: ECSEvent[];\n}\n\nfunction createBaseTxMetadata(): TxMetadata {\n  return { to: \"\", data: new Uint8Array(), value: 0 };\n}\n\nexport const TxMetadata = {\n  encode(message: TxMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.to !== \"\") {\n      writer.uint32(18).string(message.to);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n    if (message.value !== 0) {\n      writer.uint32(32).uint64(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxMetadata {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxMetadata();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.to = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.data = reader.bytes();\n          continue;\n        case 4:\n          if (tag != 32) {\n            break;\n          }\n\n          message.value = longToNumber(reader.uint64() as Long);\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<TxMetadata>): TxMetadata {\n    return TxMetadata.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<TxMetadata>): TxMetadata {\n    const message = createBaseTxMetadata();\n    message.to = object.to ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    message.value = object.value ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseECSEvent(): ECSEvent {\n  return { eventType: \"\", componentId: \"\", entityId: \"\", value: new Uint8Array(), txHash: \"\", txMetadata: undefined };\n}\n\nexport const ECSEvent = {\n  encode(message: ECSEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.eventType !== \"\") {\n      writer.uint32(10).string(message.eventType);\n    }\n    if (message.componentId !== \"\") {\n      writer.uint32(18).string(message.componentId);\n    }\n    if (message.entityId !== \"\") {\n      writer.uint32(26).string(message.entityId);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(34).bytes(message.value);\n    }\n    if (message.txHash !== \"\") {\n      writer.uint32(42).string(message.txHash);\n    }\n    if (message.txMetadata !== undefined) {\n      TxMetadata.encode(message.txMetadata, writer.uint32(50).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSEvent {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.eventType = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.componentId = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.entityId = reader.string();\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.value = reader.bytes();\n          continue;\n        case 5:\n          if (tag != 42) {\n            break;\n          }\n\n          message.txHash = reader.string();\n          continue;\n        case 6:\n          if (tag != 50) {\n            break;\n          }\n\n          message.txMetadata = TxMetadata.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSEvent>): ECSEvent {\n    return ECSEvent.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSEvent>): ECSEvent {\n    const message = createBaseECSEvent();\n    message.eventType = object.eventType ?? \"\";\n    message.componentId = object.componentId ?? \"\";\n    message.entityId = object.entityId ?? \"\";\n    message.value = object.value ?? new Uint8Array();\n    message.txHash = object.txHash ?? \"\";\n    message.txMetadata = (object.txMetadata !== undefined && object.txMetadata !== null)\n      ? TxMetadata.fromPartial(object.txMetadata)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseECSStreamBlockBundleRequest(): ECSStreamBlockBundleRequest {\n  return {\n    worldAddress: \"\",\n    blockNumber: false,\n    blockHash: false,\n    blockTimestamp: false,\n    transactionsConfirmed: false,\n    ecsEvents: false,\n    ecsEventsIncludeTxMetadata: false,\n  };\n}\n\nexport const ECSStreamBlockBundleRequest = {\n  encode(message: ECSStreamBlockBundleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.worldAddress !== \"\") {\n      writer.uint32(10).string(message.worldAddress);\n    }\n    if (message.blockNumber === true) {\n      writer.uint32(16).bool(message.blockNumber);\n    }\n    if (message.blockHash === true) {\n      writer.uint32(24).bool(message.blockHash);\n    }\n    if (message.blockTimestamp === true) {\n      writer.uint32(32).bool(message.blockTimestamp);\n    }\n    if (message.transactionsConfirmed === true) {\n      writer.uint32(40).bool(message.transactionsConfirmed);\n    }\n    if (message.ecsEvents === true) {\n      writer.uint32(48).bool(message.ecsEvents);\n    }\n    if (message.ecsEventsIncludeTxMetadata === true) {\n      writer.uint32(56).bool(message.ecsEventsIncludeTxMetadata);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStreamBlockBundleRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStreamBlockBundleRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n        case 2:\n          if (tag != 16) {\n            break;\n          }\n\n          message.blockNumber = reader.bool();\n          continue;\n        case 3:\n          if (tag != 24) {\n            break;\n          }\n\n          message.blockHash = reader.bool();\n          continue;\n        case 4:\n          if (tag != 32) {\n            break;\n          }\n\n          message.blockTimestamp = reader.bool();\n          continue;\n        case 5:\n          if (tag != 40) {\n            break;\n          }\n\n          message.transactionsConfirmed = reader.bool();\n          continue;\n        case 6:\n          if (tag != 48) {\n            break;\n          }\n\n          message.ecsEvents = reader.bool();\n          continue;\n        case 7:\n          if (tag != 56) {\n            break;\n          }\n\n          message.ecsEventsIncludeTxMetadata = reader.bool();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStreamBlockBundleRequest>): ECSStreamBlockBundleRequest {\n    return ECSStreamBlockBundleRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStreamBlockBundleRequest>): ECSStreamBlockBundleRequest {\n    const message = createBaseECSStreamBlockBundleRequest();\n    message.worldAddress = object.worldAddress ?? \"\";\n    message.blockNumber = object.blockNumber ?? false;\n    message.blockHash = object.blockHash ?? false;\n    message.blockTimestamp = object.blockTimestamp ?? false;\n    message.transactionsConfirmed = object.transactionsConfirmed ?? false;\n    message.ecsEvents = object.ecsEvents ?? false;\n    message.ecsEventsIncludeTxMetadata = object.ecsEventsIncludeTxMetadata ?? false;\n    return message;\n  },\n};\n\nfunction createBaseECSStreamBlockBundleReply(): ECSStreamBlockBundleReply {\n  return { blockNumber: 0, blockHash: \"\", blockTimestamp: 0, transactionsConfirmed: [], ecsEvents: [] };\n}\n\nexport const ECSStreamBlockBundleReply = {\n  encode(message: ECSStreamBlockBundleReply, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.blockNumber !== 0) {\n      writer.uint32(8).uint32(message.blockNumber);\n    }\n    if (message.blockHash !== \"\") {\n      writer.uint32(18).string(message.blockHash);\n    }\n    if (message.blockTimestamp !== 0) {\n      writer.uint32(24).uint32(message.blockTimestamp);\n    }\n    for (const v of message.transactionsConfirmed) {\n      writer.uint32(34).string(v!);\n    }\n    for (const v of message.ecsEvents) {\n      ECSEvent.encode(v!, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ECSStreamBlockBundleReply {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseECSStreamBlockBundleReply();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.blockNumber = reader.uint32();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.blockHash = reader.string();\n          continue;\n        case 3:\n          if (tag != 24) {\n            break;\n          }\n\n          message.blockTimestamp = reader.uint32();\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.transactionsConfirmed.push(reader.string());\n          continue;\n        case 5:\n          if (tag != 42) {\n            break;\n          }\n\n          message.ecsEvents.push(ECSEvent.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ECSStreamBlockBundleReply>): ECSStreamBlockBundleReply {\n    return ECSStreamBlockBundleReply.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ECSStreamBlockBundleReply>): ECSStreamBlockBundleReply {\n    const message = createBaseECSStreamBlockBundleReply();\n    message.blockNumber = object.blockNumber ?? 0;\n    message.blockHash = object.blockHash ?? \"\";\n    message.blockTimestamp = object.blockTimestamp ?? 0;\n    message.transactionsConfirmed = object.transactionsConfirmed?.map((e) => e) || [];\n    message.ecsEvents = object.ecsEvents?.map((e) => ECSEvent.fromPartial(e)) || [];\n    return message;\n  },\n};\n\n/** The Stream Service definition. */\nexport type ECSStreamServiceDefinition = typeof ECSStreamServiceDefinition;\nexport const ECSStreamServiceDefinition = {\n  name: \"ECSStreamService\",\n  fullName: \"ecsstream.ECSStreamService\",\n  methods: {\n    /** Opens a cursor to receive the latest ECS events and additional data specified via request. */\n    subscribeToStreamLatest: {\n      name: \"SubscribeToStreamLatest\",\n      requestType: ECSStreamBlockBundleRequest,\n      requestStream: false,\n      responseType: ECSStreamBlockBundleReply,\n      responseStream: true,\n      options: {},\n    },\n  },\n} as const;\n\nexport interface ECSStreamServiceImplementation<CallContextExt = {}> {\n  /** Opens a cursor to receive the latest ECS events and additional data specified via request. */\n  subscribeToStreamLatest(\n    request: ECSStreamBlockBundleRequest,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<ECSStreamBlockBundleReply>>;\n}\n\nexport interface ECSStreamServiceClient<CallOptionsExt = {}> {\n  /** Opens a cursor to receive the latest ECS events and additional data specified via request. */\n  subscribeToStreamLatest(\n    request: DeepPartial<ECSStreamBlockBundleRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<ECSStreamBlockBundleReply>;\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar tsProtoGlobalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw \"Unable to locate global object\";\n})();\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\nfunction longToNumber(long: Long): number {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new tsProtoGlobalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  return long.toNumber();\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nexport type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };\n"],"mappings":"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","names":[]}