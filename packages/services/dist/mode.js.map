{"version":3,"sources":["../protobuf/ts/mode/mode.ts"],"sourcesContent":["/* eslint-disable */\nimport type { CallContext, CallOptions } from \"nice-grpc-common\";\nimport _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"mode\";\n\n/** A Row is just a list of raw bytes. */\nexport interface Row {\n  values: Uint8Array[];\n}\n\n/** A GenericTable is a representation of a table. */\nexport interface GenericTable {\n  cols: string[];\n  rows: Row[];\n  types: string[];\n}\n\nexport interface QueryLayerResponse {\n  tables: { [key: string]: GenericTable };\n}\n\nexport interface QueryLayerResponse_TablesEntry {\n  key: string;\n  value: GenericTable | undefined;\n}\n\nexport interface QueryLayerStateResponse {\n  chainTables: { [key: string]: GenericTable };\n  worldTables: { [key: string]: GenericTable };\n}\n\nexport interface QueryLayerStateResponse_ChainTablesEntry {\n  key: string;\n  value: GenericTable | undefined;\n}\n\nexport interface QueryLayerStateResponse_WorldTablesEntry {\n  key: string;\n  value: GenericTable | undefined;\n}\n\nexport interface QueryLayerStateStreamResponse {\n  inserted: QueryLayerStateResponse | undefined;\n  updated: QueryLayerStateResponse | undefined;\n  deleted: QueryLayerStateResponse | undefined;\n}\n\nexport interface Namespace {\n  chainId: string;\n  worldAddress: string;\n}\n\nexport interface StateRequest {\n  /** Namespace. */\n  namespace:\n    | Namespace\n    | undefined;\n  /**\n   * Selection of world and chain tables. If left empty, all tables\n   * are included.\n   */\n  worldTables: string[];\n  chainTables: string[];\n}\n\nexport interface SingleStateRequest {\n  /** Namespace. */\n  namespace:\n    | Namespace\n    | undefined;\n  /** Table. */\n  table: string;\n  /** Filters. */\n  filter: Filter[];\n  /** Projections. */\n  project: ProjectedField[];\n}\n\nexport interface FindRequest {\n  from: string;\n  filter: Filter[];\n  project: ProjectedField[];\n  /** Namespace. */\n  namespace:\n    | Namespace\n    | undefined;\n  /** Options. */\n  options: FindRequestOptions | undefined;\n}\n\nexport interface FindAllRequest {\n  tables: string[];\n  /** Namespace. */\n  namespace:\n    | Namespace\n    | undefined;\n  /** Options. */\n  options: FindRequestOptions | undefined;\n}\n\nexport interface JoinRequest {\n  on: FieldPair | undefined;\n  children: FindRequest[];\n  /** Namespace. */\n  namespace: Namespace | undefined;\n}\n\nexport interface DeleteRequest {\n  from: string;\n  filter: Filter[];\n}\n\nexport interface UpdateRequest {\n  target: string;\n  filter: Filter[];\n  row: { [key: string]: string };\n}\n\nexport interface UpdateRequest_RowEntry {\n  key: string;\n  value: string;\n}\n\nexport interface InsertRequest {\n  into: string;\n  row: { [key: string]: string };\n}\n\nexport interface InsertRequest_RowEntry {\n  key: string;\n  value: string;\n}\n\nexport interface CreateRequest {\n  name: string;\n}\n\nexport interface FindRequestOptions {\n  compressed: boolean;\n  group: boolean;\n  negate: boolean;\n}\n\nexport interface Field {\n  tableName: string;\n  tableField: string;\n}\n\nexport interface FieldPair {\n  field1: Field | undefined;\n  field2: Field | undefined;\n}\n\nexport interface ProjectedField {\n  field: Field | undefined;\n  rename?: string | undefined;\n}\n\nexport interface Filter {\n  field: Field | undefined;\n  operator: string;\n  value: string;\n  function: string;\n}\n\nfunction createBaseRow(): Row {\n  return { values: [] };\n}\n\nexport const Row = {\n  encode(message: Row, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.values) {\n      writer.uint32(18).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Row {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRow();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.values.push(reader.bytes());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Row>): Row {\n    return Row.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Row>): Row {\n    const message = createBaseRow();\n    message.values = object.values?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseGenericTable(): GenericTable {\n  return { cols: [], rows: [], types: [] };\n}\n\nexport const GenericTable = {\n  encode(message: GenericTable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.cols) {\n      writer.uint32(10).string(v!);\n    }\n    for (const v of message.rows) {\n      Row.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.types) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): GenericTable {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseGenericTable();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.cols.push(reader.string());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.rows.push(Row.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.types.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<GenericTable>): GenericTable {\n    return GenericTable.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<GenericTable>): GenericTable {\n    const message = createBaseGenericTable();\n    message.cols = object.cols?.map((e) => e) || [];\n    message.rows = object.rows?.map((e) => Row.fromPartial(e)) || [];\n    message.types = object.types?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerResponse(): QueryLayerResponse {\n  return { tables: {} };\n}\n\nexport const QueryLayerResponse = {\n  encode(message: QueryLayerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    Object.entries(message.tables).forEach(([key, value]) => {\n      QueryLayerResponse_TablesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();\n    });\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          const entry1 = QueryLayerResponse_TablesEntry.decode(reader, reader.uint32());\n          if (entry1.value !== undefined) {\n            message.tables[entry1.key] = entry1.value;\n          }\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerResponse>): QueryLayerResponse {\n    return QueryLayerResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerResponse>): QueryLayerResponse {\n    const message = createBaseQueryLayerResponse();\n    message.tables = Object.entries(object.tables ?? {}).reduce<{ [key: string]: GenericTable }>(\n      (acc, [key, value]) => {\n        if (value !== undefined) {\n          acc[key] = GenericTable.fromPartial(value);\n        }\n        return acc;\n      },\n      {},\n    );\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerResponse_TablesEntry(): QueryLayerResponse_TablesEntry {\n  return { key: \"\", value: undefined };\n}\n\nexport const QueryLayerResponse_TablesEntry = {\n  encode(message: QueryLayerResponse_TablesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== undefined) {\n      GenericTable.encode(message.value, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerResponse_TablesEntry {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerResponse_TablesEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.key = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.value = GenericTable.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerResponse_TablesEntry>): QueryLayerResponse_TablesEntry {\n    return QueryLayerResponse_TablesEntry.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerResponse_TablesEntry>): QueryLayerResponse_TablesEntry {\n    const message = createBaseQueryLayerResponse_TablesEntry();\n    message.key = object.key ?? \"\";\n    message.value = (object.value !== undefined && object.value !== null)\n      ? GenericTable.fromPartial(object.value)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerStateResponse(): QueryLayerStateResponse {\n  return { chainTables: {}, worldTables: {} };\n}\n\nexport const QueryLayerStateResponse = {\n  encode(message: QueryLayerStateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    Object.entries(message.chainTables).forEach(([key, value]) => {\n      QueryLayerStateResponse_ChainTablesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();\n    });\n    Object.entries(message.worldTables).forEach(([key, value]) => {\n      QueryLayerStateResponse_WorldTablesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();\n    });\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerStateResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerStateResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          const entry1 = QueryLayerStateResponse_ChainTablesEntry.decode(reader, reader.uint32());\n          if (entry1.value !== undefined) {\n            message.chainTables[entry1.key] = entry1.value;\n          }\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          const entry2 = QueryLayerStateResponse_WorldTablesEntry.decode(reader, reader.uint32());\n          if (entry2.value !== undefined) {\n            message.worldTables[entry2.key] = entry2.value;\n          }\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerStateResponse>): QueryLayerStateResponse {\n    return QueryLayerStateResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerStateResponse>): QueryLayerStateResponse {\n    const message = createBaseQueryLayerStateResponse();\n    message.chainTables = Object.entries(object.chainTables ?? {}).reduce<{ [key: string]: GenericTable }>(\n      (acc, [key, value]) => {\n        if (value !== undefined) {\n          acc[key] = GenericTable.fromPartial(value);\n        }\n        return acc;\n      },\n      {},\n    );\n    message.worldTables = Object.entries(object.worldTables ?? {}).reduce<{ [key: string]: GenericTable }>(\n      (acc, [key, value]) => {\n        if (value !== undefined) {\n          acc[key] = GenericTable.fromPartial(value);\n        }\n        return acc;\n      },\n      {},\n    );\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerStateResponse_ChainTablesEntry(): QueryLayerStateResponse_ChainTablesEntry {\n  return { key: \"\", value: undefined };\n}\n\nexport const QueryLayerStateResponse_ChainTablesEntry = {\n  encode(message: QueryLayerStateResponse_ChainTablesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== undefined) {\n      GenericTable.encode(message.value, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerStateResponse_ChainTablesEntry {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerStateResponse_ChainTablesEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.key = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.value = GenericTable.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerStateResponse_ChainTablesEntry>): QueryLayerStateResponse_ChainTablesEntry {\n    return QueryLayerStateResponse_ChainTablesEntry.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerStateResponse_ChainTablesEntry>): QueryLayerStateResponse_ChainTablesEntry {\n    const message = createBaseQueryLayerStateResponse_ChainTablesEntry();\n    message.key = object.key ?? \"\";\n    message.value = (object.value !== undefined && object.value !== null)\n      ? GenericTable.fromPartial(object.value)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerStateResponse_WorldTablesEntry(): QueryLayerStateResponse_WorldTablesEntry {\n  return { key: \"\", value: undefined };\n}\n\nexport const QueryLayerStateResponse_WorldTablesEntry = {\n  encode(message: QueryLayerStateResponse_WorldTablesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== undefined) {\n      GenericTable.encode(message.value, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerStateResponse_WorldTablesEntry {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerStateResponse_WorldTablesEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.key = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.value = GenericTable.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerStateResponse_WorldTablesEntry>): QueryLayerStateResponse_WorldTablesEntry {\n    return QueryLayerStateResponse_WorldTablesEntry.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerStateResponse_WorldTablesEntry>): QueryLayerStateResponse_WorldTablesEntry {\n    const message = createBaseQueryLayerStateResponse_WorldTablesEntry();\n    message.key = object.key ?? \"\";\n    message.value = (object.value !== undefined && object.value !== null)\n      ? GenericTable.fromPartial(object.value)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseQueryLayerStateStreamResponse(): QueryLayerStateStreamResponse {\n  return { inserted: undefined, updated: undefined, deleted: undefined };\n}\n\nexport const QueryLayerStateStreamResponse = {\n  encode(message: QueryLayerStateStreamResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.inserted !== undefined) {\n      QueryLayerStateResponse.encode(message.inserted, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.updated !== undefined) {\n      QueryLayerStateResponse.encode(message.updated, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.deleted !== undefined) {\n      QueryLayerStateResponse.encode(message.deleted, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLayerStateStreamResponse {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseQueryLayerStateStreamResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.inserted = QueryLayerStateResponse.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.updated = QueryLayerStateResponse.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.deleted = QueryLayerStateResponse.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<QueryLayerStateStreamResponse>): QueryLayerStateStreamResponse {\n    return QueryLayerStateStreamResponse.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<QueryLayerStateStreamResponse>): QueryLayerStateStreamResponse {\n    const message = createBaseQueryLayerStateStreamResponse();\n    message.inserted = (object.inserted !== undefined && object.inserted !== null)\n      ? QueryLayerStateResponse.fromPartial(object.inserted)\n      : undefined;\n    message.updated = (object.updated !== undefined && object.updated !== null)\n      ? QueryLayerStateResponse.fromPartial(object.updated)\n      : undefined;\n    message.deleted = (object.deleted !== undefined && object.deleted !== null)\n      ? QueryLayerStateResponse.fromPartial(object.deleted)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseNamespace(): Namespace {\n  return { chainId: \"\", worldAddress: \"\" };\n}\n\nexport const Namespace = {\n  encode(message: Namespace, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.chainId !== \"\") {\n      writer.uint32(10).string(message.chainId);\n    }\n    if (message.worldAddress !== \"\") {\n      writer.uint32(18).string(message.worldAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Namespace {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseNamespace();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.chainId = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.worldAddress = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Namespace>): Namespace {\n    return Namespace.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Namespace>): Namespace {\n    const message = createBaseNamespace();\n    message.chainId = object.chainId ?? \"\";\n    message.worldAddress = object.worldAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseStateRequest(): StateRequest {\n  return { namespace: undefined, worldTables: [], chainTables: [] };\n}\n\nexport const StateRequest = {\n  encode(message: StateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.namespace !== undefined) {\n      Namespace.encode(message.namespace, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.worldTables) {\n      writer.uint32(18).string(v!);\n    }\n    for (const v of message.chainTables) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): StateRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseStateRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.namespace = Namespace.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.worldTables.push(reader.string());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.chainTables.push(reader.string());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<StateRequest>): StateRequest {\n    return StateRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<StateRequest>): StateRequest {\n    const message = createBaseStateRequest();\n    message.namespace = (object.namespace !== undefined && object.namespace !== null)\n      ? Namespace.fromPartial(object.namespace)\n      : undefined;\n    message.worldTables = object.worldTables?.map((e) => e) || [];\n    message.chainTables = object.chainTables?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseSingleStateRequest(): SingleStateRequest {\n  return { namespace: undefined, table: \"\", filter: [], project: [] };\n}\n\nexport const SingleStateRequest = {\n  encode(message: SingleStateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.namespace !== undefined) {\n      Namespace.encode(message.namespace, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.table !== \"\") {\n      writer.uint32(18).string(message.table);\n    }\n    for (const v of message.filter) {\n      Filter.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.project) {\n      ProjectedField.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SingleStateRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSingleStateRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.namespace = Namespace.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.table = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.filter.push(Filter.decode(reader, reader.uint32()));\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.project.push(ProjectedField.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<SingleStateRequest>): SingleStateRequest {\n    return SingleStateRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<SingleStateRequest>): SingleStateRequest {\n    const message = createBaseSingleStateRequest();\n    message.namespace = (object.namespace !== undefined && object.namespace !== null)\n      ? Namespace.fromPartial(object.namespace)\n      : undefined;\n    message.table = object.table ?? \"\";\n    message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];\n    message.project = object.project?.map((e) => ProjectedField.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseFindRequest(): FindRequest {\n  return { from: \"\", filter: [], project: [], namespace: undefined, options: undefined };\n}\n\nexport const FindRequest = {\n  encode(message: FindRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.from !== \"\") {\n      writer.uint32(10).string(message.from);\n    }\n    for (const v of message.filter) {\n      Filter.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.project) {\n      ProjectedField.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.namespace !== undefined) {\n      Namespace.encode(message.namespace, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.options !== undefined) {\n      FindRequestOptions.encode(message.options, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): FindRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFindRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.from = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.filter.push(Filter.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.project.push(ProjectedField.decode(reader, reader.uint32()));\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.namespace = Namespace.decode(reader, reader.uint32());\n          continue;\n        case 5:\n          if (tag != 42) {\n            break;\n          }\n\n          message.options = FindRequestOptions.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<FindRequest>): FindRequest {\n    return FindRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<FindRequest>): FindRequest {\n    const message = createBaseFindRequest();\n    message.from = object.from ?? \"\";\n    message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];\n    message.project = object.project?.map((e) => ProjectedField.fromPartial(e)) || [];\n    message.namespace = (object.namespace !== undefined && object.namespace !== null)\n      ? Namespace.fromPartial(object.namespace)\n      : undefined;\n    message.options = (object.options !== undefined && object.options !== null)\n      ? FindRequestOptions.fromPartial(object.options)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseFindAllRequest(): FindAllRequest {\n  return { tables: [], namespace: undefined, options: undefined };\n}\n\nexport const FindAllRequest = {\n  encode(message: FindAllRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.tables) {\n      writer.uint32(10).string(v!);\n    }\n    if (message.namespace !== undefined) {\n      Namespace.encode(message.namespace, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.options !== undefined) {\n      FindRequestOptions.encode(message.options, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): FindAllRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFindAllRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.tables.push(reader.string());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.namespace = Namespace.decode(reader, reader.uint32());\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.options = FindRequestOptions.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<FindAllRequest>): FindAllRequest {\n    return FindAllRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<FindAllRequest>): FindAllRequest {\n    const message = createBaseFindAllRequest();\n    message.tables = object.tables?.map((e) => e) || [];\n    message.namespace = (object.namespace !== undefined && object.namespace !== null)\n      ? Namespace.fromPartial(object.namespace)\n      : undefined;\n    message.options = (object.options !== undefined && object.options !== null)\n      ? FindRequestOptions.fromPartial(object.options)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseJoinRequest(): JoinRequest {\n  return { on: undefined, children: [], namespace: undefined };\n}\n\nexport const JoinRequest = {\n  encode(message: JoinRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.on !== undefined) {\n      FieldPair.encode(message.on, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.children) {\n      FindRequest.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.namespace !== undefined) {\n      Namespace.encode(message.namespace, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): JoinRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseJoinRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.on = FieldPair.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.children.push(FindRequest.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.namespace = Namespace.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<JoinRequest>): JoinRequest {\n    return JoinRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<JoinRequest>): JoinRequest {\n    const message = createBaseJoinRequest();\n    message.on = (object.on !== undefined && object.on !== null) ? FieldPair.fromPartial(object.on) : undefined;\n    message.children = object.children?.map((e) => FindRequest.fromPartial(e)) || [];\n    message.namespace = (object.namespace !== undefined && object.namespace !== null)\n      ? Namespace.fromPartial(object.namespace)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseDeleteRequest(): DeleteRequest {\n  return { from: \"\", filter: [] };\n}\n\nexport const DeleteRequest = {\n  encode(message: DeleteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.from !== \"\") {\n      writer.uint32(10).string(message.from);\n    }\n    for (const v of message.filter) {\n      Filter.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDeleteRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.from = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.filter.push(Filter.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<DeleteRequest>): DeleteRequest {\n    return DeleteRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<DeleteRequest>): DeleteRequest {\n    const message = createBaseDeleteRequest();\n    message.from = object.from ?? \"\";\n    message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseUpdateRequest(): UpdateRequest {\n  return { target: \"\", filter: [], row: {} };\n}\n\nexport const UpdateRequest = {\n  encode(message: UpdateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.target !== \"\") {\n      writer.uint32(10).string(message.target);\n    }\n    for (const v of message.filter) {\n      Filter.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    Object.entries(message.row).forEach(([key, value]) => {\n      UpdateRequest_RowEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();\n    });\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseUpdateRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.target = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.filter.push(Filter.decode(reader, reader.uint32()));\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          const entry3 = UpdateRequest_RowEntry.decode(reader, reader.uint32());\n          if (entry3.value !== undefined) {\n            message.row[entry3.key] = entry3.value;\n          }\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<UpdateRequest>): UpdateRequest {\n    return UpdateRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<UpdateRequest>): UpdateRequest {\n    const message = createBaseUpdateRequest();\n    message.target = object.target ?? \"\";\n    message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];\n    message.row = Object.entries(object.row ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {\n      if (value !== undefined) {\n        acc[key] = String(value);\n      }\n      return acc;\n    }, {});\n    return message;\n  },\n};\n\nfunction createBaseUpdateRequest_RowEntry(): UpdateRequest_RowEntry {\n  return { key: \"\", value: \"\" };\n}\n\nexport const UpdateRequest_RowEntry = {\n  encode(message: UpdateRequest_RowEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateRequest_RowEntry {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseUpdateRequest_RowEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.key = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.value = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<UpdateRequest_RowEntry>): UpdateRequest_RowEntry {\n    return UpdateRequest_RowEntry.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<UpdateRequest_RowEntry>): UpdateRequest_RowEntry {\n    const message = createBaseUpdateRequest_RowEntry();\n    message.key = object.key ?? \"\";\n    message.value = object.value ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseInsertRequest(): InsertRequest {\n  return { into: \"\", row: {} };\n}\n\nexport const InsertRequest = {\n  encode(message: InsertRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.into !== \"\") {\n      writer.uint32(10).string(message.into);\n    }\n    Object.entries(message.row).forEach(([key, value]) => {\n      InsertRequest_RowEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();\n    });\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): InsertRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseInsertRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.into = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          const entry3 = InsertRequest_RowEntry.decode(reader, reader.uint32());\n          if (entry3.value !== undefined) {\n            message.row[entry3.key] = entry3.value;\n          }\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<InsertRequest>): InsertRequest {\n    return InsertRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<InsertRequest>): InsertRequest {\n    const message = createBaseInsertRequest();\n    message.into = object.into ?? \"\";\n    message.row = Object.entries(object.row ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {\n      if (value !== undefined) {\n        acc[key] = String(value);\n      }\n      return acc;\n    }, {});\n    return message;\n  },\n};\n\nfunction createBaseInsertRequest_RowEntry(): InsertRequest_RowEntry {\n  return { key: \"\", value: \"\" };\n}\n\nexport const InsertRequest_RowEntry = {\n  encode(message: InsertRequest_RowEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): InsertRequest_RowEntry {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseInsertRequest_RowEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.key = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.value = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<InsertRequest_RowEntry>): InsertRequest_RowEntry {\n    return InsertRequest_RowEntry.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<InsertRequest_RowEntry>): InsertRequest_RowEntry {\n    const message = createBaseInsertRequest_RowEntry();\n    message.key = object.key ?? \"\";\n    message.value = object.value ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseCreateRequest(): CreateRequest {\n  return { name: \"\" };\n}\n\nexport const CreateRequest = {\n  encode(message: CreateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CreateRequest {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCreateRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.name = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<CreateRequest>): CreateRequest {\n    return CreateRequest.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<CreateRequest>): CreateRequest {\n    const message = createBaseCreateRequest();\n    message.name = object.name ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseFindRequestOptions(): FindRequestOptions {\n  return { compressed: false, group: false, negate: false };\n}\n\nexport const FindRequestOptions = {\n  encode(message: FindRequestOptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.compressed === true) {\n      writer.uint32(8).bool(message.compressed);\n    }\n    if (message.group === true) {\n      writer.uint32(16).bool(message.group);\n    }\n    if (message.negate === true) {\n      writer.uint32(24).bool(message.negate);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): FindRequestOptions {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFindRequestOptions();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 8) {\n            break;\n          }\n\n          message.compressed = reader.bool();\n          continue;\n        case 2:\n          if (tag != 16) {\n            break;\n          }\n\n          message.group = reader.bool();\n          continue;\n        case 3:\n          if (tag != 24) {\n            break;\n          }\n\n          message.negate = reader.bool();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<FindRequestOptions>): FindRequestOptions {\n    return FindRequestOptions.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<FindRequestOptions>): FindRequestOptions {\n    const message = createBaseFindRequestOptions();\n    message.compressed = object.compressed ?? false;\n    message.group = object.group ?? false;\n    message.negate = object.negate ?? false;\n    return message;\n  },\n};\n\nfunction createBaseField(): Field {\n  return { tableName: \"\", tableField: \"\" };\n}\n\nexport const Field = {\n  encode(message: Field, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.tableName !== \"\") {\n      writer.uint32(10).string(message.tableName);\n    }\n    if (message.tableField !== \"\") {\n      writer.uint32(18).string(message.tableField);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Field {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseField();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.tableName = reader.string();\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.tableField = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Field>): Field {\n    return Field.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Field>): Field {\n    const message = createBaseField();\n    message.tableName = object.tableName ?? \"\";\n    message.tableField = object.tableField ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseFieldPair(): FieldPair {\n  return { field1: undefined, field2: undefined };\n}\n\nexport const FieldPair = {\n  encode(message: FieldPair, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.field1 !== undefined) {\n      Field.encode(message.field1, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.field2 !== undefined) {\n      Field.encode(message.field2, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): FieldPair {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFieldPair();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.field1 = Field.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.field2 = Field.decode(reader, reader.uint32());\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<FieldPair>): FieldPair {\n    return FieldPair.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<FieldPair>): FieldPair {\n    const message = createBaseFieldPair();\n    message.field1 = (object.field1 !== undefined && object.field1 !== null)\n      ? Field.fromPartial(object.field1)\n      : undefined;\n    message.field2 = (object.field2 !== undefined && object.field2 !== null)\n      ? Field.fromPartial(object.field2)\n      : undefined;\n    return message;\n  },\n};\n\nfunction createBaseProjectedField(): ProjectedField {\n  return { field: undefined, rename: undefined };\n}\n\nexport const ProjectedField = {\n  encode(message: ProjectedField, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.field !== undefined) {\n      Field.encode(message.field, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.rename !== undefined) {\n      writer.uint32(18).string(message.rename);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ProjectedField {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProjectedField();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.field = Field.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.rename = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<ProjectedField>): ProjectedField {\n    return ProjectedField.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<ProjectedField>): ProjectedField {\n    const message = createBaseProjectedField();\n    message.field = (object.field !== undefined && object.field !== null) ? Field.fromPartial(object.field) : undefined;\n    message.rename = object.rename ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseFilter(): Filter {\n  return { field: undefined, operator: \"\", value: \"\", function: \"\" };\n}\n\nexport const Filter = {\n  encode(message: Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.field !== undefined) {\n      Field.encode(message.field, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.operator !== \"\") {\n      writer.uint32(18).string(message.operator);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(26).string(message.value);\n    }\n    if (message.function !== \"\") {\n      writer.uint32(34).string(message.function);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Filter {\n    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFilter();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag != 10) {\n            break;\n          }\n\n          message.field = Field.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag != 18) {\n            break;\n          }\n\n          message.operator = reader.string();\n          continue;\n        case 3:\n          if (tag != 26) {\n            break;\n          }\n\n          message.value = reader.string();\n          continue;\n        case 4:\n          if (tag != 34) {\n            break;\n          }\n\n          message.function = reader.string();\n          continue;\n      }\n      if ((tag & 7) == 4 || tag == 0) {\n        break;\n      }\n      reader.skipType(tag & 7);\n    }\n    return message;\n  },\n\n  create(base?: DeepPartial<Filter>): Filter {\n    return Filter.fromPartial(base ?? {});\n  },\n\n  fromPartial(object: DeepPartial<Filter>): Filter {\n    const message = createBaseFilter();\n    message.field = (object.field !== undefined && object.field !== null) ? Field.fromPartial(object.field) : undefined;\n    message.operator = object.operator ?? \"\";\n    message.value = object.value ?? \"\";\n    message.function = object.function ?? \"\";\n    return message;\n  },\n};\n\nexport type QueryLayerDefinition = typeof QueryLayerDefinition;\nexport const QueryLayerDefinition = {\n  name: \"QueryLayer\",\n  fullName: \"mode.QueryLayer\",\n  methods: {\n    /** Get state endpoint. */\n    getState: {\n      name: \"GetState\",\n      requestType: StateRequest,\n      requestStream: false,\n      responseType: QueryLayerStateResponse,\n      responseStream: false,\n      options: {},\n    },\n    /** Stream state endpoint. */\n    streamState: {\n      name: \"StreamState\",\n      requestType: StateRequest,\n      requestStream: false,\n      responseType: QueryLayerStateStreamResponse,\n      responseStream: true,\n      options: {},\n    },\n    /** Get state from single table endpoint. */\n    single__GetState: {\n      name: \"Single__GetState\",\n      requestType: SingleStateRequest,\n      requestStream: false,\n      responseType: QueryLayerStateResponse,\n      responseStream: false,\n      options: {},\n    },\n    /** Stream state from single table endpoint. */\n    single__StreamState: {\n      name: \"Single__StreamState\",\n      requestType: SingleStateRequest,\n      requestStream: false,\n      responseType: QueryLayerStateStreamResponse,\n      responseStream: true,\n      options: {},\n    },\n  },\n} as const;\n\nexport interface QueryLayerServiceImplementation<CallContextExt = {}> {\n  /** Get state endpoint. */\n  getState(request: StateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<QueryLayerStateResponse>>;\n  /** Stream state endpoint. */\n  streamState(\n    request: StateRequest,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<QueryLayerStateStreamResponse>>;\n  /** Get state from single table endpoint. */\n  single__GetState(\n    request: SingleStateRequest,\n    context: CallContext & CallContextExt,\n  ): Promise<DeepPartial<QueryLayerStateResponse>>;\n  /** Stream state from single table endpoint. */\n  single__StreamState(\n    request: SingleStateRequest,\n    context: CallContext & CallContextExt,\n  ): ServerStreamingMethodResult<DeepPartial<QueryLayerStateStreamResponse>>;\n}\n\nexport interface QueryLayerClient<CallOptionsExt = {}> {\n  /** Get state endpoint. */\n  getState(\n    request: DeepPartial<StateRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<QueryLayerStateResponse>;\n  /** Stream state endpoint. */\n  streamState(\n    request: DeepPartial<StateRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<QueryLayerStateStreamResponse>;\n  /** Get state from single table endpoint. */\n  single__GetState(\n    request: DeepPartial<SingleStateRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): Promise<QueryLayerStateResponse>;\n  /** Stream state from single table endpoint. */\n  single__StreamState(\n    request: DeepPartial<SingleStateRequest>,\n    options?: CallOptions & CallOptionsExt,\n  ): AsyncIterable<QueryLayerStateStreamResponse>;\n}\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\nexport type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };\n"],"mappings":"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","names":[]}