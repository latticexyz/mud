// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.3
// source: proto/ecs-snapshot.proto

package ecs_snapshot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECSState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentIdIdx uint32 `protobuf:"varint,1,opt,name=component_id_idx,json=componentIdIdx,proto3" json:"component_id_idx,omitempty"`
	EntityIdIdx    uint32 `protobuf:"varint,2,opt,name=entity_id_idx,json=entityIdIdx,proto3" json:"entity_id_idx,omitempty"`
	Value          []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ECSState) Reset() {
	*x = ECSState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSState) ProtoMessage() {}

func (x *ECSState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSState.ProtoReflect.Descriptor instead.
func (*ECSState) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *ECSState) GetComponentIdIdx() uint32 {
	if x != nil {
		return x.ComponentIdIdx
	}
	return 0
}

func (x *ECSState) GetEntityIdIdx() uint32 {
	if x != nil {
		return x.EntityIdIdx
	}
	return 0
}

func (x *ECSState) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ECSStateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            []*ECSState `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
	StateComponents  []string    `protobuf:"bytes,2,rep,name=stateComponents,proto3" json:"stateComponents,omitempty"`
	StateEntities    []string    `protobuf:"bytes,3,rep,name=stateEntities,proto3" json:"stateEntities,omitempty"`
	StateHash        string      `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	StartBlockNumber uint32      `protobuf:"varint,5,opt,name=startBlockNumber,proto3" json:"startBlockNumber,omitempty"`
	EndBlockNumber   uint32      `protobuf:"varint,6,opt,name=endBlockNumber,proto3" json:"endBlockNumber,omitempty"`
	WorldAddress     string      `protobuf:"bytes,7,opt,name=worldAddress,proto3" json:"worldAddress,omitempty"`
}

func (x *ECSStateSnapshot) Reset() {
	*x = ECSStateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateSnapshot) ProtoMessage() {}

func (x *ECSStateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateSnapshot.ProtoReflect.Descriptor instead.
func (*ECSStateSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *ECSStateSnapshot) GetState() []*ECSState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ECSStateSnapshot) GetStateComponents() []string {
	if x != nil {
		return x.StateComponents
	}
	return nil
}

func (x *ECSStateSnapshot) GetStateEntities() []string {
	if x != nil {
		return x.StateEntities
	}
	return nil
}

func (x *ECSStateSnapshot) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *ECSStateSnapshot) GetStartBlockNumber() uint32 {
	if x != nil {
		return x.StartBlockNumber
	}
	return 0
}

func (x *ECSStateSnapshot) GetEndBlockNumber() uint32 {
	if x != nil {
		return x.EndBlockNumber
	}
	return 0
}

func (x *ECSStateSnapshot) GetWorldAddress() string {
	if x != nil {
		return x.WorldAddress
	}
	return ""
}

type Worlds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldAddress []string `protobuf:"bytes,1,rep,name=worldAddress,proto3" json:"worldAddress,omitempty"`
}

func (x *Worlds) Reset() {
	*x = Worlds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worlds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worlds) ProtoMessage() {}

func (x *Worlds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worlds.ProtoReflect.Descriptor instead.
func (*Worlds) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *Worlds) GetWorldAddress() []string {
	if x != nil {
		return x.WorldAddress
	}
	return nil
}

// The request message for the latest ECS state.
type ECSStateRequestLatest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldAddress string `protobuf:"bytes,1,opt,name=worldAddress,proto3" json:"worldAddress,omitempty"`
}

func (x *ECSStateRequestLatest) Reset() {
	*x = ECSStateRequestLatest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateRequestLatest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateRequestLatest) ProtoMessage() {}

func (x *ECSStateRequestLatest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateRequestLatest.ProtoReflect.Descriptor instead.
func (*ECSStateRequestLatest) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *ECSStateRequestLatest) GetWorldAddress() string {
	if x != nil {
		return x.WorldAddress
	}
	return ""
}

// The request message for the latest ECS statem, pruned for specific address.
type ECSStateRequestLatestStreamPruned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldAddress     string  `protobuf:"bytes,1,opt,name=worldAddress,proto3" json:"worldAddress,omitempty"`
	PruneAddress     string  `protobuf:"bytes,2,opt,name=pruneAddress,proto3" json:"pruneAddress,omitempty"`
	PruneComponentId *string `protobuf:"bytes,3,opt,name=pruneComponentId,proto3,oneof" json:"pruneComponentId,omitempty"`
	ChunkPercentage  *uint32 `protobuf:"varint,4,opt,name=chunkPercentage,proto3,oneof" json:"chunkPercentage,omitempty"`
}

func (x *ECSStateRequestLatestStreamPruned) Reset() {
	*x = ECSStateRequestLatestStreamPruned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateRequestLatestStreamPruned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateRequestLatestStreamPruned) ProtoMessage() {}

func (x *ECSStateRequestLatestStreamPruned) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateRequestLatestStreamPruned.ProtoReflect.Descriptor instead.
func (*ECSStateRequestLatestStreamPruned) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{4}
}

func (x *ECSStateRequestLatestStreamPruned) GetWorldAddress() string {
	if x != nil {
		return x.WorldAddress
	}
	return ""
}

func (x *ECSStateRequestLatestStreamPruned) GetPruneAddress() string {
	if x != nil {
		return x.PruneAddress
	}
	return ""
}

func (x *ECSStateRequestLatestStreamPruned) GetPruneComponentId() string {
	if x != nil && x.PruneComponentId != nil {
		return *x.PruneComponentId
	}
	return ""
}

func (x *ECSStateRequestLatestStreamPruned) GetChunkPercentage() uint32 {
	if x != nil && x.ChunkPercentage != nil {
		return *x.ChunkPercentage
	}
	return 0
}

// The request message for the latest chunked ECS state.
type ECSStateRequestLatestStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldAddress    string  `protobuf:"bytes,1,opt,name=worldAddress,proto3" json:"worldAddress,omitempty"`
	ChunkPercentage *uint32 `protobuf:"varint,2,opt,name=chunkPercentage,proto3,oneof" json:"chunkPercentage,omitempty"`
}

func (x *ECSStateRequestLatestStream) Reset() {
	*x = ECSStateRequestLatestStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateRequestLatestStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateRequestLatestStream) ProtoMessage() {}

func (x *ECSStateRequestLatestStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateRequestLatestStream.ProtoReflect.Descriptor instead.
func (*ECSStateRequestLatestStream) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *ECSStateRequestLatestStream) GetWorldAddress() string {
	if x != nil {
		return x.WorldAddress
	}
	return ""
}

func (x *ECSStateRequestLatestStream) GetChunkPercentage() uint32 {
	if x != nil && x.ChunkPercentage != nil {
		return *x.ChunkPercentage
	}
	return 0
}

// The request message for the latest block based on latest ECS state.
type ECSStateBlockRequestLatest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldAddress string `protobuf:"bytes,1,opt,name=worldAddress,proto3" json:"worldAddress,omitempty"`
}

func (x *ECSStateBlockRequestLatest) Reset() {
	*x = ECSStateBlockRequestLatest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateBlockRequestLatest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateBlockRequestLatest) ProtoMessage() {}

func (x *ECSStateBlockRequestLatest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateBlockRequestLatest.ProtoReflect.Descriptor instead.
func (*ECSStateBlockRequestLatest) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *ECSStateBlockRequestLatest) GetWorldAddress() string {
	if x != nil {
		return x.WorldAddress
	}
	return ""
}

// The request message for the ECS state given a block number.
type ECSStateRequestAtBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *ECSStateRequestAtBlock) Reset() {
	*x = ECSStateRequestAtBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateRequestAtBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateRequestAtBlock) ProtoMessage() {}

func (x *ECSStateRequestAtBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateRequestAtBlock.ProtoReflect.Descriptor instead.
func (*ECSStateRequestAtBlock) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *ECSStateRequestAtBlock) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// The request message for all worlds.
type WorldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorldsRequest) Reset() {
	*x = WorldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldsRequest) ProtoMessage() {}

func (x *WorldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldsRequest.ProtoReflect.Descriptor instead.
func (*WorldsRequest) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{8}
}

// The response message containing the current state, hash of that state, and the block number of that state.
type ECSStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           []*ECSState `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
	StateComponents []string    `protobuf:"bytes,2,rep,name=stateComponents,proto3" json:"stateComponents,omitempty"`
	StateEntities   []string    `protobuf:"bytes,3,rep,name=stateEntities,proto3" json:"stateEntities,omitempty"`
	StateHash       string      `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	BlockNumber     uint32      `protobuf:"varint,5,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *ECSStateReply) Reset() {
	*x = ECSStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateReply) ProtoMessage() {}

func (x *ECSStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateReply.ProtoReflect.Descriptor instead.
func (*ECSStateReply) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *ECSStateReply) GetState() []*ECSState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ECSStateReply) GetStateComponents() []string {
	if x != nil {
		return x.StateComponents
	}
	return nil
}

func (x *ECSStateReply) GetStateEntities() []string {
	if x != nil {
		return x.StateEntities
	}
	return nil
}

func (x *ECSStateReply) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *ECSStateReply) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type ECSStateReplyV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           []*ECSState `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
	StateComponents []string    `protobuf:"bytes,2,rep,name=stateComponents,proto3" json:"stateComponents,omitempty"`
	StateEntities   [][]byte    `protobuf:"bytes,3,rep,name=stateEntities,proto3" json:"stateEntities,omitempty"`
	StateHash       string      `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	BlockNumber     uint32      `protobuf:"varint,5,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *ECSStateReplyV2) Reset() {
	*x = ECSStateReplyV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateReplyV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateReplyV2) ProtoMessage() {}

func (x *ECSStateReplyV2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateReplyV2.ProtoReflect.Descriptor instead.
func (*ECSStateReplyV2) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{10}
}

func (x *ECSStateReplyV2) GetState() []*ECSState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ECSStateReplyV2) GetStateComponents() []string {
	if x != nil {
		return x.StateComponents
	}
	return nil
}

func (x *ECSStateReplyV2) GetStateEntities() [][]byte {
	if x != nil {
		return x.StateEntities
	}
	return nil
}

func (x *ECSStateReplyV2) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *ECSStateReplyV2) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type ECSStateBlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint32 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *ECSStateBlockReply) Reset() {
	*x = ECSStateBlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ecs_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSStateBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSStateBlockReply) ProtoMessage() {}

func (x *ECSStateBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ecs_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSStateBlockReply.ProtoReflect.Descriptor instead.
func (*ECSStateBlockReply) Descriptor() ([]byte, []int) {
	return file_proto_ecs_snapshot_proto_rawDescGZIP(), []int{11}
}

func (x *ECSStateBlockReply) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

var File_proto_ecs_snapshot_proto protoreflect.FileDescriptor

var file_proto_ecs_snapshot_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x63, 0x73, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x63, 0x73, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x6e, 0x0a, 0x08, 0x45, 0x43, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x49, 0x64, 0x78, 0x12, 0x22, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x49, 0x64,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x10, 0x45, 0x43, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x63,
	0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x2c, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a,
	0x15, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x45,
	0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x75,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x1a, 0x45, 0x43, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x16, 0x45, 0x43,
	0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x45, 0x43, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x45, 0x43, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x56, 0x32, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x63, 0x73, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x12, 0x45, 0x43, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32,
	0x8e, 0x06, 0x0a, 0x17, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x12, 0x28, 0x2e, 0x65, 0x63,
	0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x56, 0x32, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x64, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x75,
	0x6e, 0x65, 0x64, 0x56, 0x32, 0x12, 0x2e, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x64, 0x1a, 0x1c, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x56, 0x32, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e,
	0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x43, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x45, 0x43, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x2e,
	0x65, 0x63, 0x73, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x65, 0x63, 0x73, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x73, 0x22, 0x00,
	0x42, 0x1a, 0x5a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f,
	0x65, 0x63, 0x73, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ecs_snapshot_proto_rawDescOnce sync.Once
	file_proto_ecs_snapshot_proto_rawDescData = file_proto_ecs_snapshot_proto_rawDesc
)

func file_proto_ecs_snapshot_proto_rawDescGZIP() []byte {
	file_proto_ecs_snapshot_proto_rawDescOnce.Do(func() {
		file_proto_ecs_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ecs_snapshot_proto_rawDescData)
	})
	return file_proto_ecs_snapshot_proto_rawDescData
}

var file_proto_ecs_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_ecs_snapshot_proto_goTypes = []interface{}{
	(*ECSState)(nil),                          // 0: ecssnapshot.ECSState
	(*ECSStateSnapshot)(nil),                  // 1: ecssnapshot.ECSStateSnapshot
	(*Worlds)(nil),                            // 2: ecssnapshot.Worlds
	(*ECSStateRequestLatest)(nil),             // 3: ecssnapshot.ECSStateRequestLatest
	(*ECSStateRequestLatestStreamPruned)(nil), // 4: ecssnapshot.ECSStateRequestLatestStreamPruned
	(*ECSStateRequestLatestStream)(nil),       // 5: ecssnapshot.ECSStateRequestLatestStream
	(*ECSStateBlockRequestLatest)(nil),        // 6: ecssnapshot.ECSStateBlockRequestLatest
	(*ECSStateRequestAtBlock)(nil),            // 7: ecssnapshot.ECSStateRequestAtBlock
	(*WorldsRequest)(nil),                     // 8: ecssnapshot.WorldsRequest
	(*ECSStateReply)(nil),                     // 9: ecssnapshot.ECSStateReply
	(*ECSStateReplyV2)(nil),                   // 10: ecssnapshot.ECSStateReplyV2
	(*ECSStateBlockReply)(nil),                // 11: ecssnapshot.ECSStateBlockReply
}
var file_proto_ecs_snapshot_proto_depIdxs = []int32{
	0,  // 0: ecssnapshot.ECSStateSnapshot.state:type_name -> ecssnapshot.ECSState
	0,  // 1: ecssnapshot.ECSStateReply.state:type_name -> ecssnapshot.ECSState
	0,  // 2: ecssnapshot.ECSStateReplyV2.state:type_name -> ecssnapshot.ECSState
	3,  // 3: ecssnapshot.ECSStateSnapshotService.GetStateLatest:input_type -> ecssnapshot.ECSStateRequestLatest
	5,  // 4: ecssnapshot.ECSStateSnapshotService.GetStateLatestStream:input_type -> ecssnapshot.ECSStateRequestLatestStream
	5,  // 5: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamV2:input_type -> ecssnapshot.ECSStateRequestLatestStream
	4,  // 6: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamPruned:input_type -> ecssnapshot.ECSStateRequestLatestStreamPruned
	4,  // 7: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamPrunedV2:input_type -> ecssnapshot.ECSStateRequestLatestStreamPruned
	6,  // 8: ecssnapshot.ECSStateSnapshotService.GetStateBlockLatest:input_type -> ecssnapshot.ECSStateBlockRequestLatest
	7,  // 9: ecssnapshot.ECSStateSnapshotService.GetStateAtBlock:input_type -> ecssnapshot.ECSStateRequestAtBlock
	8,  // 10: ecssnapshot.ECSStateSnapshotService.GetWorlds:input_type -> ecssnapshot.WorldsRequest
	9,  // 11: ecssnapshot.ECSStateSnapshotService.GetStateLatest:output_type -> ecssnapshot.ECSStateReply
	9,  // 12: ecssnapshot.ECSStateSnapshotService.GetStateLatestStream:output_type -> ecssnapshot.ECSStateReply
	10, // 13: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamV2:output_type -> ecssnapshot.ECSStateReplyV2
	9,  // 14: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamPruned:output_type -> ecssnapshot.ECSStateReply
	10, // 15: ecssnapshot.ECSStateSnapshotService.GetStateLatestStreamPrunedV2:output_type -> ecssnapshot.ECSStateReplyV2
	11, // 16: ecssnapshot.ECSStateSnapshotService.GetStateBlockLatest:output_type -> ecssnapshot.ECSStateBlockReply
	9,  // 17: ecssnapshot.ECSStateSnapshotService.GetStateAtBlock:output_type -> ecssnapshot.ECSStateReply
	2,  // 18: ecssnapshot.ECSStateSnapshotService.GetWorlds:output_type -> ecssnapshot.Worlds
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_proto_ecs_snapshot_proto_init() }
func file_proto_ecs_snapshot_proto_init() {
	if File_proto_ecs_snapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ecs_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worlds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateRequestLatest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateRequestLatestStreamPruned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateRequestLatestStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateBlockRequestLatest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateRequestAtBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateReplyV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ecs_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSStateBlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_ecs_snapshot_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_ecs_snapshot_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ecs_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ecs_snapshot_proto_goTypes,
		DependencyIndexes: file_proto_ecs_snapshot_proto_depIdxs,
		MessageInfos:      file_proto_ecs_snapshot_proto_msgTypes,
	}.Build()
	File_proto_ecs_snapshot_proto = out.File
	file_proto_ecs_snapshot_proto_rawDesc = nil
	file_proto_ecs_snapshot_proto_goTypes = nil
	file_proto_ecs_snapshot_proto_depIdxs = nil
}
