// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: proto/mode.proto

package mode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryLayer_GetState_FullMethodName            = "/mode.QueryLayer/GetState"
	QueryLayer_StreamState_FullMethodName         = "/mode.QueryLayer/StreamState"
	QueryLayer_Single__GetState_FullMethodName    = "/mode.QueryLayer/Single__GetState"
	QueryLayer_Single__StreamState_FullMethodName = "/mode.QueryLayer/Single__StreamState"
)

// QueryLayerClient is the client API for QueryLayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryLayerClient interface {
	// Get state endpoint.
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*QueryLayerStateResponse, error)
	// Stream state endpoint.
	StreamState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (QueryLayer_StreamStateClient, error)
	// Get state from single table endpoint.
	Single__GetState(ctx context.Context, in *Single__StateRequest, opts ...grpc.CallOption) (*QueryLayerStateResponse, error)
	// Stream state from single table endpoint.
	Single__StreamState(ctx context.Context, in *Single__StateRequest, opts ...grpc.CallOption) (QueryLayer_Single__StreamStateClient, error)
}

type queryLayerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryLayerClient(cc grpc.ClientConnInterface) QueryLayerClient {
	return &queryLayerClient{cc}
}

func (c *queryLayerClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*QueryLayerStateResponse, error) {
	out := new(QueryLayerStateResponse)
	err := c.cc.Invoke(ctx, QueryLayer_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryLayerClient) StreamState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (QueryLayer_StreamStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryLayer_ServiceDesc.Streams[0], QueryLayer_StreamState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryLayerStreamStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryLayer_StreamStateClient interface {
	Recv() (*QueryLayerStateStreamResponse, error)
	grpc.ClientStream
}

type queryLayerStreamStateClient struct {
	grpc.ClientStream
}

func (x *queryLayerStreamStateClient) Recv() (*QueryLayerStateStreamResponse, error) {
	m := new(QueryLayerStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryLayerClient) Single__GetState(ctx context.Context, in *Single__StateRequest, opts ...grpc.CallOption) (*QueryLayerStateResponse, error) {
	out := new(QueryLayerStateResponse)
	err := c.cc.Invoke(ctx, QueryLayer_Single__GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryLayerClient) Single__StreamState(ctx context.Context, in *Single__StateRequest, opts ...grpc.CallOption) (QueryLayer_Single__StreamStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryLayer_ServiceDesc.Streams[1], QueryLayer_Single__StreamState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryLayerSingle__StreamStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryLayer_Single__StreamStateClient interface {
	Recv() (*QueryLayerStateStreamResponse, error)
	grpc.ClientStream
}

type queryLayerSingle__StreamStateClient struct {
	grpc.ClientStream
}

func (x *queryLayerSingle__StreamStateClient) Recv() (*QueryLayerStateStreamResponse, error) {
	m := new(QueryLayerStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryLayerServer is the server API for QueryLayer service.
// All implementations must embed UnimplementedQueryLayerServer
// for forward compatibility
type QueryLayerServer interface {
	// Get state endpoint.
	GetState(context.Context, *StateRequest) (*QueryLayerStateResponse, error)
	// Stream state endpoint.
	StreamState(*StateRequest, QueryLayer_StreamStateServer) error
	// Get state from single table endpoint.
	Single__GetState(context.Context, *Single__StateRequest) (*QueryLayerStateResponse, error)
	// Stream state from single table endpoint.
	Single__StreamState(*Single__StateRequest, QueryLayer_Single__StreamStateServer) error
	mustEmbedUnimplementedQueryLayerServer()
}

// UnimplementedQueryLayerServer must be embedded to have forward compatible implementations.
type UnimplementedQueryLayerServer struct {
}

func (UnimplementedQueryLayerServer) GetState(context.Context, *StateRequest) (*QueryLayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedQueryLayerServer) StreamState(*StateRequest, QueryLayer_StreamStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamState not implemented")
}
func (UnimplementedQueryLayerServer) Single__GetState(context.Context, *Single__StateRequest) (*QueryLayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Single__GetState not implemented")
}
func (UnimplementedQueryLayerServer) Single__StreamState(*Single__StateRequest, QueryLayer_Single__StreamStateServer) error {
	return status.Errorf(codes.Unimplemented, "method Single__StreamState not implemented")
}
func (UnimplementedQueryLayerServer) mustEmbedUnimplementedQueryLayerServer() {}

// UnsafeQueryLayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryLayerServer will
// result in compilation errors.
type UnsafeQueryLayerServer interface {
	mustEmbedUnimplementedQueryLayerServer()
}

func RegisterQueryLayerServer(s grpc.ServiceRegistrar, srv QueryLayerServer) {
	s.RegisterService(&QueryLayer_ServiceDesc, srv)
}

func _QueryLayer_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryLayerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryLayer_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryLayerServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryLayer_StreamState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryLayerServer).StreamState(m, &queryLayerStreamStateServer{stream})
}

type QueryLayer_StreamStateServer interface {
	Send(*QueryLayerStateStreamResponse) error
	grpc.ServerStream
}

type queryLayerStreamStateServer struct {
	grpc.ServerStream
}

func (x *queryLayerStreamStateServer) Send(m *QueryLayerStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryLayer_Single__GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single__StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryLayerServer).Single__GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryLayer_Single__GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryLayerServer).Single__GetState(ctx, req.(*Single__StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryLayer_Single__StreamState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Single__StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryLayerServer).Single__StreamState(m, &queryLayerSingle__StreamStateServer{stream})
}

type QueryLayer_Single__StreamStateServer interface {
	Send(*QueryLayerStateStreamResponse) error
	grpc.ServerStream
}

type queryLayerSingle__StreamStateServer struct {
	grpc.ServerStream
}

func (x *queryLayerSingle__StreamStateServer) Send(m *QueryLayerStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// QueryLayer_ServiceDesc is the grpc.ServiceDesc for QueryLayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryLayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mode.QueryLayer",
	HandlerType: (*QueryLayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _QueryLayer_GetState_Handler,
		},
		{
			MethodName: "Single__GetState",
			Handler:    _QueryLayer_Single__GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamState",
			Handler:       _QueryLayer_StreamState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Single__StreamState",
			Handler:       _QueryLayer_Single__StreamState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mode.proto",
}
