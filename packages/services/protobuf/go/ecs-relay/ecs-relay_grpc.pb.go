// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: proto/ecs-relay.proto

package ecs_relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ECSRelayServiceClient is the client API for ECSRelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ECSRelayServiceClient interface {
	Authenticate(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	Revoke(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	Ping(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	CountAuthenticated(ctx context.Context, in *CountIdentitiesRequest, opts ...grpc.CallOption) (*CountIdentitiesResponse, error)
	CountConnected(ctx context.Context, in *CountIdentitiesRequest, opts ...grpc.CallOption) (*CountIdentitiesResponse, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error)
	Unsubscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error)
	OpenStream(ctx context.Context, in *Identity, opts ...grpc.CallOption) (ECSRelayService_OpenStreamClient, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type eCSRelayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewECSRelayServiceClient(cc grpc.ClientConnInterface) ECSRelayServiceClient {
	return &eCSRelayServiceClient{cc}
}

func (c *eCSRelayServiceClient) Authenticate(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) Revoke(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) Ping(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) CountAuthenticated(ctx context.Context, in *CountIdentitiesRequest, opts ...grpc.CallOption) (*CountIdentitiesResponse, error) {
	out := new(CountIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/CountAuthenticated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) CountConnected(ctx context.Context, in *CountIdentitiesRequest, opts ...grpc.CallOption) (*CountIdentitiesResponse, error) {
	out := new(CountIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/CountConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) Unsubscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSRelayServiceClient) OpenStream(ctx context.Context, in *Identity, opts ...grpc.CallOption) (ECSRelayService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ECSRelayService_ServiceDesc.Streams[0], "/ecsrelay.ECSRelayService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eCSRelayServiceOpenStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ECSRelayService_OpenStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type eCSRelayServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *eCSRelayServiceOpenStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eCSRelayServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/ecsrelay.ECSRelayService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ECSRelayServiceServer is the server API for ECSRelayService service.
// All implementations must embed UnimplementedECSRelayServiceServer
// for forward compatibility
type ECSRelayServiceServer interface {
	Authenticate(context.Context, *Identity) (*Identity, error)
	Revoke(context.Context, *Identity) (*Identity, error)
	Ping(context.Context, *Identity) (*Identity, error)
	CountAuthenticated(context.Context, *CountIdentitiesRequest) (*CountIdentitiesResponse, error)
	CountConnected(context.Context, *CountIdentitiesRequest) (*CountIdentitiesResponse, error)
	Subscribe(context.Context, *SubscriptionRequest) (*Subscription, error)
	Unsubscribe(context.Context, *SubscriptionRequest) (*Subscription, error)
	OpenStream(*Identity, ECSRelayService_OpenStreamServer) error
	Push(context.Context, *PushRequest) (*PushResponse, error)
	mustEmbedUnimplementedECSRelayServiceServer()
}

// UnimplementedECSRelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedECSRelayServiceServer struct {
}

func (UnimplementedECSRelayServiceServer) Authenticate(context.Context, *Identity) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedECSRelayServiceServer) Revoke(context.Context, *Identity) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedECSRelayServiceServer) Ping(context.Context, *Identity) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedECSRelayServiceServer) CountAuthenticated(context.Context, *CountIdentitiesRequest) (*CountIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAuthenticated not implemented")
}
func (UnimplementedECSRelayServiceServer) CountConnected(context.Context, *CountIdentitiesRequest) (*CountIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountConnected not implemented")
}
func (UnimplementedECSRelayServiceServer) Subscribe(context.Context, *SubscriptionRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedECSRelayServiceServer) Unsubscribe(context.Context, *SubscriptionRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedECSRelayServiceServer) OpenStream(*Identity, ECSRelayService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedECSRelayServiceServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedECSRelayServiceServer) mustEmbedUnimplementedECSRelayServiceServer() {}

// UnsafeECSRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ECSRelayServiceServer will
// result in compilation errors.
type UnsafeECSRelayServiceServer interface {
	mustEmbedUnimplementedECSRelayServiceServer()
}

func RegisterECSRelayServiceServer(s grpc.ServiceRegistrar, srv ECSRelayServiceServer) {
	s.RegisterService(&ECSRelayService_ServiceDesc, srv)
}

func _ECSRelayService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Authenticate(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Revoke(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Ping(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_CountAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).CountAuthenticated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/CountAuthenticated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).CountAuthenticated(ctx, req.(*CountIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_CountConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).CountConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/CountConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).CountConnected(ctx, req.(*CountIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Subscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Unsubscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSRelayService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ECSRelayServiceServer).OpenStream(m, &eCSRelayServiceOpenStreamServer{stream})
}

type ECSRelayService_OpenStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type eCSRelayServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *eCSRelayServiceOpenStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ECSRelayService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSRelayServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecsrelay.ECSRelayService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSRelayServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ECSRelayService_ServiceDesc is the grpc.ServiceDesc for ECSRelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ECSRelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecsrelay.ECSRelayService",
	HandlerType: (*ECSRelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _ECSRelayService_Authenticate_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _ECSRelayService_Revoke_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ECSRelayService_Ping_Handler,
		},
		{
			MethodName: "CountAuthenticated",
			Handler:    _ECSRelayService_CountAuthenticated_Handler,
		},
		{
			MethodName: "CountConnected",
			Handler:    _ECSRelayService_CountConnected_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ECSRelayService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ECSRelayService_Unsubscribe_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _ECSRelayService_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _ECSRelayService_OpenStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ecs-relay.proto",
}
