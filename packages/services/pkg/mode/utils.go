package mode

import (
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum/common"
)

/////////////////////////////////////////
// Utilities for building table names. //
/////////////////////////////////////////

func TableIdToTableName(tableId string) string {
	// Table Id comes in as a uint256 in string format comprised of two bytes16s
	// concatenated.
	// Get a byte array of the table Id.
	tableIdBytes := []byte(tableId[2:])

	b1 := tableIdBytes[:32]
	b2 := tableIdBytes[32:]
	namePart1 := string(b1)
	namePart2 := string(b2)

	p1 := string(common.FromHex("0x" + namePart1))
	p2 := string(common.FromHex("0x" + namePart2))

	return strings.Trim(p1, "\u0000") + CONNECTOR + strings.Trim(p2, "\u0000")
}

func TableNameToTableId(tableName string) string {
	// Assumes that table name was generated by TableIdToTableName.
	parts := strings.Split(tableName, CONNECTOR)
	expectedParts := 2
	if len(parts) != expectedParts {
		panic("Invalid table name: " + tableName)
	}
	length := 16
	pad1 := common.RightPadBytes([]byte(parts[0]), length)
	pad2 := common.RightPadBytes([]byte(parts[1]), length)
	return "0x" + common.Bytes2Hex(append(pad1, pad2...))
}

func TableIdToHex(id [32]byte) string {
	return "0x" + common.Bytes2Hex(id[:])
}

/////////////////////////////////////////
// Utilities for building field names. //
/////////////////////////////////////////

func DefaultFieldName(index int) string {
	return "field_" + fmt.Sprint(index)
}

func DefaultKeyName(index int) string {
	return "key_" + fmt.Sprint(index)
}

/////////////////////////////////////////////////
// Utilities for getting key and field schemas //
/////////////////////////////////////////////////

func GetKeySchema(schemaEventData []byte) []byte {
	// Key schema is the last 32 bytes of the schema event data.
	return schemaEventData[32:]
}

func GetFieldSchema(schemaEventData []byte) []byte {
	// Key schema is the first 32 bytes of the schema event data.
	return schemaEventData[:32]
}

func RightPadString(str string) []byte {
	return RightPadBytes([]byte(str))
}

func RightPadBytes(bytes []byte) []byte {
	return common.RightPadBytes(bytes, DEFAULT_RIGHT_PAD_LENGTH)
}
