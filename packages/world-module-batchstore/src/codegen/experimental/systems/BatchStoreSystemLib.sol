// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { BatchStoreSystem } from "../../../BatchStoreSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { TableRecord } from "../../../common.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BatchStoreSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "BatchStoreSystem" }))
BatchStoreSystemType constant batchStoreSystem = BatchStoreSystemType.wrap(
  0x73790000000000000000000000000000426174636853746f726553797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title BatchStoreSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BatchStoreSystemLib {
  error BatchStoreSystemLib_CallingFromRootSystem();

  function getTableRecords(
    BatchStoreSystemType self,
    ResourceId tableId,
    bytes32[][] memory keyTuples
  ) internal view returns (TableRecord[] memory records) {
    return CallWrapper(self.toResourceId(), address(0)).getTableRecords(tableId, keyTuples);
  }

  function setTableRecords(BatchStoreSystemType self, ResourceId tableId, TableRecord[] memory records) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTableRecords(tableId, records);
  }

  function deleteTableRecords(BatchStoreSystemType self, ResourceId tableId, bytes32[][] memory keyTuples) internal {
    return CallWrapper(self.toResourceId(), address(0)).deleteTableRecords(tableId, keyTuples);
  }

  function getTableRecords(
    CallWrapper memory self,
    ResourceId tableId,
    bytes32[][] memory keyTuples
  ) internal view returns (TableRecord[] memory records) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchStoreSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getTableRecords_ResourceId_bytes32ArrayArray.getTableRecords,
      (tableId, keyTuples)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (TableRecord[]));
    }
  }

  function setTableRecords(CallWrapper memory self, ResourceId tableId, TableRecord[] memory records) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchStoreSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setTableRecords_ResourceId_TableRecordArray.setTableRecords,
      (tableId, records)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function deleteTableRecords(CallWrapper memory self, ResourceId tableId, bytes32[][] memory keyTuples) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchStoreSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _deleteTableRecords_ResourceId_bytes32ArrayArray.deleteTableRecords,
      (tableId, keyTuples)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTableRecords(RootCallWrapper memory self, ResourceId tableId, TableRecord[] memory records) internal {
    bytes memory systemCall = abi.encodeCall(
      _setTableRecords_ResourceId_TableRecordArray.setTableRecords,
      (tableId, records)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function deleteTableRecords(RootCallWrapper memory self, ResourceId tableId, bytes32[][] memory keyTuples) internal {
    bytes memory systemCall = abi.encodeCall(
      _deleteTableRecords_ResourceId_bytes32ArrayArray.deleteTableRecords,
      (tableId, keyTuples)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(BatchStoreSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(BatchStoreSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(BatchStoreSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(BatchStoreSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(BatchStoreSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BatchStoreSystemType) {
    return BatchStoreSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(BatchStoreSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _getTableRecords_ResourceId_bytes32ArrayArray {
  function getTableRecords(ResourceId tableId, bytes32[][] memory keyTuples) external;
}

interface _setTableRecords_ResourceId_TableRecordArray {
  function setTableRecords(ResourceId tableId, TableRecord[] memory records) external;
}

interface _deleteTableRecords_ResourceId_bytes32ArrayArray {
  function deleteTableRecords(ResourceId tableId, bytes32[][] memory keyTuples) external;
}

using BatchStoreSystemLib for BatchStoreSystemType global;
using BatchStoreSystemLib for CallWrapper global;
using BatchStoreSystemLib for RootCallWrapper global;
