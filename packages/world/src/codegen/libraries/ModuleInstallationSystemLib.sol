// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ModuleInstallationSystem } from "../../modules/init/implementations/ModuleInstallationSystem.sol";
import { IModule } from "../../IModule.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ModuleInstallationSystemType is bytes32;

ModuleInstallationSystemType constant moduleInstallationSystem = ModuleInstallationSystemType.wrap(
  0x737900000000000000000000000000004d6f64756c65496e7374616c6c617469
);

/**
 * @title ModuleInstallationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ModuleInstallationSystemLib {
  function installModule(ModuleInstallationSystemType __systemId, IModule module, bytes memory encodedArgs) internal {
    bytes memory systemCall = abi.encodeCall(ModuleInstallationSystem.installModule, (module, encodedArgs));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function toResourceId(ModuleInstallationSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(ModuleInstallationSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ModuleInstallationSystemType) {
    return ModuleInstallationSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using ModuleInstallationSystemLib for ModuleInstallationSystemType global;
