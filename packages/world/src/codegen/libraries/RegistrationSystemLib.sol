// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RegistrationSystem } from "../../modules/init/RegistrationSystem.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RegistrationSystemType is bytes32;

RegistrationSystemType constant registrationSystem = RegistrationSystemType.wrap(
  0x73790000000000000000000000000000526567697374726174696f6e53797374
);

/**
 * @title RegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RegistrationSystemLib {
  struct CallFromWrapper {
    RegistrationSystemType systemId;
    address from;
  }

  // TODO: rename to callFrom?
  function from(RegistrationSystemType systemId, address _from) internal pure returns (CallFromWrapper memory) {
    return CallFromWrapper({ systemId: systemId, from: _from });
  }

  function toResourceId(RegistrationSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(RegistrationSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RegistrationSystemType) {
    return RegistrationSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using RegistrationSystemLib for RegistrationSystemType global;
