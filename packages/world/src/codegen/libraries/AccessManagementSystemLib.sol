// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId } from "../../WorldResourceId.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AccessManagementSystemType is bytes32;

AccessManagementSystemType constant accessManagementSystem = AccessManagementSystemType.wrap(
  0x737900000000000000000000000000004163636573734d616e6167656d656e74
);

/**
 * @title AccessManagementSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AccessManagementSystemLib {
  function grantAccess(AccessManagementSystemType __systemId, ResourceId resourceId, address grantee) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(resourceId, grantee));
    result;
  }

  function revokeAccess(AccessManagementSystemType __systemId, ResourceId resourceId, address grantee) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(resourceId, grantee));
    result;
  }

  function transferOwnership(AccessManagementSystemType __systemId, ResourceId namespaceId, address newOwner) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(namespaceId, newOwner));
    result;
  }

  function renounceOwnership(AccessManagementSystemType __systemId, ResourceId namespaceId) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(namespaceId));
    result;
  }

  function toResourceId(AccessManagementSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(AccessManagementSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AccessManagementSystemType) {
    return AccessManagementSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using AccessManagementSystemLib for AccessManagementSystemType global;
