// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { BalanceTransferSystem } from "../../modules/init/implementations/BalanceTransferSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BalanceTransferSystemType is bytes32;

BalanceTransferSystemType constant balanceTransferSystem = BalanceTransferSystemType.wrap(
  0x7379000000000000000000000000000042616c616e63655472616e7366657253
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title BalanceTransferSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BalanceTransferSystemLib {
  function transferBalanceToNamespace(
    BalanceTransferSystemType self,
    ResourceId fromNamespaceId,
    ResourceId toNamespaceId,
    uint256 amount
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).transferBalanceToNamespace(fromNamespaceId, toNamespaceId, amount);
  }

  function transferBalanceToAddress(
    BalanceTransferSystemType self,
    ResourceId fromNamespaceId,
    address toAddress,
    uint256 amount
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).transferBalanceToAddress(fromNamespaceId, toAddress, amount);
  }

  function transferBalanceToNamespace(
    CallWrapper memory self,
    ResourceId fromNamespaceId,
    ResourceId toNamespaceId,
    uint256 amount
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      BalanceTransferSystem.transferBalanceToNamespace,
      (fromNamespaceId, toNamespaceId, amount)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function transferBalanceToAddress(
    CallWrapper memory self,
    ResourceId fromNamespaceId,
    address toAddress,
    uint256 amount
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      BalanceTransferSystem.transferBalanceToAddress,
      (fromNamespaceId, toAddress, amount)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function callFrom(BalanceTransferSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function toResourceId(BalanceTransferSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(BalanceTransferSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BalanceTransferSystemType) {
    return BalanceTransferSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using BalanceTransferSystemLib for BalanceTransferSystemType global;
using BalanceTransferSystemLib for CallWrapper global;
