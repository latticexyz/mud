// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IBaseWorld } from "../../codegen/interfaces/IBaseWorld.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BalanceTransferSystemType is bytes32;

BalanceTransferSystemType constant balanceTransferSystem = BalanceTransferSystemType.wrap(
  0x7379000000000000000000000000000042616c616e63655472616e7366657253
);

/**
 * @title BalanceTransferSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BalanceTransferSystemLib {
  function transferBalanceToNamespace(
    BalanceTransferSystemType __systemId,
    ResourceId fromNamespaceId,
    ResourceId toNamespaceId,
    uint256 amount
  ) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(fromNamespaceId, toNamespaceId, amount));
    result;
  }

  function transferBalanceToAddress(
    BalanceTransferSystemType __systemId,
    ResourceId fromNamespaceId,
    address toAddress,
    uint256 amount
  ) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(fromNamespaceId, toAddress, amount));
    result;
  }

  function toResourceId(BalanceTransferSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(BalanceTransferSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BalanceTransferSystemType) {
    return BalanceTransferSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IBaseWorld) {
    return IBaseWorld(StoreSwitch.getStoreAddress());
  }
}

using BalanceTransferSystemLib for BalanceTransferSystemType global;
