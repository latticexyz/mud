// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { ISystemHook } from "../../ISystemHook.sol";
import { System } from "../../System.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IBaseWorld } from "../../codegen/interfaces/IBaseWorld.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WorldRegistrationSystemType is bytes32;

WorldRegistrationSystemType constant worldRegistrationSystem = WorldRegistrationSystemType.wrap(
  0x73790000000000000000000000000000576f726c64526567697374726174696f
);

/**
 * @title WorldRegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WorldRegistrationSystemLib {
  function registerNamespace(WorldRegistrationSystemType __systemId, ResourceId namespaceId) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(namespaceId));
    result;
  }

  function registerSystemHook(
    WorldRegistrationSystemType __systemId,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    bytes memory result = _world().call(
      __systemId.toResourceId(),
      abi.encode(systemId, hookAddress, enabledHooksBitmap)
    );
    result;
  }

  function unregisterSystemHook(
    WorldRegistrationSystemType __systemId,
    ResourceId systemId,
    ISystemHook hookAddress
  ) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(systemId, hookAddress));
    result;
  }

  function registerSystem(
    WorldRegistrationSystemType __systemId,
    ResourceId systemId,
    System system,
    bool publicAccess
  ) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(systemId, system, publicAccess));
    result;
  }

  function registerFunctionSelector(
    WorldRegistrationSystemType __systemId,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(systemId, systemFunctionSignature));
    return abi.decode(result, (bytes4));
  }

  function registerRootFunctionSelector(
    WorldRegistrationSystemType __systemId,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory result = _world().call(
      __systemId.toResourceId(),
      abi.encode(systemId, worldFunctionSignature, systemFunctionSignature)
    );
    return abi.decode(result, (bytes4));
  }

  function registerDelegation(
    WorldRegistrationSystemType __systemId,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory result = _world().call(
      __systemId.toResourceId(),
      abi.encode(delegatee, delegationControlId, initCallData)
    );
    result;
  }

  function unregisterDelegation(WorldRegistrationSystemType __systemId, address delegatee) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(delegatee));
    result;
  }

  function registerNamespaceDelegation(
    WorldRegistrationSystemType __systemId,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory result = _world().call(
      __systemId.toResourceId(),
      abi.encode(namespaceId, delegationControlId, initCallData)
    );
    result;
  }

  function unregisterNamespaceDelegation(WorldRegistrationSystemType __systemId, ResourceId namespaceId) internal {
    bytes memory result = _world().call(__systemId.toResourceId(), abi.encode(namespaceId));
    result;
  }

  function toResourceId(WorldRegistrationSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(WorldRegistrationSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WorldRegistrationSystemType) {
    return WorldRegistrationSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IBaseWorld) {
    return IBaseWorld(StoreSwitch.getStoreAddress());
  }
}

using WorldRegistrationSystemLib for WorldRegistrationSystemType global;
