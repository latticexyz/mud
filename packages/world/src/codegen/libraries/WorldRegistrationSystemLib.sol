// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { WorldRegistrationSystem } from "../../modules/init/implementations/WorldRegistrationSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { ISystemHook } from "../../ISystemHook.sol";
import { System } from "../../System.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WorldRegistrationSystemType is bytes32;

WorldRegistrationSystemType constant worldRegistrationSystem = WorldRegistrationSystemType.wrap(
  0x73790000000000000000000000000000576f726c64526567697374726174696f
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title WorldRegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WorldRegistrationSystemLib {
  function registerNamespace(WorldRegistrationSystemType self, ResourceId namespaceId) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerNamespace(namespaceId);
  }

  function registerSystemHook(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerSystemHook(systemId, hookAddress, enabledHooksBitmap);
  }

  function unregisterSystemHook(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    ISystemHook hookAddress
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterSystemHook(systemId, hookAddress);
  }

  function registerSystem(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    System system,
    bool publicAccess
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerSystem(systemId, system, publicAccess);
  }

  function registerFunctionSelector(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return CallWrapper(self.toResourceId(), address(0)).registerFunctionSelector(systemId, systemFunctionSignature);
  }

  function registerRootFunctionSelector(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return
      CallWrapper(self.toResourceId(), address(0)).registerRootFunctionSelector(
        systemId,
        worldFunctionSignature,
        systemFunctionSignature
      );
  }

  function registerDelegation(
    WorldRegistrationSystemType self,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerDelegation(delegatee, delegationControlId, initCallData);
  }

  function unregisterDelegation(WorldRegistrationSystemType self, address delegatee) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterDelegation(delegatee);
  }

  function registerNamespaceDelegation(
    WorldRegistrationSystemType self,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerNamespaceDelegation(
        namespaceId,
        delegationControlId,
        initCallData
      );
  }

  function unregisterNamespaceDelegation(WorldRegistrationSystemType self, ResourceId namespaceId) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterNamespaceDelegation(namespaceId);
  }

  function registerNamespace(CallWrapper memory self, ResourceId namespaceId) internal {
    bytes memory systemCall = abi.encodeCall(WorldRegistrationSystem.registerNamespace, (namespaceId));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function registerSystemHook(
    CallWrapper memory self,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      WorldRegistrationSystem.registerSystemHook,
      (systemId, hookAddress, enabledHooksBitmap)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function unregisterSystemHook(CallWrapper memory self, ResourceId systemId, ISystemHook hookAddress) internal {
    bytes memory systemCall = abi.encodeCall(WorldRegistrationSystem.unregisterSystemHook, (systemId, hookAddress));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function registerSystem(CallWrapper memory self, ResourceId systemId, System system, bool publicAccess) internal {
    bytes memory systemCall = abi.encodeCall(WorldRegistrationSystem.registerSystem, (systemId, system, publicAccess));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function registerFunctionSelector(
    CallWrapper memory self,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory systemCall = abi.encodeCall(
      WorldRegistrationSystem.registerFunctionSelector,
      (systemId, systemFunctionSignature)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes4));
  }

  function registerRootFunctionSelector(
    CallWrapper memory self,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory systemCall = abi.encodeCall(
      WorldRegistrationSystem.registerRootFunctionSelector,
      (systemId, worldFunctionSignature, systemFunctionSignature)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes4));
  }

  function registerDelegation(
    CallWrapper memory self,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      WorldRegistrationSystem.registerDelegation,
      (delegatee, delegationControlId, initCallData)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function unregisterDelegation(CallWrapper memory self, address delegatee) internal {
    bytes memory systemCall = abi.encodeCall(WorldRegistrationSystem.unregisterDelegation, (delegatee));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function registerNamespaceDelegation(
    CallWrapper memory self,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      WorldRegistrationSystem.registerNamespaceDelegation,
      (namespaceId, delegationControlId, initCallData)
    );
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function unregisterNamespaceDelegation(CallWrapper memory self, ResourceId namespaceId) internal {
    bytes memory systemCall = abi.encodeCall(WorldRegistrationSystem.unregisterNamespaceDelegation, (namespaceId));
    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    result;
  }

  function callFrom(WorldRegistrationSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function toResourceId(WorldRegistrationSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(WorldRegistrationSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WorldRegistrationSystemType) {
    return WorldRegistrationSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using WorldRegistrationSystemLib for WorldRegistrationSystemType global;
using WorldRegistrationSystemLib for CallWrapper global;
