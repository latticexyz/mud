// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { BatchCallSystem } from "../../modules/init/implementations/BatchCallSystem.sol";
import { SystemCallData, SystemCallFromData } from "../../modules/init/types.sol";
import { revertWithBytes } from "../../revertWithBytes.sol";
import { IWorldCall } from "../../IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BatchCallSystemType is bytes32;

BatchCallSystemType constant batchCallSystem = BatchCallSystemType.wrap(
  0x73790000000000000000000000000000426174636843616c6c53797374656d00
);

/**
 * @title BatchCallSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BatchCallSystemLib {
  function batchCall(
    BatchCallSystemType __systemId,
    SystemCallData[] calldata systemCalls
  ) internal returns (bytes[] memory returnDatas) {
    bytes memory systemCall = abi.encodeCall(BatchCallSystem.batchCall, (systemCalls));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    return abi.decode(result, (bytes[]));
  }

  function batchCallFrom(
    BatchCallSystemType __systemId,
    SystemCallFromData[] calldata systemCalls
  ) internal returns (bytes[] memory returnDatas) {
    bytes memory systemCall = abi.encodeCall(BatchCallSystem.batchCallFrom, (systemCalls));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    return abi.decode(result, (bytes[]));
  }

  function toResourceId(BatchCallSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(BatchCallSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BatchCallSystemType) {
    return BatchCallSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using BatchCallSystemLib for BatchCallSystemType global;
