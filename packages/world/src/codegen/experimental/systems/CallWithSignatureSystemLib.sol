// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CallWithSignatureSystem } from "../../../modules/init/implementations/CallWithSignatureSystem/CallWithSignatureSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "../../../revertWithBytes.sol";
import { IWorldCall } from "../../../IWorldKernel.sol";
import { SystemCall } from "../../../SystemCall.sol";
import { WorldContextConsumerLib } from "../../../WorldContext.sol";
import { Systems } from "../../../codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CallWithSignatureSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "SignatureCall" }))
CallWithSignatureSystemType constant callWithSignatureSystem = CallWithSignatureSystemType.wrap(
  0x737900000000000000000000000000005369676e617475726543616c6c000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CallWithSignatureSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CallWithSignatureSystemLib {
  error CallWithSignatureSystemLib_CallingFromRootSystem();

  function callWithSignature(
    CallWithSignatureSystemType self,
    address signer,
    ResourceId systemId,
    bytes memory callData,
    bytes memory signature
  ) internal returns (bytes memory) {
    return CallWrapper(self.toResourceId(), address(0)).callWithSignature(signer, systemId, callData, signature);
  }

  function callWithSignature(
    CallWrapper memory self,
    address signer,
    ResourceId systemId,
    bytes memory callData,
    bytes memory signature
  ) internal returns (bytes memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CallWithSignatureSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _callWithSignature_address_ResourceId_bytes_bytes.callWithSignature,
      (signer, systemId, callData, signature)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes));
  }

  function callWithSignature(
    RootCallWrapper memory self,
    address signer,
    ResourceId systemId,
    bytes memory callData,
    bytes memory signature
  ) internal returns (bytes memory) {
    bytes memory systemCall = abi.encodeCall(
      _callWithSignature_address_ResourceId_bytes_bytes.callWithSignature,
      (signer, systemId, callData, signature)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes));
  }

  function callFrom(CallWithSignatureSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CallWithSignatureSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(
    CallWithSignatureSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CallWithSignatureSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CallWithSignatureSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CallWithSignatureSystemType) {
    return CallWithSignatureSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CallWithSignatureSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _callWithSignature_address_ResourceId_bytes_bytes {
  function callWithSignature(
    address signer,
    ResourceId systemId,
    bytes memory callData,
    bytes memory signature
  ) external;
}

using CallWithSignatureSystemLib for CallWithSignatureSystemType global;
using CallWithSignatureSystemLib for CallWrapper global;
using CallWithSignatureSystemLib for RootCallWrapper global;
