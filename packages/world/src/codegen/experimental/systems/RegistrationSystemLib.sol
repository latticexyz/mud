// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RegistrationSystem } from "../../../modules/init/RegistrationSystem.sol";
import { revertWithBytes } from "../../../revertWithBytes.sol";
import { IWorldCall } from "../../../IWorldKernel.sol";
import { SystemCall } from "../../../SystemCall.sol";
import { WorldContextConsumerLib } from "../../../WorldContext.sol";
import { Systems } from "../../../codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RegistrationSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "Registration" }))
RegistrationSystemType constant registrationSystem = RegistrationSystemType.wrap(
  0x73790000000000000000000000000000526567697374726174696f6e00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RegistrationSystemLib {
  error RegistrationSystemLib_CallingFromRootSystem();

  function callFrom(RegistrationSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RegistrationSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(RegistrationSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RegistrationSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RegistrationSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RegistrationSystemType) {
    return RegistrationSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RegistrationSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using RegistrationSystemLib for RegistrationSystemType global;
using RegistrationSystemLib for CallWrapper global;
using RegistrationSystemLib for RootCallWrapper global;
