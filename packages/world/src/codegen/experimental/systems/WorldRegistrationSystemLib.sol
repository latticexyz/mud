// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { WorldRegistrationSystem } from "../../../modules/init/implementations/WorldRegistrationSystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { ISystemHook } from "../../../ISystemHook.sol";
import { System } from "../../../System.sol";
import { revertWithBytes } from "../../../revertWithBytes.sol";
import { IWorldCall } from "../../../IWorldKernel.sol";
import { SystemCall } from "../../../SystemCall.sol";
import { WorldContextConsumerLib } from "../../../WorldContext.sol";
import { Systems } from "../../../codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WorldRegistrationSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "Registration" }))
WorldRegistrationSystemType constant worldRegistrationSystem = WorldRegistrationSystemType.wrap(
  0x73790000000000000000000000000000526567697374726174696f6e00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title WorldRegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WorldRegistrationSystemLib {
  error WorldRegistrationSystemLib_CallingFromRootSystem();

  function registerNamespace(WorldRegistrationSystemType self, ResourceId namespaceId) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerNamespace(namespaceId);
  }

  function registerSystemHook(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerSystemHook(systemId, hookAddress, enabledHooksBitmap);
  }

  function unregisterSystemHook(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    ISystemHook hookAddress
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterSystemHook(systemId, hookAddress);
  }

  function registerSystem(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    System system,
    bool publicAccess
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerSystem(systemId, system, publicAccess);
  }

  function registerFunctionSelector(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return CallWrapper(self.toResourceId(), address(0)).registerFunctionSelector(systemId, systemFunctionSignature);
  }

  function registerRootFunctionSelector(
    WorldRegistrationSystemType self,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return
      CallWrapper(self.toResourceId(), address(0)).registerRootFunctionSelector(
        systemId,
        worldFunctionSignature,
        systemFunctionSignature
      );
  }

  function registerDelegation(
    WorldRegistrationSystemType self,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerDelegation(delegatee, delegationControlId, initCallData);
  }

  function unregisterDelegation(WorldRegistrationSystemType self, address delegatee) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterDelegation(delegatee);
  }

  function registerNamespaceDelegation(
    WorldRegistrationSystemType self,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerNamespaceDelegation(
        namespaceId,
        delegationControlId,
        initCallData
      );
  }

  function unregisterNamespaceDelegation(WorldRegistrationSystemType self, ResourceId namespaceId) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterNamespaceDelegation(namespaceId);
  }

  function registerNamespace(CallWrapper memory self, ResourceId namespaceId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_registerNamespace_ResourceId.registerNamespace, (namespaceId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerSystemHook(
    CallWrapper memory self,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerSystemHook_ResourceId_ISystemHook_uint8.registerSystemHook,
      (systemId, hookAddress, enabledHooksBitmap)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function unregisterSystemHook(CallWrapper memory self, ResourceId systemId, ISystemHook hookAddress) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _unregisterSystemHook_ResourceId_ISystemHook.unregisterSystemHook,
      (systemId, hookAddress)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerSystem(CallWrapper memory self, ResourceId systemId, System system, bool publicAccess) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerSystem_ResourceId_System_bool.registerSystem,
      (systemId, system, publicAccess)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerFunctionSelector(
    CallWrapper memory self,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerFunctionSelector_ResourceId_string.registerFunctionSelector,
      (systemId, systemFunctionSignature)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes4));
  }

  function registerRootFunctionSelector(
    CallWrapper memory self,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerRootFunctionSelector_ResourceId_string_string.registerRootFunctionSelector,
      (systemId, worldFunctionSignature, systemFunctionSignature)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes4));
  }

  function registerDelegation(
    CallWrapper memory self,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerDelegation_address_ResourceId_bytes.registerDelegation,
      (delegatee, delegationControlId, initCallData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function unregisterDelegation(CallWrapper memory self, address delegatee) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_unregisterDelegation_address.unregisterDelegation, (delegatee));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerNamespaceDelegation(
    CallWrapper memory self,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerNamespaceDelegation_ResourceId_ResourceId_bytes.registerNamespaceDelegation,
      (namespaceId, delegationControlId, initCallData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function unregisterNamespaceDelegation(CallWrapper memory self, ResourceId namespaceId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WorldRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _unregisterNamespaceDelegation_ResourceId.unregisterNamespaceDelegation,
      (namespaceId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerNamespace(RootCallWrapper memory self, ResourceId namespaceId) internal {
    bytes memory systemCall = abi.encodeCall(_registerNamespace_ResourceId.registerNamespace, (namespaceId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerSystemHook(
    RootCallWrapper memory self,
    ResourceId systemId,
    ISystemHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerSystemHook_ResourceId_ISystemHook_uint8.registerSystemHook,
      (systemId, hookAddress, enabledHooksBitmap)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function unregisterSystemHook(RootCallWrapper memory self, ResourceId systemId, ISystemHook hookAddress) internal {
    bytes memory systemCall = abi.encodeCall(
      _unregisterSystemHook_ResourceId_ISystemHook.unregisterSystemHook,
      (systemId, hookAddress)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerSystem(RootCallWrapper memory self, ResourceId systemId, System system, bool publicAccess) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerSystem_ResourceId_System_bool.registerSystem,
      (systemId, system, publicAccess)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerFunctionSelector(
    RootCallWrapper memory self,
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory systemCall = abi.encodeCall(
      _registerFunctionSelector_ResourceId_string.registerFunctionSelector,
      (systemId, systemFunctionSignature)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes4));
  }

  function registerRootFunctionSelector(
    RootCallWrapper memory self,
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    bytes memory systemCall = abi.encodeCall(
      _registerRootFunctionSelector_ResourceId_string_string.registerRootFunctionSelector,
      (systemId, worldFunctionSignature, systemFunctionSignature)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes4));
  }

  function registerDelegation(
    RootCallWrapper memory self,
    address delegatee,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerDelegation_address_ResourceId_bytes.registerDelegation,
      (delegatee, delegationControlId, initCallData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function unregisterDelegation(RootCallWrapper memory self, address delegatee) internal {
    bytes memory systemCall = abi.encodeCall(_unregisterDelegation_address.unregisterDelegation, (delegatee));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerNamespaceDelegation(
    RootCallWrapper memory self,
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerNamespaceDelegation_ResourceId_ResourceId_bytes.registerNamespaceDelegation,
      (namespaceId, delegationControlId, initCallData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function unregisterNamespaceDelegation(RootCallWrapper memory self, ResourceId namespaceId) internal {
    bytes memory systemCall = abi.encodeCall(
      _unregisterNamespaceDelegation_ResourceId.unregisterNamespaceDelegation,
      (namespaceId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(WorldRegistrationSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(WorldRegistrationSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(
    WorldRegistrationSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(WorldRegistrationSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(WorldRegistrationSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WorldRegistrationSystemType) {
    return WorldRegistrationSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(WorldRegistrationSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _registerNamespace_ResourceId {
  function registerNamespace(ResourceId namespaceId) external;
}

interface _registerSystemHook_ResourceId_ISystemHook_uint8 {
  function registerSystemHook(ResourceId systemId, ISystemHook hookAddress, uint8 enabledHooksBitmap) external;
}

interface _unregisterSystemHook_ResourceId_ISystemHook {
  function unregisterSystemHook(ResourceId systemId, ISystemHook hookAddress) external;
}

interface _registerSystem_ResourceId_System_bool {
  function registerSystem(ResourceId systemId, System system, bool publicAccess) external;
}

interface _registerFunctionSelector_ResourceId_string {
  function registerFunctionSelector(ResourceId systemId, string memory systemFunctionSignature) external;
}

interface _registerRootFunctionSelector_ResourceId_string_string {
  function registerRootFunctionSelector(
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) external;
}

interface _registerDelegation_address_ResourceId_bytes {
  function registerDelegation(address delegatee, ResourceId delegationControlId, bytes memory initCallData) external;
}

interface _unregisterDelegation_address {
  function unregisterDelegation(address delegatee) external;
}

interface _registerNamespaceDelegation_ResourceId_ResourceId_bytes {
  function registerNamespaceDelegation(
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) external;
}

interface _unregisterNamespaceDelegation_ResourceId {
  function unregisterNamespaceDelegation(ResourceId namespaceId) external;
}

using WorldRegistrationSystemLib for WorldRegistrationSystemType global;
using WorldRegistrationSystemLib for CallWrapper global;
using WorldRegistrationSystemLib for RootCallWrapper global;
