// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AccessManagementSystem } from "../../../modules/init/implementations/AccessManagementSystem.sol";
import { ResourceId } from "../../../WorldResourceId.sol";
import { revertWithBytes } from "../../../revertWithBytes.sol";
import { IWorldCall } from "../../../IWorldKernel.sol";
import { SystemCall } from "../../../SystemCall.sol";
import { WorldContextConsumerLib } from "../../../WorldContext.sol";
import { Systems } from "../../../codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AccessManagementSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "AccessManagement" }))
AccessManagementSystemType constant accessManagementSystem = AccessManagementSystemType.wrap(
  0x737900000000000000000000000000004163636573734d616e6167656d656e74
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AccessManagementSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AccessManagementSystemLib {
  error AccessManagementSystemLib_CallingFromRootSystem();

  function grantAccess(AccessManagementSystemType self, ResourceId resourceId, address grantee) internal {
    return CallWrapper(self.toResourceId(), address(0)).grantAccess(resourceId, grantee);
  }

  function revokeAccess(AccessManagementSystemType self, ResourceId resourceId, address grantee) internal {
    return CallWrapper(self.toResourceId(), address(0)).revokeAccess(resourceId, grantee);
  }

  function transferOwnership(AccessManagementSystemType self, ResourceId namespaceId, address newOwner) internal {
    return CallWrapper(self.toResourceId(), address(0)).transferOwnership(namespaceId, newOwner);
  }

  function renounceOwnership(AccessManagementSystemType self, ResourceId namespaceId) internal {
    return CallWrapper(self.toResourceId(), address(0)).renounceOwnership(namespaceId);
  }

  function grantAccess(CallWrapper memory self, ResourceId resourceId, address grantee) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_grantAccess_ResourceId_address.grantAccess, (resourceId, grantee));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function revokeAccess(CallWrapper memory self, ResourceId resourceId, address grantee) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_revokeAccess_ResourceId_address.revokeAccess, (resourceId, grantee));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function transferOwnership(CallWrapper memory self, ResourceId namespaceId, address newOwner) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _transferOwnership_ResourceId_address.transferOwnership,
      (namespaceId, newOwner)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function renounceOwnership(CallWrapper memory self, ResourceId namespaceId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AccessManagementSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_renounceOwnership_ResourceId.renounceOwnership, (namespaceId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function grantAccess(RootCallWrapper memory self, ResourceId resourceId, address grantee) internal {
    bytes memory systemCall = abi.encodeCall(_grantAccess_ResourceId_address.grantAccess, (resourceId, grantee));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function revokeAccess(RootCallWrapper memory self, ResourceId resourceId, address grantee) internal {
    bytes memory systemCall = abi.encodeCall(_revokeAccess_ResourceId_address.revokeAccess, (resourceId, grantee));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function transferOwnership(RootCallWrapper memory self, ResourceId namespaceId, address newOwner) internal {
    bytes memory systemCall = abi.encodeCall(
      _transferOwnership_ResourceId_address.transferOwnership,
      (namespaceId, newOwner)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function renounceOwnership(RootCallWrapper memory self, ResourceId namespaceId) internal {
    bytes memory systemCall = abi.encodeCall(_renounceOwnership_ResourceId.renounceOwnership, (namespaceId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(AccessManagementSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AccessManagementSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(
    AccessManagementSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AccessManagementSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AccessManagementSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AccessManagementSystemType) {
    return AccessManagementSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AccessManagementSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _grantAccess_ResourceId_address {
  function grantAccess(ResourceId resourceId, address grantee) external;
}

interface _revokeAccess_ResourceId_address {
  function revokeAccess(ResourceId resourceId, address grantee) external;
}

interface _transferOwnership_ResourceId_address {
  function transferOwnership(ResourceId namespaceId, address newOwner) external;
}

interface _renounceOwnership_ResourceId {
  function renounceOwnership(ResourceId namespaceId) external;
}

using AccessManagementSystemLib for AccessManagementSystemType global;
using AccessManagementSystemLib for CallWrapper global;
using AccessManagementSystemLib for RootCallWrapper global;
