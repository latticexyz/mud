// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { StoreRegistrationSystem } from "../../../modules/init/implementations/StoreRegistrationSystem.sol";
import { ResourceId } from "../../../WorldResourceId.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { IStoreHook } from "@latticexyz/store/src/IStoreHook.sol";
import { revertWithBytes } from "../../../revertWithBytes.sol";
import { IWorldCall } from "../../../IWorldKernel.sol";
import { SystemCall } from "../../../SystemCall.sol";
import { WorldContextConsumerLib } from "../../../WorldContext.sol";
import { Systems } from "../../../codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type StoreRegistrationSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "Registration" }))
StoreRegistrationSystemType constant storeRegistrationSystem = StoreRegistrationSystemType.wrap(
  0x73790000000000000000000000000000526567697374726174696f6e00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title StoreRegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library StoreRegistrationSystemLib {
  error StoreRegistrationSystemLib_CallingFromRootSystem();

  function registerTable(
    StoreRegistrationSystemType self,
    ResourceId tableId,
    FieldLayout fieldLayout,
    Schema keySchema,
    Schema valueSchema,
    string[] memory keyNames,
    string[] memory fieldNames
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).registerTable(
        tableId,
        fieldLayout,
        keySchema,
        valueSchema,
        keyNames,
        fieldNames
      );
  }

  function registerStoreHook(
    StoreRegistrationSystemType self,
    ResourceId tableId,
    IStoreHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerStoreHook(tableId, hookAddress, enabledHooksBitmap);
  }

  function unregisterStoreHook(StoreRegistrationSystemType self, ResourceId tableId, IStoreHook hookAddress) internal {
    return CallWrapper(self.toResourceId(), address(0)).unregisterStoreHook(tableId, hookAddress);
  }

  function registerTable(
    CallWrapper memory self,
    ResourceId tableId,
    FieldLayout fieldLayout,
    Schema keySchema,
    Schema valueSchema,
    string[] memory keyNames,
    string[] memory fieldNames
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerTable_ResourceId_FieldLayout_Schema_Schema_stringArray_stringArray.registerTable,
      (tableId, fieldLayout, keySchema, valueSchema, keyNames, fieldNames)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerStoreHook(
    CallWrapper memory self,
    ResourceId tableId,
    IStoreHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerStoreHook_ResourceId_IStoreHook_uint8.registerStoreHook,
      (tableId, hookAddress, enabledHooksBitmap)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function unregisterStoreHook(CallWrapper memory self, ResourceId tableId, IStoreHook hookAddress) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StoreRegistrationSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _unregisterStoreHook_ResourceId_IStoreHook.unregisterStoreHook,
      (tableId, hookAddress)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerTable(
    RootCallWrapper memory self,
    ResourceId tableId,
    FieldLayout fieldLayout,
    Schema keySchema,
    Schema valueSchema,
    string[] memory keyNames,
    string[] memory fieldNames
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerTable_ResourceId_FieldLayout_Schema_Schema_stringArray_stringArray.registerTable,
      (tableId, fieldLayout, keySchema, valueSchema, keyNames, fieldNames)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerStoreHook(
    RootCallWrapper memory self,
    ResourceId tableId,
    IStoreHook hookAddress,
    uint8 enabledHooksBitmap
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerStoreHook_ResourceId_IStoreHook_uint8.registerStoreHook,
      (tableId, hookAddress, enabledHooksBitmap)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function unregisterStoreHook(RootCallWrapper memory self, ResourceId tableId, IStoreHook hookAddress) internal {
    bytes memory systemCall = abi.encodeCall(
      _unregisterStoreHook_ResourceId_IStoreHook.unregisterStoreHook,
      (tableId, hookAddress)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(StoreRegistrationSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(StoreRegistrationSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(
    StoreRegistrationSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(StoreRegistrationSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(StoreRegistrationSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (StoreRegistrationSystemType) {
    return StoreRegistrationSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(StoreRegistrationSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _registerTable_ResourceId_FieldLayout_Schema_Schema_stringArray_stringArray {
  function registerTable(
    ResourceId tableId,
    FieldLayout fieldLayout,
    Schema keySchema,
    Schema valueSchema,
    string[] memory keyNames,
    string[] memory fieldNames
  ) external;
}

interface _registerStoreHook_ResourceId_IStoreHook_uint8 {
  function registerStoreHook(ResourceId tableId, IStoreHook hookAddress, uint8 enabledHooksBitmap) external;
}

interface _unregisterStoreHook_ResourceId_IStoreHook {
  function unregisterStoreHook(ResourceId tableId, IStoreHook hookAddress) external;
}

using StoreRegistrationSystemLib for StoreRegistrationSystemType global;
using StoreRegistrationSystemLib for CallWrapper global;
using StoreRegistrationSystemLib for RootCallWrapper global;
