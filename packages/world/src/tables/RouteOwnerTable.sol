// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { RouteOwnerSchemaLib as SchemaLib } from "../schemas/RouteOwnerSchema.sol";

// -- User defined schema and tableId --
uint256 constant tableId = uint256(keccak256("mud.world.table.routeOwner"));

// -- Autogenerated library to interact with tables with this schema --
// TODO: autogenerate

library RouteOwnerTable {
  /** Register the table's schema */
  function registerSchema() internal {
    SchemaLib.registerSchema(tableId);
  }

  function registerSchema(IStore store) internal {
    SchemaLib.registerSchema(tableId, store);
  }

  /** Set the table's data */
  function set(uint256 routeId, address owner) internal {
    SchemaLib.set(tableId, routeId, owner);
  }

  /** Get the table's data */
  function get(uint256 routeId) internal view returns (address) {
    return SchemaLib.get(tableId, routeId);
  }

  function get(IStore store, uint256 routeId) internal view returns (address) {
    return SchemaLib.get(tableId, store, routeId);
  }
}
