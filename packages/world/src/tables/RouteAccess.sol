// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(keccak256("/world_internals/tables/RouteAccess"));
uint256 constant RouteAccessTableId = _tableId;

library RouteAccess {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema());
  }

  /** Register the table's schema for the specified store */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  /** Get value */
  function get(uint256 routeId, address caller) internal view returns (bool value) {
    bytes32[] memory _primaryKeys = new bytes32[](2);

    _primaryKeys[0] = bytes32(uint256(routeId));

    _primaryKeys[1] = bytes32(bytes20(caller));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return _toBool(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get value from the specified store */
  function get(
    IStore _store,
    uint256 routeId,
    address caller
  ) internal view returns (bool value) {
    bytes32[] memory _primaryKeys = new bytes32[](2);

    _primaryKeys[0] = bytes32(uint256(routeId));

    _primaryKeys[1] = bytes32(bytes20(caller));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return _toBool(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set value */
  function set(
    uint256 routeId,
    address caller,
    bool value
  ) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);

    _primaryKeys[0] = bytes32(uint256(routeId));

    _primaryKeys[1] = bytes32(bytes20(caller));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked(value));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 routeId, address caller) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);

    _primaryKeys[0] = bytes32(uint256(routeId));

    _primaryKeys[1] = bytes32(bytes20(caller));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
