// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0000000100000000000000000000000000000000000000000000000000000000
);

library KeysWithValue {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](1);
    _valueSchema[0] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "valueHash";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](1);
    fieldNames[0] = "keysWithValue";
  }

  /** Register the table with its config */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store, ResourceId _tableId) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get keysWithValue */
  function getKeysWithValue(
    ResourceId _tableId,
    bytes32 valueHash
  ) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get keysWithValue */
  function _getKeysWithValue(
    ResourceId _tableId,
    bytes32 valueHash
  ) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get keysWithValue (using the specified store) */
  function getKeysWithValue(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash
  ) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get keysWithValue */
  function get(ResourceId _tableId, bytes32 valueHash) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get keysWithValue */
  function _get(ResourceId _tableId, bytes32 valueHash) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get keysWithValue (using the specified store) */
  function get(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash
  ) internal view returns (bytes32[] memory keysWithValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set keysWithValue */
  function setKeysWithValue(ResourceId _tableId, bytes32 valueHash, bytes32[] memory keysWithValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Set keysWithValue */
  function _setKeysWithValue(ResourceId _tableId, bytes32 valueHash, bytes32[] memory keysWithValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Set keysWithValue (using the specified store) */
  function setKeysWithValue(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash,
    bytes32[] memory keysWithValue
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Set keysWithValue */
  function set(ResourceId _tableId, bytes32 valueHash, bytes32[] memory keysWithValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Set keysWithValue */
  function _set(ResourceId _tableId, bytes32 valueHash, bytes32[] memory keysWithValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Set keysWithValue (using the specified store) */
  function set(IStore _store, ResourceId _tableId, bytes32 valueHash, bytes32[] memory keysWithValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.setField(_tableId, _keyTuple, 0, EncodeArray.encode((keysWithValue)), _fieldLayout);
  }

  /** Get the length of keysWithValue */
  function lengthKeysWithValue(ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of keysWithValue */
  function _lengthKeysWithValue(ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of keysWithValue (using the specified store) */
  function lengthKeysWithValue(IStore _store, ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of keysWithValue */
  function length(ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of keysWithValue */
  function _length(ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = StoreCore.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of keysWithValue (using the specified store) */
  function length(IStore _store, ResourceId _tableId, bytes32 valueHash) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 0, _fieldLayout);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * Get an item of keysWithValue
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemKeysWithValue(
    ResourceId _tableId,
    bytes32 valueHash,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        0,
        _fieldLayout,
        _index * 32,
        (_index + 1) * 32
      );
      return (bytes32(_blob));
    }
  }

  /**
   * Get an item of keysWithValue
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemKeysWithValue(
    ResourceId _tableId,
    bytes32 valueHash,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(
        _tableId,
        _keyTuple,
        0,
        _fieldLayout,
        _index * 32,
        (_index + 1) * 32
      );
      return (bytes32(_blob));
    }
  }

  /**
   * Get an item of keysWithValue (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemKeysWithValue(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 0, _fieldLayout, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * Get an item of keysWithValue
   * (unchecked, returns invalid data if index overflows)
   */
  function getItem(ResourceId _tableId, bytes32 valueHash, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        0,
        _fieldLayout,
        _index * 32,
        (_index + 1) * 32
      );
      return (bytes32(_blob));
    }
  }

  /**
   * Get an item of keysWithValue
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItem(ResourceId _tableId, bytes32 valueHash, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = StoreCore.getFieldSlice(
        _tableId,
        _keyTuple,
        0,
        _fieldLayout,
        _index * 32,
        (_index + 1) * 32
      );
      return (bytes32(_blob));
    }
  }

  /**
   * Get an item of keysWithValue (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItem(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 0, _fieldLayout, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /** Push an element to keysWithValue */
  function pushKeysWithValue(ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to keysWithValue */
  function _pushKeysWithValue(ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to keysWithValue (using the specified store) */
  function pushKeysWithValue(IStore _store, ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to keysWithValue */
  function push(ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to keysWithValue */
  function _push(ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Push an element to keysWithValue (using the specified store) */
  function push(IStore _store, ResourceId _tableId, bytes32 valueHash, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)), _fieldLayout);
  }

  /** Pop an element from keysWithValue */
  function popKeysWithValue(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /** Pop an element from keysWithValue */
  function _popKeysWithValue(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /** Pop an element from keysWithValue (using the specified store) */
  function popKeysWithValue(IStore _store, ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /** Pop an element from keysWithValue */
  function pop(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /** Pop an element from keysWithValue */
  function _pop(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /** Pop an element from keysWithValue (using the specified store) */
  function pop(IStore _store, ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.popFromField(_tableId, _keyTuple, 0, 32, _fieldLayout);
  }

  /**
   * Update an element of keysWithValue at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateKeysWithValue(ResourceId _tableId, bytes32 valueHash, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of keysWithValue at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateKeysWithValue(ResourceId _tableId, bytes32 valueHash, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of keysWithValue (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateKeysWithValue(
    IStore _store,
    ResourceId _tableId,
    bytes32 valueHash,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of keysWithValue at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function update(ResourceId _tableId, bytes32 valueHash, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of keysWithValue at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _update(ResourceId _tableId, bytes32 valueHash, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      StoreCore.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /**
   * Update an element of keysWithValue (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function update(IStore _store, ResourceId _tableId, bytes32 valueHash, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 0, _index * 32, abi.encodePacked((_element)), _fieldLayout);
    }
  }

  /** Delete all data for given keys */
  function deleteRecord(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /** Delete all data for given keys */
  function _deleteRecord(ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /** Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, ResourceId _tableId, bytes32 valueHash) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    _store.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeLengths(bytes32[] memory keysWithValue) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(keysWithValue.length * 32);
    }
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeDynamic(bytes32[] memory keysWithValue) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((keysWithValue)));
  }

  /** Tightly pack full data using this table's field layout */
  function encode(bytes32[] memory keysWithValue) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(keysWithValue);
    bytes memory _dynamicData = encodeDynamic(keysWithValue);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(bytes32 valueHash) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = valueHash;

    return _keyTuple;
  }
}
