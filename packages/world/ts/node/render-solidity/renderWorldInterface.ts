import { renderArguments, renderedSolidityHeader, renderImports, type ImportDatum } from "@latticexyz/common/codegen";

export type RenderWorldOptions = {
  /** List of symbols to import, and their file paths */
  imports: ImportDatum[];
  /** Name of the interface to render */
  interfaceName: string;
  /** Path for store package imports */
  storeImportPath: string;
  /** Path for world package imports */
  worldImportPath: string;
};

export function renderWorldInterface({
  interfaceName,
  storeImportPath,
  worldImportPath,
  imports: initialImports,
}: RenderWorldOptions) {
  const imports = [
    ...(interfaceName === "IBaseWorld"
      ? [
          { symbol: "IStore", path: `${storeImportPath}/IStore.sol` },
          { symbol: "IWorldKernel", path: `${worldImportPath}/IWorldKernel.sol` },
        ]
      : [
          {
            symbol: "IBaseWorld",
            path: `${worldImportPath}/codegen/interfaces/IBaseWorld.sol`,
          },
        ]),
    ...initialImports,
  ];

  const importSymbols = imports.map(({ symbol }) => symbol);

  return `
    ${renderedSolidityHeader}

    ${renderImports(imports)}

    /**
     * @title ${interfaceName} 
     * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
     * @notice This interface integrates all systems and associated function selectors 
     * that are dynamically registered in the World during deployment.
     * @dev This is an autogenerated file; do not edit manually.
     */
    interface ${interfaceName} is ${renderArguments(importSymbols)} {
    }
  `;
}
