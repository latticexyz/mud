[
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1288692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1288692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1288692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "set a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, name, keyTuple1, abi.encodePacked(value))",
    "gasUsed": 194784
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1288692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "change a composite record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, compositeName, keyTupleA, abi.encodePacked(value2))",
    "gasUsed": 30243
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "delete a composite record on a table with keysInTableModule installed",
    "functionCall": "world.deleteRecord(namespace, compositeName, keyTupleA)",
    "gasUsed": 295136
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1288692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "change a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, name, keyTuple1, abi.encodePacked(value2))",
    "gasUsed": 28867
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "delete a record on a table with keysInTableModule installed",
    "functionCall": "world.deleteRecord(namespace, name, keyTuple1)",
    "gasUsed": 154965
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(sourceTableId))",
    "gasUsed": 627801
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of keys with a given value",
    "functionCall": "bytes32[] memory keysWithValue = getKeysWithValue(world, sourceTableId, abi.encode(value1))",
    "gasUsed": 7654
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "compute the target table selector",
    "functionCall": "bytes32 targetTableSelector = getTargetTableSelector(MODULE_NAMESPACE, sourceTableId)",
    "gasUsed": 2240
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(sourceTableId))",
    "gasUsed": 627801
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value))",
    "gasUsed": 166602
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(sourceTableId))",
    "gasUsed": 627801
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value2))",
    "gasUsed": 136254
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "delete a record on a table with KeysWithValueModule installed",
    "functionCall": "world.deleteRecord(namespace, sourceName, keyTuple1)",
    "gasUsed": 54842
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(sourceTableId))",
    "gasUsed": 627801
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value1))",
    "gasUsed": 174615
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value2))",
    "gasUsed": 138973
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 165454
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 77720
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 226953
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 141647
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 141429
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 19555
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 31908
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 1000 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 11271424
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 100 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 1054968
  },
  {
    "source": "test/query.t.sol",
    "name": "HasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 9494
  },
  {
    "source": "test/query.t.sol",
    "name": "NotValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 70902
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "install unique entity module",
    "functionCall": "world.installModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 826844
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (non-root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73721
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "installRoot unique entity module",
    "functionCall": "world.installRootModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 796386
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73721
  },
  {
    "source": "test/World.t.sol",
    "name": "Delete record",
    "functionCall": "world.deleteRecord(namespace, name, singletonKey)",
    "gasUsed": 16330
  },
  {
    "source": "test/World.t.sol",
    "name": "Push data to the table",
    "functionCall": "world.pushToField(namespace, name, keyTuple, 0, encodedData)",
    "gasUsed": 96691
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a fallback system",
    "functionCall": "bytes4 funcSelector1 = world.registerFunctionSelector(namespace, name, \"\", \"\")",
    "gasUsed": 87884
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root fallback system",
    "functionCall": "bytes4 funcSelector2 = world.registerRootFunctionSelector(namespace, name, worldFunc, 0)",
    "gasUsed": 79098
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a function selector",
    "functionCall": "bytes4 functionSelector = world.registerFunctionSelector(namespace, name, \"msgSender\", \"()\")",
    "gasUsed": 108482
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new namespace",
    "functionCall": "world.registerNamespace(\"test\")",
    "gasUsed": 162183
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root function selector",
    "functionCall": "bytes4 functionSelector = world.registerRootFunctionSelector(namespace, name, worldFunc, sysFunc)",
    "gasUsed": 95004
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new table in the namespace",
    "functionCall": "bytes32 tableSelector = world.registerTable(namespace, table, schema, defaultKeySchema)",
    "gasUsed": 262912
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to a table field",
    "functionCall": "world.setField(namespace, name, singletonKey, 0, abi.encodePacked(true))",
    "gasUsed": 44981
  },
  {
    "source": "test/World.t.sol",
    "name": "Set metadata",
    "functionCall": "world.setMetadata(namespace, name, tableName, fieldNames)",
    "gasUsed": 283682
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to the table",
    "functionCall": "Bool.set(world, tableId, true)",
    "gasUsed": 42870
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (cold)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 38220
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (warm)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 23014
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (cold)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 40554
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (warm)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 25752
  }
]
