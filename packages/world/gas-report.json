[
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1001362
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the last of 10 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 159424
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 10 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 17028
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1001362
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the last of 100 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 217547
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 100 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 106166
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1001362
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the last of 1000 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 815527
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 1000 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 1150686
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1001362
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "set a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(val1))",
    "gasUsed": 192396
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1001362
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "change a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(val2))",
    "gasUsed": 30814
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "delete a record on a table with keysInTableModule installed",
    "functionCall": "world.deleteRecord(namespace, sourceName, keyTuple1)",
    "gasUsed": 119605
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of keys with a given value",
    "functionCall": "bytes32[][] memory keysWithValue = getKeysWithValue(world, tableId, abi.encode(value1))",
    "gasUsed": 8716
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the last of 10 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 176465
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 10 keys with a given value",
    "functionCall": "bytes32[][] memory keysWithValue = getKeysWithValue(world, tableId, abi.encode(value))",
    "gasUsed": 17504
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the last of 100 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 234590
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 100 keys with a given value",
    "functionCall": "bytes32[][] memory keysWithValue = getKeysWithValue(world, tableId, abi.encode(value))",
    "gasUsed": 106655
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the last of 1000 keys",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 832640
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 1000 keys with a given value",
    "functionCall": "bytes32[][] memory keysWithValue = getKeysWithValue(world, tableId, abi.encode(value))",
    "gasUsed": 1151291
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value))",
    "gasUsed": 207309
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value2))",
    "gasUsed": 264556
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "delete a record on a table with KeysWithValueModule installed",
    "functionCall": "world.deleteRecord(namespace, sourceName, keyTuple1)",
    "gasUsed": 83725
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(tableId))",
    "gasUsed": 1004940
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value1))",
    "gasUsed": 215257
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value2))",
    "gasUsed": 228778
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 70788
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 46909
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 57998
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 42198
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 46080
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 20277
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 9394
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 1000 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 1150514
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 100 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 106289
  },
  {
    "source": "test/query.t.sol",
    "name": "HasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 9855
  },
  {
    "source": "test/query.t.sol",
    "name": "NotValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 40100
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "install unique entity module",
    "functionCall": "world.installModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 823967
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (non-root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73389
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "installRoot unique entity module",
    "functionCall": "world.installRootModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 794042
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73389
  },
  {
    "source": "test/World.t.sol",
    "name": "Delete record",
    "functionCall": "world.deleteRecord(namespace, name, singletonKey)",
    "gasUsed": 16152
  },
  {
    "source": "test/World.t.sol",
    "name": "Push data to the table",
    "functionCall": "world.pushToField(namespace, name, keyTuple, 0, encodedData)",
    "gasUsed": 96514
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a fallback system",
    "functionCall": "bytes4 funcSelector1 = world.registerFunctionSelector(namespace, name, \"\", \"\")",
    "gasUsed": 86979
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root fallback system",
    "functionCall": "bytes4 funcSelector2 = world.registerRootFunctionSelector(namespace, name, worldFunc, 0)",
    "gasUsed": 78208
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a function selector",
    "functionCall": "bytes4 functionSelector = world.registerFunctionSelector(namespace, name, \"msgSender\", \"()\")",
    "gasUsed": 107577
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new namespace",
    "functionCall": "world.registerNamespace(\"test\")",
    "gasUsed": 161681
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root function selector",
    "functionCall": "bytes4 functionSelector = world.registerRootFunctionSelector(namespace, name, worldFunc, sysFunc)",
    "gasUsed": 94114
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new table in the namespace",
    "functionCall": "bytes32 tableSelector = world.registerTable(namespace, table, schema, defaultKeySchema)",
    "gasUsed": 262408
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to a table field",
    "functionCall": "world.setField(namespace, name, singletonKey, 0, abi.encodePacked(true))",
    "gasUsed": 44803
  },
  {
    "source": "test/World.t.sol",
    "name": "Set metadata",
    "functionCall": "world.setMetadata(namespace, name, tableName, fieldNames)",
    "gasUsed": 283358
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to the table",
    "functionCall": "Bool.set(world, tableId, true)",
    "gasUsed": 42692
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (cold)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 38042
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (warm)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 22836
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (cold)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 40376
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (warm)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 25574
  }
]
