[
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the 10th key",
    "functionCall": "world.setRecord(namespace, name, lastKey, abi.encodePacked(value))",
    "gasUsed": 163062
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 10 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 115635
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the 100th key",
    "functionCall": "world.setRecord(namespace, name, lastKey, abi.encodePacked(value))",
    "gasUsed": 221185
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 100 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 1054871
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Setting the 1000th key",
    "functionCall": "world.setRecord(namespace, name, lastKey, abi.encodePacked(value))",
    "gasUsed": 819164
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "Get list of 1000 keys with a given value",
    "functionCall": "bytes32[][] memory keyTuples = getKeysInTable(world, tableId)",
    "gasUsed": 11261666
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "install keys in table module",
    "functionCall": "world.installRootModule(keysInTableModule, abi.encode(tableId))",
    "gasUsed": 1286932
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "set a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, name, keyTuple1, abi.encodePacked(value))",
    "gasUsed": 193907
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "change a composite record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, compositeName, keyTupleA, abi.encodePacked(value2))",
    "gasUsed": 30065
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "delete a composite record on a table with keysInTableModule installed",
    "functionCall": "world.deleteRecord(namespace, compositeName, keyTupleA)",
    "gasUsed": 292109
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "change a record on a table with keysInTableModule installed",
    "functionCall": "world.setRecord(namespace, name, keyTuple1, abi.encodePacked(value2))",
    "gasUsed": 28692
  },
  {
    "source": "test/KeysInTableModule.t.sol",
    "name": "delete a record on a table with keysInTableModule installed",
    "functionCall": "world.deleteRecord(namespace, name, keyTuple1)",
    "gasUsed": 153363
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of keys with a given value",
    "functionCall": "bytes32[] memory keysWithValue = getKeysWithValue(world, sourceTableId, abi.encode(value1))",
    "gasUsed": 7692
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the 10th key",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 134868
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 10 keys with a given value",
    "functionCall": "bytes32[] memory keyTuples = getKeysWithValue(world, sourceTableId, abi.encode(value))",
    "gasUsed": 12153
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the 100th key",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 192994
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 100 keys with a given value",
    "functionCall": "bytes32[] memory keyTuples = getKeysWithValue(world, sourceTableId, abi.encode(value))",
    "gasUsed": 57127
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the 1000th key",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 791001
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 1000 keys with a given value",
    "functionCall": "bytes32[] memory keyTuples = getKeysWithValue(world, sourceTableId, abi.encode(value))",
    "gasUsed": 571256
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Setting the 10000th key",
    "functionCall": "world.setRecord(namespace, sourceName, lastKey, abi.encodePacked(value))",
    "gasUsed": 8337290
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "Get list of 10000 keys with a given value",
    "functionCall": "bytes32[] memory keyTuples = getKeysWithValue(world, sourceTableId, abi.encode(value))",
    "gasUsed": 12151397
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "compute the target table selector",
    "functionCall": "bytes32 targetTableSelector = getTargetTableSelector(MODULE_NAMESPACE, sourceTableId)",
    "gasUsed": 2240
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "install keys with value module",
    "functionCall": "world.installRootModule(keysWithValueModule, abi.encode(sourceTableId))",
    "gasUsed": 626500
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value))",
    "gasUsed": 165712
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a record on a table with KeysWithValueModule installed",
    "functionCall": "world.setRecord(namespace, sourceName, keyTuple1, abi.encodePacked(value2))",
    "gasUsed": 135367
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "delete a record on a table with KeysWithValueModule installed",
    "functionCall": "world.deleteRecord(namespace, sourceName, keyTuple1)",
    "gasUsed": 54309
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "set a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value1))",
    "gasUsed": 173713
  },
  {
    "source": "test/KeysWithValueModule.t.sol",
    "name": "change a field on a table with KeysWithValueModule installed",
    "functionCall": "world.setField(namespace, sourceName, keyTuple1, 0, abi.encodePacked(value2))",
    "gasUsed": 138083
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 168826
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 78844
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 232573
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 146143
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueNotQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 144801
  },
  {
    "source": "test/query.t.sol",
    "name": "CombinedHasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 19555
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 33032
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 1000 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 11272548
  },
  {
    "source": "test/query.t.sol",
    "name": "HasQuery with 100 keys",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 1056092
  },
  {
    "source": "test/query.t.sol",
    "name": "HasValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 9494
  },
  {
    "source": "test/query.t.sol",
    "name": "NotValueQuery",
    "functionCall": "bytes32[][] memory keyTuples = query(world, fragments)",
    "gasUsed": 72026
  },
  {
    "source": "test/SnapSyncModule.t.sol",
    "name": "Call snap sync on a table with 1 record",
    "functionCall": "SyncRecord[] memory records = ISnapSyncSystem(address(world)).snapSync_system_getRecords(tableId, limit, 0)",
    "gasUsed": 43813
  },
  {
    "source": "test/SnapSyncModule.t.sol",
    "name": "Call snap sync on a table with 2 records",
    "functionCall": "records = ISnapSyncSystem(address(world)).snapSync_system_getRecords(tableId, limit, 0)",
    "gasUsed": 62449
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "install unique entity module",
    "functionCall": "world.installModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 824012
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (non-root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73389
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "installRoot unique entity module",
    "functionCall": "world.installRootModule(uniqueEntityModule, new bytes(0))",
    "gasUsed": 794087
  },
  {
    "source": "test/UniqueEntityModule.t.sol",
    "name": "get a unique entity nonce (root module)",
    "functionCall": "uint256 uniqueEntity = uint256(getUniqueEntity(world))",
    "gasUsed": 73389
  },
  {
    "source": "test/World.t.sol",
    "name": "Delete record",
    "functionCall": "world.deleteRecord(namespace, name, singletonKey)",
    "gasUsed": 16152
  },
  {
    "source": "test/World.t.sol",
    "name": "Push data to the table",
    "functionCall": "world.pushToField(namespace, name, keyTuple, 0, encodedData)",
    "gasUsed": 96514
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a fallback system",
    "functionCall": "bytes4 funcSelector1 = world.registerFunctionSelector(namespace, name, \"\", \"\")",
    "gasUsed": 87024
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root fallback system",
    "functionCall": "bytes4 funcSelector2 = world.registerRootFunctionSelector(namespace, name, worldFunc, 0)",
    "gasUsed": 78208
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a function selector",
    "functionCall": "bytes4 functionSelector = world.registerFunctionSelector(namespace, name, \"msgSender\", \"()\")",
    "gasUsed": 107622
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new namespace",
    "functionCall": "world.registerNamespace(\"test\")",
    "gasUsed": 161681
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a root function selector",
    "functionCall": "bytes4 functionSelector = world.registerRootFunctionSelector(namespace, name, worldFunc, sysFunc)",
    "gasUsed": 94114
  },
  {
    "source": "test/World.t.sol",
    "name": "Register a new table in the namespace",
    "functionCall": "bytes32 tableSelector = world.registerTable(namespace, table, schema, defaultKeySchema)",
    "gasUsed": 262408
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to a table field",
    "functionCall": "world.setField(namespace, name, singletonKey, 0, abi.encodePacked(true))",
    "gasUsed": 44803
  },
  {
    "source": "test/World.t.sol",
    "name": "Set metadata",
    "functionCall": "world.setMetadata(namespace, name, tableName, fieldNames)",
    "gasUsed": 283358
  },
  {
    "source": "test/World.t.sol",
    "name": "Write data to the table",
    "functionCall": "Bool.set(world, tableId, true)",
    "gasUsed": 42692
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (cold)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 38042
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "pop 1 address (warm)",
    "functionCall": "world.popFromField(namespace, name, keyTuple, 0, byteLengthToPop)",
    "gasUsed": 22836
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (cold)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 40376
  },
  {
    "source": "test/WorldDynamicUpdate.t.sol",
    "name": "updateInField 1 item (warm)",
    "functionCall": "world.updateInField(namespace, name, keyTuple, 0, 0, EncodeArray.encode(dataForUpdate))",
    "gasUsed": 25574
  }
]
