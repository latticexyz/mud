/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StoreReadInterface extends utils.Interface {
  functions: {
    "getField(bytes32,bytes32[],uint8)": FunctionFragment;
    "getFieldLength(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getFieldSlice(bytes32,bytes32[],uint8,bytes32,uint256,uint256)": FunctionFragment;
    "getKeySchema(bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[],bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[])": FunctionFragment;
    "getSchema(bytes32)": FunctionFragment;
    "isStore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getField"
      | "getFieldLength"
      | "getFieldSlice"
      | "getKeySchema"
      | "getRecord(bytes32,bytes32[],bytes32)"
      | "getRecord(bytes32,bytes32[])"
      | "getSchema"
      | "isStore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLength",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldSlice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeySchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "isStore", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getField", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeySchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStore", data: BytesLike): Result;

  events: {};
}

export interface StoreRead extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StoreReadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    isStore(overrides?: CallOverrides): Promise<[void]>;
  };

  getField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFieldLength(
    tableId: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    schema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFieldSlice(
    tableId: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    schema: PromiseOrValue<BytesLike>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getKeySchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRecord(bytes32,bytes32[],bytes32)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRecord(bytes32,bytes32[])"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  getSchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isStore(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isStore(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
