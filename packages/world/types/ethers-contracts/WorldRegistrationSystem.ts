/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WorldRegistrationSystemInterface extends utils.Interface {
  functions: {
    "registerFunctionSelector(bytes16,bytes16,string,string)": FunctionFragment;
    "registerHook(bytes16,bytes16,address)": FunctionFragment;
    "registerNamespace(bytes16)": FunctionFragment;
    "registerRootFunctionSelector(bytes16,bytes16,bytes4,bytes4)": FunctionFragment;
    "registerSystem(bytes16,bytes16,address,bool)": FunctionFragment;
    "registerSystemHook(bytes16,bytes16,address)": FunctionFragment;
    "registerTable(bytes16,bytes16,bytes32,bytes32)": FunctionFragment;
    "registerTableHook(bytes16,bytes16,address)": FunctionFragment;
    "setMetadata(bytes16,bytes16,string,string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "registerFunctionSelector"
      | "registerHook"
      | "registerNamespace"
      | "registerRootFunctionSelector"
      | "registerSystem"
      | "registerSystemHook"
      | "registerTable"
      | "registerTableHook"
      | "setMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "registerFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNamespace",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRootFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystem",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystemHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTable",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTableHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRootFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTableHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export interface WorldRegistrationSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldRegistrationSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadata(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  registerFunctionSelector(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    systemFunctionName: PromiseOrValue<string>,
    systemFunctionArguments: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNamespace(
    namespace: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRootFunctionSelector(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    worldFunctionSelector: PromiseOrValue<BytesLike>,
    systemFunctionSelector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystem(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    system: PromiseOrValue<string>,
    publicAccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystemHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTable(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    keySchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTableHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadata(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    tableName: PromiseOrValue<string>,
    fieldNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadata(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadata(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
