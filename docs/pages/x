      valueSchema: {
  - **`valueSchema`** (record):
./config.mdx
  Schema valueSchema,
./world/reference/world-external.mdx
  Schema valueSchema,
| `valueSchema` | `Schema`      | The schema for the values within the table.      |
./world/reference/internal/init-module-implementation.mdx
Store and World configs have been rebuilt with strong types. The shape of these configs have also changed slightly for clarity, the biggest change of which is merging of `keySchema` and `valueSchema` into a single `schema` with a separate `key` for a table's primary key.
       valueSchema: {
Now we can merge the `valueSchema` into `schema`.
-      valueSchema: {
If you previously used the table config shorthand without the full `keySchema` and `valueSchema`, some of the defaults have changed. Shorthands now use an `id: "bytes32"` field by default rather than `key: "bytes32"` and corresponding `key: ["id"]`. To keep previous behavior, you may have to manually define your `schema` with the previous `key` and `value` fields.
+console.log(SomeTable._valueSchema);
      valueSchema: {
**[feat: rename schema to valueSchema (#1482)](https://github.com/latticexyz/mud/commit/07dd6f32c9bb9f0e807bac3586c5cc9833f14ab9)** (@latticexyz/cli, @latticexyz/protocol-parser, @latticexyz/store-sync, @latticexyz/store, create-mud)
Renamed all occurrences of `schema` where it is used as "value schema" to `valueSchema` to clearly distinguish it from "key schema".
The only breaking change for users is the change from `schema` to `valueSchema` in `mud.config.ts`.
+     valueSchema: {
- Replace `Schema valueSchema` with `FieldLayout fieldLayout` in Store and World contracts.
**[feat(protoocl-parser): add valueSchemaToFieldLayoutHex (#1476)](https://github.com/latticexyz/mud/commit/9ff4dd955fd6dca36eb15cfe7e46bb522d2e943b)** (@latticexyz/protocol-parser)
Adds `valueSchemaToFieldLayoutHex` helper
**[fix(protocol-parser): export valueSchemaToFieldLayoutHex (#1481)](https://github.com/latticexyz/mud/commit/f8a01a047d73a15326ebf6577ea033674d8e61a9)** (@latticexyz/protocol-parser)
Export `valueSchemaToFieldLayoutHex` helper
**[feat(protocol-parser): add keySchema/valueSchema helpers (#1443)](https://github.com/latticexyz/mud/commit/5e71e1cb541b0a18ee414e18dd80f1dd24a92b98)** (@latticexyz/store)
**[feat(protocol-parser): add keySchema/valueSchema helpers (#1443)](https://github.com/latticexyz/mud/commit/5e71e1cb541b0a18ee414e18dd80f1dd24a92b98)** (@latticexyz/protocol-parser)
      Schema valueSchema
      Schema valueSchema
+   Schema valueSchema
  +    Schema valueSchema,
  + function getValueSchema(bytes32 table) external view returns (Schema valueSchema);
- `component.metadata.valueSchema` is an object with field names and their corresponding ABI types
./changelog.mdx
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
./guides/emojimon/5-a-wild-emojimon-appears.mdx
- `Position: { valueSchema: { x: 'uint32', y: 'uint32' } }` - determine which position an entity is located on a 2D grid.
      valueSchema: {
      valueSchema: {
When a table has multiple fields, we use `valueSchema` inside a structure to describe them instead of just using a string with the Solidity field type.
./guides/emojimon/3-players-and-movement.mdx
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
      valueSchema: {
./guides/emojimon/4-map-and-terrain.mdx
         valueSchema: "uint32",
         valueSchema: {
- `valueSchema`, the value in the entry
./guides/hello-world/add-table.mdx
         valueSchema: "uint32",
         valueSchema: {
         valueSchema: "uint32",
./guides/extending-a-world.mdx
      valueSchema: {
./templates/typescript/three.mdx
      valueSchema: "uint32",
 * @return _valueSchema The value schema for the table.
  SchemaType[] memory _valueSchema = new SchemaType[](1);
  _valueSchema[0] = SchemaType.UINT32;
  return SchemaLib.encode(_valueSchema);
./templates/typescript/contracts.mdx
    PositionComponent: { valueSchema: { x: "int32", y: "int32" } },
./state-query/typescript/recs.mdx
      "valueSchema": {
      "valueSchema": {
    "valueSchema": {
./state-query/typescript/zustand.mdx
  valueSchema: {
  valueSchema: {
./store/table-libraries.mdx
      valueSchema: {
      valueSchema: {
      valueSchema: {
./store/data-model.mdx
SchemaType[] memory valueSchemaTypes = new SchemaType[](1);
valueSchemaTypes[0] = SchemaType.UINT256;
Schema valueSchema = SchemaLib.encode(valueSchemaTypes);
  valueSchema: valueSchema,
./store/tables.mdx
function getValueSchema(ResourceId tableId) external view returns (Schema valueSchema);
  Schema valueSchema,
./store/reference/store.mdx
function getValueSchema(ResourceId tableId) internal view returns (Schema valueSchema);
| `valueSchema` | `Schema` | The value schema for the given table ID. |
  Schema valueSchema,
| `valueSchema` | `Schema`      | The value schema of the table.        |
function getValueSchema(ResourceId tableId) public view virtual returns (Schema valueSchema);
| `valueSchema` | `Schema` | The schema for values in the specified table. |
function getValueSchema(ResourceId tableId) internal view returns (Schema valueSchema);
| `valueSchema` | `Schema` | The schema for values in the specified table. |
  Schema valueSchema,
| `valueSchema` | `Schema`      | The schema for values in the table.     |
./store/reference/store-core.mdx
