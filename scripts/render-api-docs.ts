/**
 * Parse raw `forge doc` output from contract packages, clean it up, and render as markdown in docs.
 */

import { execa } from "execa";
import { readFileSync, readdirSync, writeFileSync } from "fs";
import path from "path";

const DOCS_ROOT = "next-docs/pages";

// Mapping from output file to array of input files
const PUBLIC_APIS = {
  "store/reference/store-core.mdx": ["store/src/StoreCore.sol"],
  "store/reference/store.mdx": [
    "store/src/IStore.sol",
    "store/src/IStoreData.sol",
    "store/src/IStoreErrors.sol",
    "store/src/IStoreEvents.sol",
    "store/src/IStoreRead.sol",
    "store/src/IStoreRegistration.sol",
  ],
  "store/reference/store-hook.mdx": ["store/src/IStoreHook.sol"],
};

function getPackages() {
  return [
    ...new Set(
      Object.values(PUBLIC_APIS)
        .flat()
        .map((path) => path.split("/")[0])
    ),
  ];
}

/**
 * Generate raw docs using `forge doc` in all relevant contract packages
 */
async function generateDocs() {
  const packages = getPackages();
  for (const pkg of packages) {
    const { stdout, stderr } = await execa("forge", ["doc", "--build"], {
      stdio: "pipe",
      cwd: path.join(process.cwd(), "packages", pkg),
    });
    if (stderr || stdout) {
      console.log(stderr || stdout);
    }
  }
}

function getDocsPath(sourceFilePath: string) {
  const pkg = sourceFilePath.split("/")[0];
  const relativeFilePath = sourceFilePath.replace(pkg, "");
  return path.join("packages", pkg, "docs", "src", relativeFilePath);
}

/**
 * Write output files from array of input files
 */
async function renderDocs() {
  for (const [outputFile, inputFiles] of Object.entries(PUBLIC_APIS)) {
    // Concat all input files for this output file
    const content =
      `[//]: # (This file is autogenerated, do not change manually)\n\n` +
      inputFiles
        .map((inputFile) => {
          const docsPath = getDocsPath(inputFile);
          const docsFiles = readdirSync(docsPath);
          return docsFiles.map((docsFile) => readFileSync(path.join(docsPath, docsFile)));
        })
        .flat()
        .join("\n");

    // Write the output file
    writeFileSync(path.join(DOCS_ROOT, outputFile), content);
  }
}

async function run() {
  await generateDocs();
  await renderDocs();
}

await run();
