// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { LibWrapperSystem } from "../../systems/LibWrapperSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type LibWrapperSystemType is bytes32;

LibWrapperSystemType constant libWrapperSystem = LibWrapperSystemType.wrap(
  0x737900000000000000000000000000004c69625772617070657253797374656d
);

/**
 * @title LibWrapperSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library LibWrapperSystemLib {
  function callLib(LibWrapperSystemType __systemId) internal view returns (string memory) {
    bytes memory systemCall = abi.encodeCall(LibWrapperSystem.callLib, ());
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (__systemId.toResourceId(), systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    bytes memory result = abi.decode(returnData, (bytes));

    return abi.decode(result, (string));
  }

  function callFreeFunc(LibWrapperSystemType __systemId) internal view returns (string memory) {
    bytes memory systemCall = abi.encodeCall(LibWrapperSystem.callFreeFunc, ());
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (__systemId.toResourceId(), systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    bytes memory result = abi.decode(returnData, (bytes));

    return abi.decode(result, (string));
  }

  function toResourceId(LibWrapperSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(LibWrapperSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (LibWrapperSystemType) {
    return LibWrapperSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using LibWrapperSystemLib for LibWrapperSystemType global;
