// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { VectorSystem } from "../../systems/VectorSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type VectorSystemType is bytes32;

VectorSystemType constant vectorSystem = VectorSystemType.wrap(
  0x73790000000000000000000000000000566563746f7253797374656d00000000
);

/**
 * @title VectorSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library VectorSystemLib {
  struct CallFromWrapper {
    VectorSystemType systemId;
    address from;
  }

  function setVector(VectorSystemType __systemId, uint32 key, int32 x, int32 y) internal {
    bytes memory systemCall = abi.encodeCall(VectorSystem.setVector, (key, x, y));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  // TODO: rename to callFrom?
  function from(VectorSystemType systemId, address _from) internal pure returns (CallFromWrapper memory) {
    return CallFromWrapper({ systemId: systemId, from: _from });
  }

  function toResourceId(VectorSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(VectorSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (VectorSystemType) {
    return VectorSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using VectorSystemLib for VectorSystemType global;
