// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { NumberListSystem } from "../../systems/NumberListSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type NumberListSystemType is bytes32;

NumberListSystemType constant numberListSystem = NumberListSystemType.wrap(
  0x737900000000000000000000000000004e756d6265724c69737453797374656d
);

/**
 * @title NumberListSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library NumberListSystemLib {
  function set(NumberListSystemType __systemId, uint32[] memory list) internal {
    bytes memory systemCall = abi.encodeCall(NumberListSystem.set, (list));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function push(NumberListSystemType __systemId, uint32 num) internal {
    bytes memory systemCall = abi.encodeCall(NumberListSystem.push, (num));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function pushRange(NumberListSystemType __systemId, uint32 start, uint32 end) internal {
    bytes memory systemCall = abi.encodeCall(NumberListSystem.pushRange, (start, end));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function pop(NumberListSystemType __systemId) internal {
    bytes memory systemCall = abi.encodeCall(NumberListSystem.pop, ());
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  function toResourceId(NumberListSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(NumberListSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (NumberListSystemType) {
    return NumberListSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using NumberListSystemLib for NumberListSystemType global;
