// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { NumberSystem } from "../../systems/NumberSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type NumberSystemType is bytes32;

NumberSystemType constant numberSystem = NumberSystemType.wrap(
  0x737900000000000000000000000000004e756d62657253797374656d00000000
);

/**
 * @title NumberSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library NumberSystemLib {
  struct CallFromWrapper {
    NumberSystemType systemId;
    address from;
  }

  function setNumber(NumberSystemType __systemId, uint32 key, uint32 value) internal {
    bytes memory systemCall = abi.encodeCall(NumberSystem.setNumber, (key, value));
    bytes memory result = _world().call(__systemId.toResourceId(), systemCall);
    result;
  }

  // TODO: rename to callFrom?
  function from(NumberSystemType systemId, address _from) internal pure returns (CallFromWrapper memory) {
    return CallFromWrapper({ systemId: systemId, from: _from });
  }

  function toResourceId(NumberSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(NumberSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (NumberSystemType) {
    return NumberSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using NumberSystemLib for NumberSystemType global;
