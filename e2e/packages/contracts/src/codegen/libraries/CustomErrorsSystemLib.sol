// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CustomErrorsSystem } from "../../systems/CustomErrorsSystem.sol";
import { Position } from "../../CustomTypes.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CustomErrorsSystemType is bytes32;

CustomErrorsSystemType constant customErrorsSystem = CustomErrorsSystemType.wrap(
  0x73790000000000000000000000000000437573746f6d4572726f727353797374
);

/**
 * @title CustomErrorsSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CustomErrorsSystemLib {
  error TestError1();
  error TestError2(Position position, uint256 value, string name, bool flag);

  function stub(CustomErrorsSystemType __systemId, uint256 arg) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(CustomErrorsSystem.stub, (arg));
    bytes memory worldCall = abi.encodeCall(IWorldCall.call, (__systemId.toResourceId(), systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    bytes memory result = abi.decode(returnData, (bytes));

    return abi.decode(result, (uint256));
  }

  function toResourceId(CustomErrorsSystemType systemId) internal pure returns (ResourceId) {
    return ResourceId.wrap(CustomErrorsSystemType.unwrap(systemId));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CustomErrorsSystemType) {
    return CustomErrorsSystemType.wrap(resourceId.unwrap());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

using CustomErrorsSystemLib for CustomErrorsSystemType global;
